0	Close closes the query .
1	Exec executes the query .
2	contextDone is called when the context is done .
3	NewEngine returns a new Engine instance
4	NewInstantQuery creates a new query .
5	NewRangeQuery creates a new query .
6	exec executes a query .
7	cumulativeSubqueryOffset returns the cumulative subquery offset for the given path .
8	extractFuncFromPath extracts a function from a path .
9	errorf implements the evaluator interface .
10	overrides the evaluator .
11	dropMetricName is used to drop a metric name
12	signalFunc returns a function that returns a signature for the given label .
13	evalSubquery evaluates a subquery expression .
14	vectorSelectorSingle returns the value of a vector selector .
15	signatureFunc returns the signature for the given labels .
16	VectorsCalculateBinsarBinOp returns a vectorized vector .
17	calculateBinOp returns the value of the given op .
18	shouldDropMetricName returns true if the operation is dropped .
19	NewEndpoints creates a new endpoint
20	calculateTrendValue calculates the trend value for the given index .
21	Linear regression .
22	dateWrapper is a helper function that takes a function and returns the result .
23	getFunction returns a function by name
24	Validate validates the ServiceDiscoveryConfig .
25	Dedupe implements the Deduper interface .
26	Log implements the Deduper interface .
27	Start starts the gate .
28	New returns a new Discovery instance .
29	ApplyConfig applies the given configuration to the handler .
30	isReady returns true if the handler is ready .
31	New returns a new http . FileSystem
32	UnmarshalJSON deserializes a TagValue from JSON .
33	Write writes samples to the client .
34	mergeSamples merges two samples .
35	Describe implements the Collector interface .
36	NewDiscovery creates a new Discovery
37	newAuthTokenRoundTripper returns a new http . RoundTripper
38	newAuthTokenFileRoundTripper creates a new auth token .
39	isContainerNet returns true if the app is container
40	fetchApps fetches apps from url
41	randomAppsURL returns a random URL for a list of apps .
42	appsToTargetGroups converts a list of apps to target group .
43	extractPortMapping extracts ports from a list of ports
44	Load loads a configuration file .
45	LoadFile loads a configuration file .
46	resolveFilepaths resolves the filepaths for the given config .
47	isZero returns true if the configuration is zero .
48	CheckTargetAddress checks if the given address is valid .
49	NewDiscovery creates a new Discovery .
50	shouldWatch returns true if the service should be watched .
51	shouldWatchFromName returns true if the service should be watched
52	getDatacenter returns client datacenter
53	Initialize the datacenter
54	watchServices is used to watch a list of services .
55	watchService is used to watch a service .
56	NewPod creates a new pod
57	NewMatcher creates a new Matcher .
58	Matches returns true if the given string matches the given string .
59	SpanOperation returns the span of the query time .
60	NewQueryStats returns a new QueryStats instance .
61	NewDiscovery returns a new discovery service .
62	UnmarshalYAML unmarshals a YAML file .
63	Hash returns the hash of labels .
64	HashForLabels returns the hash for the given labels .
65	Copy returns a copy of the labels .
66	Get returns the value for the given name
67	Has returns true if the given name exists .
68	Equal returns true if two labels are equal
69	Map returns a map of labels .
70	New returns a new set of labels .
71	FromStrings returns a sorted list of labels .
72	NewBuilder returns a new Builder .
73	Del deletes a named namespace .
74	Labels returns a sorted list of labels .
75	NewStorage creates a new Storage .
76	ApplyConfig applies the given configuration to the storage .
77	Querier returns a new Quer .
78	Close closes the storage .
79	RateLimit creates a new Logger .
80	newHypervisorDiscovery creates a new hypervisor
81	New returns a new API endpoint .
82	RegisterGRPC registers a grpc server .
83	HTTPHandler registers the http handler for the admin server .
84	extractTimeRange extracts the minimum time range from min and max .
85	Write writes data to the compressed response .
86	Close closes the response .
87	newCompressedResponseWriter returns a compressed response writer .
88	AlertTemplateData returns a new AlertTemplateData
89	Fcs adds a function to the expander .
90	ExpandHTML expands the template files .
91	NewTarget returns a new Target .
92	Metadata returns the metadata for the given metric .
93	hash returns the hash of the target .
94	Offset returns the offset of the target .
95	Labels returns the labels for this target .
96	DiscoveredLabels returns the discovered labels .
97	SetDiscoveredLabels sets the discovered labels .
98	URL returns the URL for this Target .
99	LastError returns the last error .
100	LastScrape returns the last scrape time .
101	LastScrapeDuration returns the last scrape duration .
102	Health returns the health of the target .
103	targetFromGroup builds targets from a group group .
104	FromTime converts time to int64 .
105	Time returns the time in milliseconds .
106	SetCORS sets the CORS header .
107	Store stores a request to the client .
108	Name returns the name of the client .
109	Read mocks base method
110	NewDiscovery creates a new Discovery
111	create azure client
112	newAzureResourceFromID creates a Azure Resource from an ID
113	String returns a string representation of Timer .
114	Swap swaps two timers .
115	String returns a string representation of the TimerGroup .
116	RegisterAdminHandler registers a grpc admin server .
117	ParseExpr parses a string .
118	ParseMetric parses a metric .
119	ParseMetricSelector parses a metric selector .
120	newParser returns a new parser .
121	parseExpr parses an expression .
122	parseSeriesDesc parses a series of series descriptors .
123	typecheck checks if node is typecheck
124	next returns the next token
125	ekek returns the next token .
126	errorf implements the parser interface .
127	Error implements the parser interface .
128	expect returns the next item .
129	expectOne returns the next item in the parser .
130	overrides the parser .
131	expr returns an ExpressionExpression
132	Convert a string to a float64 .
133	expectType checks if the given node is a valid type .
134	Appender returns a new appender .
135	Add adds a timestamp to the metric tracker .
136	AddFast adds a value to the tracker .
137	Commit is used to commit a timestamp .
138	Add adds a problem to the problem .
139	Lint implements the linter interface .
140	lint returns a list of problem problems .
141	lintHelp is a helper function for lint help
142	lintMetricUnits returns a list of problems .
143	lintCounter checks if a metric family is valid .
144	Write writes samples to the client .
145	New creates a new pool .
146	Get returns a new bucket .
147	Put implements pool .
148	TotalSamples returns the number of samples in the matrix .
149	Vector returns the result of the result .
150	Scar returns the value of the result .
151	NewDiscovery creates a new Discovery
152	NewQueueManager creates a new QueueManager .
153	Append adds samples to the queue .
154	Start starts the queue .
155	Stop stops the queue .
156	StoreSeries stores a series of labels in the queue .
157	processExternalLabels converts external labels to external labels .
158	start starts the shards .
159	stop stops all shards .
160	enqueue enqueue a new sample
161	sendSamplesWithBackoff sends a batch of samples to the queue .
162	New returns a new Discovery instance .
163	compileCORSRegexString returns a regexp for the given string .
164	computeExternalURL computes the external URL .
165	sendAlerts sends an alert to the sender
166	Validate validates rules .
167	Validate validates the Rule .
168	Parse parses the given content .
169	ParseFile parses a file .
170	TableLinkForExpression returns the table link for the given expression .
171	GraphLinkForExpression returns a URL for the given expression .
172	NewFanout creates a new Storage .
173	Close closes the fanout .
174	NewMergeQuer creates a new Querier .
175	Select selects and returns a set of SeriesSet .
176	LabelValues returns the labels for the given name .
177	LabelNames returns a slice of label names .
178	Close closes all queries .
179	NewAlertingRule creates a new AlertingRule
180	SetLastError sets the last error
181	LastError returns the last error .
182	SetHealth sets the health rule .
183	Health returns the health of the rule .
184	forStateSample returns a prometheus sample for a given state .
185	SetEvaluationDuration sets the evaluation duration .
186	GetEvaluationDuration returns the evaluation duration .
187	State returns the current alert state .
188	ActiveAlerts returns all active alerts .
189	currentAlerts returns the list of active alerts .
190	refresh target groups
191	writeOutput writes the output to the output file .
192	Run starts the adapter
193	NewAdapter returns a new Adapter
194	NewGroupMetrics returns a new Metrics
195	EngineQueryFunc returns a QueryFunc for the given queryable .
196	NewGroup creates a new Group .
197	GetEvaluationDuration returns the evaluation duration of the group .
198	Set evaluation duration .
199	GetEvaluationTimestamp returns the evaluation time .
200	setEvaluationTimestamp sets the evaluation time .
201	evalTimestamp returns the timestamp for the group .
202	CopyState copies the rules from the group .
203	NewManager creates a new manager .
204	Stop stops the manager .
205	Update updates the groups .
206	LoadGroups loads the groups from a file .
207	RuleGroups returns a slice of group groups .
208	Rules returns a slice of rules .
209	AlertingRules returns all alerts in the manager .
210	Collect collects metrics from the manager .
211	NewWALWatcher creates a new WALWatcher .
212	Start starts the WALWatcher .
213	Stop stops the WALWatcher .
214	findSegmentForIndex returns the index for the given index .
215	watch is used to watch a segment
216	readCheckpoint reads a checkpoint directory .
217	get segment size
218	Printf logs a message to the logger .
219	NewZookeeperTreeCache creates a new zookeeper tree .
220	NewManager creates a new Manager .
221	Name sets the name of the manager .
222	Run starts the manager .
223	ApplyConfig applies the given configuration to the manager .
224	StartCustomProvider starts a new provider
225	Run implements the ServiceProvider interface .
226	NewNerveDiscovery returns a new Discovery instance
227	NewServersetDiscovery returns a new DiscoveryDiscovery instance
228	NewDiscovery creates a new Discovery .
229	FuzzParseMetricSelector parses a metric selector .
230	FuzzParseExpr computes the fuzzing expression .
231	FuzzParseStmts parses the input string .
232	NewManager creates a new manager .
233	Run implements the Manager interface .
234	setJitterSeed sets the Jitter s Jitter s seed .
235	Stop stops the collector .
236	ApplyConfig applies the given configuration to the manager .
237	TargetAll returns all targets in the manager .
238	TargetActive returns a map of all active targets .
239	DroppedDropped returns a map of targets that have been dropped .
240	getFqdn returns the name of the host
241	tagsFromMetric returns a map of tags from a metric
242	Write writes samples to the client .
243	QueryableClient returns a queryable queryable for remote query .
244	Select returns the series set for the query .
245	ExternalLabelsHandler returns a QueryableFunc that returns a Queryable . Queryable .
246	Select returns a SeriesSet with the given matchers .
247	PreferLocalStorageFilter returns a QueryableFunc that returns a queryable queryable that can be used to produce a queryable .
248	RequiredMatchersFilter returns a queryable queryable that filters all required matchers .
249	Select returns the series set of matched matchers .
250	addExternalLabels adds external labels to the list of labels .
251	newInstanceDiscovery creates a new instance of InstanceDiscovery
252	ResolvedAt returns true if the alert is resolved .
253	NewManager creates a new Manager .
254	ApplyConfig applies the given configuration .
255	Run is the main loop .
256	Send sends alerts to the sink .
257	Alertmanagers returns a list of all alert managers .
258	DroppedAlert managers
259	send all alerts
260	Stop stops the manager .
261	sync synchronizes all alert managers .
262	alertmanagerFromGroup returns a list of alert managers from a group .
263	String returns the string representation of the item .
264	isAggregatorWithParam returns true if the item is AggregatorWithParam
265	isComparison operator
266	isSetOperator returns true if the item is set .
267	 precedence .
268	next returns the next rune .
269	peek returns the next rune .
270	emit emits an item type .
271	linePosition returns the line position .
272	nextItem returns the next item .
273	lex returns a new lexer .
274	lexInsideBraces is a helper function for lexer .
275	lexValueSequence reads a value sequence sequence .
276	digitVal returns the digit value of a character .
277	lexString scans a string .
278	lexSpace is a helper function for lexer .
279	lexLineComment parses a line comment .
280	lexNumberOrDuration scans a number or returns an error .
281	scanNumber scans a number .
282	lexIdentifier parses an identifier .
283	lexKeywordOrIdentifier parses a key - value pair .
284	isLabel checks if a string is a label
285	Series returns the series of series .
286	Type implements the PromParser interface .
287	nextToken returns the next token .
288	NewAPI creates a new API .
289	mergeLabels merges two labels .
290	Set initializes the storage .
291	Get returns the underlying storage .
292	Querier implements storage .
293	Appender implements storage .
294	Close closes the storage .
295	Adapter creates a new storage adapter .
296	Open opens a tsdb database .
297	Appender returns an appender .
298	NewRegexp returns a new Regexp .
299	MustNewRegexp creates a new Regexp .
300	Process takes a list of configs and returns it .
301	sum64 computes the sum of the given hash .
302	stop stops the pool
303	reload reloads metrics from the scheduler
304	Sync synchronizes all targets from the target group .
305	sync synchronizes all targets from the pool .
306	appender creates a new appender .
307	Uname returns the system name .
308	DecodeReadRequest decodes a read request .
309	EncodeReadResponse encodes a read response .
310	ToQuery converts a query to a prometheus query .
311	FromQuery builds a query from a query .
312	ToQueryResult converts a SeriesSet into a QueryResult .
313	FromQueryResult converts a query result into a SeriesSet .
314	Seek implements the SeekIterator interface .
315	At returns the value at the current time .
316	Next returns true if the series is next .
317	NewBufferIterator creates a new buffered series iterator .
318	Reset resets the series iterator .
319	ReduceDelta returns true if the given delta has a delta .
320	PeekBack returns the last element in the buffer .
321	Seek implements the SeekIterator interface .
322	Next returns true if the iterator is next .
323	Iterator returns the series iterator .
324	Reduces the given delta to the given delta .
325	nthLast returns the last element in the ring ring
326	next returns the next token .
327	Unit returns the unit text .
328	Metric returns a string representation of the metric .
329	concatenateBuckets coalesce buckets .
330	Collect collects metrics from the collector .
331	NewTimestampCollector returns a new TimestampCollector .
332	NewDiscovery creates a new Discovery
333	listFiles returns a list of all the paths .
334	watchFiles starts watching files .
335	stop stops the discovery .
336	refresh is used to refresh all the files in the directory
337	readFile reads a file from a file .
338	fileSource returns the source code for the given filename .
339	NewRecordingRule creates a new recording rule
340	Eval evaluates the metric with the given query .
341	SetEvaluationDuration sets the evaluation duration .
342	SetLastError sets the last error .
343	LastError returns the last error .
344	SetHealth sets the health of the Rule .
345	Health returns the health of the rule .
346	GetEvaluationDuration returns the evaluation duration .
347	HTMLSnippet generates a HTML snippet for the given rule .
348	rate returns the rate of the ewmaRate .
349	tick is used to tick the rate of events
350	incr adds new events to ewmaRate
351	NewNode creates a new node .
352	CheckConfig is used to check config files
353	CheckRules is used to check rules
354	CheckMetrics is used to check metrics .
355	QueryInstant queries the given URL with the given query .
356	QueryRange is used to query a query .
357	QuerySeries queries a series of matchers .
358	QueryLabels queries the labels for a given URL .
359	UnmarshalJSON deserializes a Group
360	NewStreamReader creates a new io . Reader .
361	StatusMessage returns the string representation of the given status code .
362	CopyTo copies the arguments to dst .
363	Parse parses a string from a string .
364	ParseBytes parses a byte slice .
365	QueryString returns the query string .
366	AppendBytes appends a string to dst .
367	WriteTo implements io . WriterTo interface .
368	Del deletes a key .
369	DelBytes deletes a key .
370	Add adds a key to the list
371	AddBytes adds a key to the args list .
372	AddBytesKV adds a key to the args .
373	AddNoValue adds a value to the Args .
374	AddBytesKNoValue adds a key to the args list .
375	Set sets the value of a key .
376	SetBytes sets the value of a key .
377	SetBytesKV sets the value of a key .
378	SetNoValue sets the value for the given key .
379	SetBytesKNoValue sets the key for the given key .
380	Peek returns the value of a key .
381	PeekBytes returns the value of a key .
382	PeekMulti returns a slice of values for a given key .
383	PeekMultiBytes returns a slice of bytes with the given key .
384	Has returns true if the given key exists .
385	HasBytes returns true if the given key exists .
386	GetUint returns the value of a key .
387	SetUint sets the value at key .
388	SetUintBytes sets the value at key .
389	GetUfloat returns the value of the given key .
390	GetBool returns true if the key is a boolean value .
391	decodeArgAppendNoPlus decodes arg into dst .
392	AppendHTMLEscape appends a string to dst .
393	AppendIPv4 appends IPv4 address to dst .
394	ParseIPv4 parses an IPv4 address from a string .
395	ParseUint parses a byte slice .
396	ParseUfloat parses a float64 from buf .
397	AppendQuotedArg appends a quoted string to dst .
398	CopyTo copies the URI to dst .
399	SetHash sets the hash of the URI .
400	SetHashBytes sets the hash of the URI .
401	SetQueryString sets the query string .
402	SetQueryStringBytes sets the query string .
403	SetPath sets the path to the URI .
404	SetPathBytes sets the path to the URI .
405	SetScheme sets the scheme .
406	SetSchemeBytes sets the scheme .
407	Reset resets the URI .
408	SetHost sets the host .
409	SetHostBytes sets the host .
410	RequestURI returns the request URI .
411	AppendBytes appends the request to dst .
412	WriteTo implements io . WriterTo interface .
413	NewWriter creates a new writer .
414	NewPipeConns creates a new PipeConns .
415	Close closes the PipeConn .
416	LastUseTime returns the last time in the host .
417	AcquireRequest returns a new Request .
418	AcquireResponse returns a new Response .
419	DoDeadline implements the LBClient interface .
420	DoTimeout implements the LBClient interface .
421	Do invokes the LB client .
422	Serve implements the Serve interface .
423	ServeTLS is used to serve TLS connections .
424	ServeTLES implements the Server interface .
425	ListenAndServe starts a server with a given handler .
426	ListenAndServeUnix is a helper function to listen for a given file .
427	ListenAndServeTLS is a wrapper around ListenAndSLS .
428	ListenAndServe is used to listen for TLS connections .
429	TimeoutHandler adds a timeout to the request .
430	 TLSConnectionState returns the TLS connection state .
431	String returns a string representation of the request context .
432	SetContentType sets the content type
433	SetContentTypeBytes sets the content type .
434	FormFile returns a multipart file .
435	SaveMultipartFile saves a multipart file .
436	RemoteAddr returns the remote address of the request .
437	Error sends a response to the response
438	Success sets the response body
439	SuccessString sets the response body
440	IfModifiedSince returns true if the request was modified
441	NotFound sets the response body
442	Write appends data to the response
443	WriteString appends a string to the response
444	Logger returns the logger .
445	NextProto adds the next protocol to the server .
446	ListenAndServe starts the server with the given addr .
447	ListenAndServeServe implements the Serve interface .
448	ListenAndServeTLS is used to serve TLS connections .
449	ListenAndServeAndServe is used to serve TLS connections .
450	ServeTLS implements the Server interface .
451	ServeTLES implements the Server interface .
452	AppendCertEmbed adds a certificate to the server .
453	Serve implements the Server interface .
454	Shutdown shuts down the server .
455	WriteGzip writes p to w . Writer .
456	WriteGunzip writes p to w . Writer .
457	AppendGunzipBytes appends src to dst .
458	WriteDeflate writes p to w . Writer .
459	WriteInflate writes a slice of bytes to w .
460	AppendInflateBytes appends src to dst .
461	SetRequestURI sets the request URI .
462	SetRequestURIBytes sets the request URI .
463	RequestURI returns the request URI .
464	SendFile sends a file to the response .
465	BodyWriter returns the body of the response .
466	BodyWriter returns the body of the request .
467	Body returns the body of the response .
468	BodyWriteTo writes the body to w .
469	BodyWriteTo implements io . WriterTo interface .
470	AppendBodyString appends a string to the response buffer .
471	SetBodyString sets the body of the response .
472	ResetBody clears the response body .
473	SetBodyRaw sets the body of the response .
474	ReleaseBody releases the body of the response .
475	ReleaseBody releases the body of the request .
476	SwapBody implements the Response interface .
477	SwapBody swaps the body of the request .
478	Body returns the body of the request .
479	AppendBodyString appends a string to the body .
480	SetBodyString sets the body of the request .
481	ResetBody resets the body of the request .
482	CopyTo copies the request to dst .
483	CopyTo copies the response to dst .
484	WriteMultipartForm writes a multipart form .
485	Reset resets the response .
486	ReadLimitBody reads the response body from the response .
487	WriteTo implements io . WriterTo interface .
488	WriteTo implements io . WriterTo interface .
489	Write writes the request to the writer .
490	Write implements the Writer interface .
491	SetLastModified sets the last modified time .
492	PeekCookie returns the value of a cookie .
493	ContentType returns the content type of the response header .
494	SetServer sets the server s server .
495	SetServerBytes sets the server s server .
496	Host returns the host header .
497	SetHost sets the host .
498	SetHostBytes sets the host header .
499	SetUserAgent sets the user agent s user agent .
500	SetUserAgentBytes sets the user agent s user agent .
501	Method returns the request header .
502	SetMethod sets the request header .
503	SetMethodBytes sets the request header .
504	RequestURI returns the request URI .
505	SetRequestURI sets the request URI .
506	SetRequestURIBytes sets the request URI bytes .
507	HasAcceptEncoding returns true if the request has acceptEncoding .
508	HasAcceptEncodingBytes returns true if the given AcceptEncoding is valid .
509	Len returns the number of bytes in the response .
510	Reset resets the response header .
511	SetCookie sets a cookie
512	DelClientCookie deletes a cookie
513	DelCookie deletes a cookie
514	DelCookie deletes a cookie
515	DelAllCookies deletes all cookies .
516	Peek returns the value of a key .
517	PeekBytes returns a slice of bytes from the response .
518	Cookie returns the value of a cookie .
519	CookieBytes returns a slice of cookie bytes .
520	Cookie parses a cookie .
521	Read implements the Reader interface .
522	Header returns the response header .
523	AppendBytes appends the response header to dst .
524	Write implements the Writer interface .
525	WriteTo implements io . WriterTo interface .
526	Header returns the request header .
527	AppendBytes appends the request header to dst .
528	ServeFileUncompressed is part of the request .
529	NewRequestHandler returns a new RequestHandler
530	FileLastModified returns the last modified time .
531	CopyTo copies a new cookie to another .
532	SetPath sets the path to the cookie .
533	SetPathBytes sets the path to the cookie .
534	SetDomain sets the domain .
535	SetDomainBytes sets the domain s domain .
536	Expire returns the expire time .
537	SetValue sets the value of the cookie .
538	SetValueBytes sets the value of the cookie .
539	SetKey sets the key .
540	SetKeyBytes sets the key bytes .
541	Reset resets the cookie .
542	AppendBytes appends the cookie to dst .
543	Cookie returns the cookie .
544	WriteTo writes the cookie to w .
545	Parse parses a cookie .
546	ParseBytes parses a cookie from a byte slice .
547	append response cookies
548	AcquireTimer returns a new timer .
549	Accept accepts a connection and returns the connection .
550	Close closes the listener .
551	FileServer adds a path to the router .
552	Reset resets the route .
553	URLParam returns the value of the given key .
554	URLParam returns the URL parameter for the given key .
555	URLParamFromCtx returns the URL parameter for the given key .
556	Add adds a key to the route params
557	ServerBaseContext adds a context to the given context .
558	GetHead returns the HTTP header for the request .
559	Ping sends a ping request to w .
560	StripSlashes returns a new http . HandlerFunc with the given path .
561	AllowContentType accepts a list of content types .
562	GetReqID returns the request ID .
563	HandlerFunc creates a middleware for middlewares .
564	chain wraps middlewares for middlewares
565	NewMux returns a new Mux
566	ServeHTTP implements the Mux interface .
567	Use adds middlewares to the middleware .
568	Handle implements Mux .
569	HandleFunc registers a handler for the given pattern .
570	Method registers a handler for a given method .
571	MethodFunc adds a handler to the Mux .
572	Connect registers a handler for the given pattern .
573	Delete registers a handler for the given pattern .
574	Get registers a GET request .
575	Head registers a HEAD request .
576	Options adds a route to the Mux .
577	Patch registers a handler for the given pattern .
578	Post registers a POST handler for the given pattern .
579	Put adds a handler to the Mux .
580	Trace registers a handler for the given pattern .
581	NotFound adds a handler to the middleware .
582	MethodNotAllowed sets the MethodNotAllowed handler for this Mux .
583	With adds middlewares to the router
584	NotFoundHandler returns http . HandlerFunc
585	MethodNotAllowedHandler returns a HandlerFunc that returns http . HandlerFunc .
586	handle registers a new route
587	routeHTTP is used to serve a route
588	updateSubRoutes is used to update sub - routes
589	methodNotAllowedHandler is called when the request is not allowed .
590	RequestLogger returns a new http . Handler for the request .
591	GetLogEntry returns the log entry .
592	WithLogEntry adds a log entry to the request .
593	NewLogEntry creates a new LogEntry .
594	ContentCharset returns a new http . Handler for the given charset .
595	contentEncoding returns true if the given string is encoded .
596	split splits a string into two strings .
597	addChild adds a child node to the node .
598	findRoute finds the route with the given path .
599	ArticleCtx adds an article to the next page .
600	SearchArticles returns a list of articles .
601	CreateArticle creates a new article
602	GetArticle returns an article
603	UpdateArticle updates an article
604	DeleteArticle deletes an article .
605	adminRouter returns a router for the admin
606	AdminOnly is part of the http . Handler interface .
607	Paginate returns a new http . HandlerFunc for the next request .
608	init initializer
609	NewCompressor returns a new Compressor .
610	Handler returns a new http . Handler that implements the http . Handler interface .
611	selectEncoder returns the encoder for the given header .
612	DefaultCompress returns a new http . Handler with default compression .
613	Thttle returns a new http . Handler for the given limit .
614	ThrottleBacklog creates a new http . Handler .
615	ServeHTTP implements the http . Handler interface .
616	NewWrapResponseWriter creates a new WrapperWriter .
617	Routes returns the routes for the given resource .
618	NewAWSProvider creates a new AWS provider
619	newChanges returns a new route for the given endpoint .
620	matchingZones returns a list of available zones that match the given hostname .
621	isAWSLoadBalancer returns true if the endpoint is an AWSLoadBalancer .
622	isAWSAlias returns the AWS alias for an AWS alias
623	canonicalHostedZone returns the canonical hostname for the given hostname .
624	NewTXTRegistry creates a new TXTRegistry
625	Records returns a list of all DNS records .
626	NewDomainFilter creates a new domain filter
627	Match returns true if the domain matches the given domain .
628	IsConfigured returns true if the domain filters are configured .
629	InMemoryWithLogging returns a new InMemoryOption instance
630	InMemoryInitZones creates a new InMemoryProvider
631	NewInMemoryProvider returns a new InMemoryProvider
632	CreateZone creates a new zone
633	Zones returns a map of zones .
634	validateChangeBatch is used to validate a change .
635	NewZoneTagFilter returns a new ZoneTagFilter instance
636	Match returns true if the zone tags match the given filter .
637	NewIngressSource creates a new ingress source .
638	Endpoints returns a list of all the ingresses .
639	filterByAnnotations returns a list of ingress matching the annotations .
640	EndpointsFromIngress returns the endpoints for ingress .
641	NewLabelsFromString creates a new labels from a string
642	Serialize returns a string representation of the labels .
643	KubeClient returns kubernetes client
644	IstioClient returns the istio client
645	ByNames builds a list of sources from the given names .
646	BuildWithConfig builds a source source from the given source .
647	NewKubeClient creates a new kubernetes client .
648	NewCRDClientForAPIVersionKind creates a CRUD client for a given kind of API version .
649	NewCRDSource creates a new crd source
650	Match returns true if the given zone is a valid zone .
651	NewInfobloxProvider returns a new InfobloxProvider
652	ApplyChanges applies changes to the zone .
653	NewServiceSource creates a service source
654	Endpoints returns a list of all the services in the service .
655	Endpoints returns a list of endpoint names for the service .
656	filterByAnnotations returns a list of services that match the given annotations .
657	filterByServiceType returns a list of service types filtered by service type .
658	Calculate returns the plan .
659	NewExoscaleProvider creates a new ExoscaleProvider
660	ExoscaleWithLogging creates a new ExoscaleOption with the given parameters .
661	NewLinodeProvider returns a new LinodeProvider .
662	NewTargets returns a new targets .
663	Same compares two targets .
664	IsLess returns true if two targets are less than o .
665	NewEndpoint creates a new Endpoint
666	NewEndpointWithTTL returns a new EndpointWithTTL .
667	GetProviderSpecificProperty returns the ProviderSpecificProperty for the given key .
668	Match returns true if the given zoneID matches the given zoneID .
669	ValidateConfig validates the configuration .
670	CreateRecord creates a new record
671	DeleteRecord deletes a record
672	UpdateRecord updates a DNS record
673	GetZone returns a zone
674	ListZones lists all zones .
675	Record returns a list of all DNS records .
676	ns11Build creates a DNS record .
677	ns1SubmitChanges is used to submit a list of changes .
678	newNS1Changes returns a list of ns1Change objects
679	ns1ChangesByZone returns a map of ns1Change objects for the given zone .
680	All log levels
681	Apply applies changes to the policy .
682	RunOnce runs the controller .
683	Run starts the controller .
684	NewCloudFlareProvider returns a CloudFlareProvider .
685	newCloudFlareChanges returns a list of new CloudFlareChange objects .
686	GetAccountID returns the account ID for the given client .
687	NewDnsimpleProvider returns a new DnsimpleProvider
688	Zones returns a list of all zones .
689	Records returns a list of all DNS records .
690	newDnsimpleChange creates a new DnsimpleChange
691	newDnsimpleChanges creates a new list of dnsimpleChange objects
692	Submit changes to the given list of changes .
693	GetRecordID returns the record ID for a given zone name .
694	dnsimiteSuitableZone returns the zone for the given hostname .
695	CreateRecords creates a new Dnsimplement
696	DeleteRecords removes all records from the given endpoint .
697	UpdateRecords updates the records for the given endpoint .
698	ApplyChanges applies changes to the given plan .
699	NewGoogleProvider creates a Google Cloud Provider .
700	Records returns a list of all available DNS records .
701	newFilteredRecords returns a list of records that match the given endpoint .
702	submitChange is used to submit a change .
703	separateChange returns a map of all the changes in the given zone .
704	newRecordSet creates a new DNS record set .
705	NewRcodeZeroProvider returns a new RcodeZeroProvider
706	Zones returns a list of all zones .
707	Record returns a list of all the records in the zone .
708	SubmitChanges is used to submit a set of changes to the zone .
709	NewRcodeZeroChanges returns a list of RRSetChanges for the given endpoint .
710	NewRcodeZeroChange creates a new RRSetChangeChange
711	NewAlibabaCloudProvider returns a new AliasCloudProvider
712	recordsForDNS retrieves all DNS records for the DNS cloud .
713	Private zone records
714	SaveService saves a service .
715	DeleteService deletes a service
716	newTLSConfig creates a new TLS configuration .
717	getETCDConfig returns the Etcd config
718	newETCDClient returns a new EtcdClient
719	NewCoreDNSProvider returns a new instance of CoreDNSProvider
720	Records returns a list of all DNS records .
721	NewRfc2136Provider creates a new Rfc2136Provider .
722	stringifyHTTPResponse body
723	NewPDNSProvider creates a new PDNS provider .
724	mutateRecords is part of the PDNSProvider interface .
725	NewAWSSDProvider creates a new awsD provider .
726	newSdnsNamespaceFilter returns a new namespace filter .
727	Records returns a list of all Instances
728	ApplyChanges applies changes to AWS .
729	ListNamespaces returns a list of namespaces .
730	Get service detail
731	ListInstancesByServiceID returns a list of instances matching the given service ID .
732	CreateService creates a Service
733	UpdateService updates the service
734	RegisterInstance registers an instance of Instance
735	DeregisterInstance deregisters an instance of Instance
736	targetToInstanceID converts a string to an instance ID
737	matchNamespaces returns a list of namespaces matching the given hostname .
738	outingPolicyFromEndpoint returns the routing policy for the given endpoint .
739	isAWSLoadBalancer returns true if the given hostname is an AWSSLoadBalancer .
740	ResolveUpdate implements the PerResource interface .
741	Less returns true if x is less than the target .
742	NewDigitalOceanProvider returns a new DigitalOcean provider
743	newDigitalOceanChanges returns a list of DigitalOceanChange objects
744	getRecordID returns the ID of a zone record
745	DigitalOceanChangesByZone returns a map of DigitalOceanChange objects for the given zone set .
746	LegacyEndpointsFromService returns a list of Endpoints from a service .
747	LegacyEndpointsFromMateService returns a slice of Endpoints from the given service .
748	LegacyEndpointsFromMoleService returns a slice of Endpoints from the service .
749	Get targets from annotations
750	lookupType returns the correct type for the given target .
751	endpointsForHostname returns a slice of Endpoints for a hostname .
752	NewDynProvider returns a new DynProvider .
753	endToRecord converts an endpoint to a DNS record .
754	fetchAllRecordsInZone fetches all records in a zone .
755	Zones returns a list of all zones in the zone .
756	Replace record with given endpoint
757	commit is used to commit the zone
758	Endpoints implements the MultiSource interface .
759	newDesignateClient returns a new DesignClientInterface
760	remapEnv removes the environment variables from the map
761	createDesignateServiceClient creates a new service client .
762	ForEachZone iterates over all zones .
763	ForEachRecord sets the records for each record in the zone .
764	CreateRecordSet creates a new record set
765	UpdateRecordSet updates a record set .
766	DeleteRecordSet deletes a record set .
767	NewDesignateProvider returns a new DesignProvider .
768	calculate domain names
769	canonicalizeDomainName canonicalizes domain name .
770	getZones returns a map of zone names
771	getHostZoneID returns the zone ID for the given hostname
772	addEndpoint adds an endpoint to the endpoint set .
773	NewIstioGatewaySource creates a new SourceSource .
774	filterByAnnotations returns a list of configs that match the given filter .
775	EndpointsFromGatewayConfig returns a slice of Endpoints from the given configuration .
776	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpoint .
777	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointList .
778	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointSpec .
779	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DNSEndpointStatus .
780	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Endpoint .
781	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Labels .
782	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProviderSpecific .
783	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Target .
784	ensureTrailingDot ensures that the hostname is valid .
785	NewNoopRegistry returns a new NoopRegistry .
786	ApplyChanges applies changes to the registry .
787	Endpoints returns a list of all the endpoints
788	NewFakeSource creates a new fake source .
789	CreateTLSConfig creates a TLS configuration .
790	NewAWSSDR registry
791	ApplyChanges applies changes to the provider .
792	LoadOCIConfig loads OCIConfig from a path .
793	NewOCIProvider creates a new OCI provider .
794	ApplyChanges applies changes to the given plan .
795	newRecordOperation creates a new record operation .
796	operationsByZone returns a map of all records in the given zone
797	NewAzureProvider returns a new Azure Provider
798	getAccessToken returns the access token for the given configuration .
799	Create creates a new disk image
800	createDiskImage creates a new disk image
801	Save saves the network .
802	SaveIPv4 saves the IPv4 network .
803	createHOSTlyAdapter creates a HostOnlyAdapter .
804	listHostOnly adapters
805	removeOrphanDHCPServers removes all DHCP ports from the vBoxManager .
806	addHostOnlyDHCPServer adds a new DHCPServer
807	listDHCPServer returns a list of DHCP servers
808	checkIPNetCollision returns true if the hostname matches the given hostname .
809	NewDriverNotSupported returns a DriverNotSupported .
810	DriverName returns the driver name .
811	MustBeRunning checks if the driver is running .
812	NewDriver returns a new Driver .
813	migrateStringToSlice converts a string to a slice .
814	DockerClient returns a docker client .
815	CreateContainer creates a container
816	cleanResourceIfExists removes a resource if it exists .
817	NewDriver returns a new Driver
818	GetSSHUsername returns the SSH username .
819	Start starts a virtual machine .
820	Stop stops the virtual machine .
821	Restart restart the virtual machine
822	Remove removes the virtual machine .
823	getCloudInit reads the user data from the driver
824	GenerateCACertificate generates a CAC certificate .
825	GenerateCert generates an X509 certificate .
826	ReadTLSConfig returns the TLS configuration for the given configuration .
827	ValidateCertificate checks if the given address is valid .
828	IsVTXDisabled returns true if VTX is enabled .
829	NewVBoxManager returns a new VBoxManager instance
830	driverPath returns the path of the driver
831	AuthenticateDeviceFlow attempts to authenticate a device .
832	Authenticate service principal
833	tokenFromFile returns a ServicePrincipalToken from a file .
834	deviceFlowFlowAuth initiates a device flow flow token .
835	tokenCachePath returns the path for the given tenant ID .
836	projectIDPath returns the tenant ID for the given subscription ID .
837	mkTokenCallback creates a new token callback for the given path .
838	NewFmtMachineLogger returns a new instance of FmtMachineLogger
839	newComputeUtil returns a new ComputeUtil instance
840	Disk returns the disk .
841	deleteDisk deletes a disk .
842	StaticAddress returns the static address of the resource .
843	Open firewall ports
844	instance returns the current instance
845	configureInstance is used to configure an instance of the instance
846	addFirewallTag adds a firewall tag to the cloud .
847	uploadSSHKey uploads the SSH key to the cloud .
848	parseTags returns the tags of the driver .
849	startInstance starts a new instance .
850	waitForOp returns an error if the operation is not running .
851	waitForRegionalOp returns an error if the given name exists .
852	waitForGlobalOp is used to wait for a global operation .
853	IP returns the IP address .
854	cmdOutput returns the output of the command
855	setVmwareCmd returns the path to vmware
856	RegisterResourceProviders registers a provider for the given namespaces .
857	CreateResourceGroup creates a resource group .
858	CleanupVirtualNetworkIfExists removes a virtual network .
859	CreateSubnet creates a subnet
860	CleanupAvailabilitySetIfExists removes an availability set if it exists .
861	Get public IP address
862	GetPrivateIPAddress returns the private IP address .
863	deleteResourceIfExists deletes a resource if it exists .
864	waitVMPowerState is used to wait for a VMPPower state to wait for a given state .
865	checkResourceExistsFromError returns true if the error occurred .
866	osDiskStorageBlobURL returns the blob URL for the given VM .
867	osDiskStorageContainerURL returns the os disk storage container for the given account .
868	NewKeyPair returns a new KeyPair .
869	Fingerprint returns the fingerprint of the keyPair .
870	GenerateSSHKey generates SSH key pair for SSH key .
871	loadTenantID returns the tenant ID for a subscription .
872	findTenantID returns the tenant ID for a subscription
873	saveTenantID saves a tenant ID to a temporary file .
874	Send sends a crash .
875	Create creates a new SerialDriver .
876	DriverName returns the driver name .
877	GetCreateFlags returns the mount flags for the device .
878	GetMachineName returns the machine name .
879	GetSSHHostname returns the SSHostname of the device .
880	GetSSHKeyPath returns the SSH key path .
881	GetSSHUsername returns the SSH username .
882	Kill terminates the device .
883	Remove removes the device .
884	Start starts the device .
885	Stop stops the device .
886	MigrateHostV1 migrations to hostV1
887	MigrateHostMetadataV1V1V1V1V1 migrates HostMetadataV1V1 .
888	getNameAndPpid returns the name and parent pid of the process .
889	NewDriver returns a new Driver
890	SetConfigFromFlags sets the config for the driver .
891	PreCreateCheck checks if the driver already exists .
892	Create creates a new instance of the Driver
893	GetIP returns the IP address
894	GetState returns the state of the driver .
895	Start starts the driver .
896	Stop stops the driver .
897	Remove removes the instance from the driver .
898	NewDriver returns a new Driver .
899	SetConfigFromFlags sets the config from the driver .
900	PreCreateCheck checks if the driver already exists .
901	Create creates a new Azure Cloud Storage .
902	Remove deletes the driver .
903	GetIP returns the IP address .
904	GetURL returns the URL of the docker container .
905	GetState returns the state of the VM .
906	Start starts a virtual machine .
907	Stop stops the VM .
908	Restart restart the virtual machine
909	create creates a new host
910	Stream starts a streaming host .
911	NewDriver returns a new Driver
912	waitForIP returns the IP for the device .
913	waitStopped waits until the driver is stopped .
914	Start starts the driver .
915	Stop stops the driver .
916	Remove removes the machine .
917	generateDiskImage generates a disk image
918	GetIP returns the IP address
919	GetSSHKeyPath returns the SSH key path .
920	GetSSHPort returns the SSH port .
921	GetSSHUsername returns the SSH username .
922	ResolveStorePath returns the path for the given file .
923	SetSwarmConfigFromFlags sets the swarm config .
924	IsVTXDisabled returns true if the VTX log is enabled .
925	getReleaseTag retrieves the release tag from the API
926	getReleaseURL returns the URL for the given URL .
927	Version returns the version of the volume .
928	DownloadISO downloads an ISO file
929	Authenticate is used to authenticate the client .
930	GetInstanceIPAddresses returns a list of IP addresses for the given driver .
931	targetHost returns the target host
932	machineCommand executes a machine command
933	runActionForeachMachine runs the given action .
934	Create creates a new host
935	GenerateRandomID generates a random ID
936	GetCreateFlags returns a list of mcn flags for the driver .
937	NewDriver creates a new driver .
938	SetConfigFromFlags sets the config from the driver .
939	URL returns the host URL .
940	newAzureClient creates a new Azure Client .
941	generateSSHKey generates the SSH public key for the deployment .
942	parseSecurityRuleProtocol returns the security rule protocol .
943	String returns the string representation of the state .
944	randomString returns a random string of n random characters
945	GetCreateFlags returns a list of mcn flags for the driver .
946	generateKeyBundle generates a tar bundle .
947	NewDriver returns a new Driver
948	PreCreateCheck checks if the driver is valid .
949	validateNoIPCollisions returns an error if there are no IP addresses .
950	getAvailableTCPorts returns the available TCP port .
951	setPortForwarding sets the port forwarding on the device .
952	getRandomIPInSubnet returns a random IP in a subnet
953	Detects the shell .
954	 vault renewal duration
955	printVaultWarnings prints warnings .
956	 vault secret secret
957	transformSecret transforms a secret into a secret
958	updateSecret updates a secret
959	Display returns the string representation of the template .
960	NewVaultWriteQuery creates a new VaultWriteQuery .
961	sha1Map returns the SHA1 hash of the given map .
962	NewView creates a new View .
963	Data returns the data of the view .
964	DataAndIndex returns the last index of the view .
965	poll polls the view for the given view .
966	fetch fetches data from the view .
967	NewCatalogNodeQuery returns a CatalogNodeQuery .
968	Fetch fetches a node from the cluster .
969	String returns a string representation of the AuthConfig .
970	NewVaultListQuery returns a new VaultListQuery .
971	Remember adds a data to the Brain .
972	 Recall the data from the Brain .
973	ForceSet sets the data in the Brain .
974	Remove removes a dependency from the Brain .
975	NewCatalogDatacentersQuery returns a new CatalogDatacentersQuery .
976	Fetch fetches the datacenters from the catalog
977	NewCatalogNodesQuery returns a CatalogNodesQuery .
978	Fetch fetches the nodes from the cluster .
979	Parse parses a string to a Signal .
980	DefaultVaultConfig returns a new VaultConfig
981	NewTemplate creates a new template .
982	Execute implements the Template interface .
983	funcMap returns a FuncMap
984	StringToFileModeFunc converts a string to a file mode .
985	StringToWaitDurationHookFunc returns a DecodeDurationFunc that decodes the given string into a map .
986	ConsulStringToStructFunc returns a DecodeHookFunc for ConsulConfig .
987	Key returns true if the given key exists .
988	Get returns the value at the given key .
989	Set sets the value for the given key .
990	SetX sets the value for the given key .
991	MapSet sets the value for a key .
992	MapSetX sets the value for the given key .
993	mapSet implements the Scratch interface .
994	MapValues returns a slice of values for the given key .
995	init initializes the Scratch .
996	Render implements the Render interface .
997	copyFile copies a file to dst .
998	Copy returns a copy of the Config
999	Merge merges two configurations into a Config .
1000	Parse parses a string into a Config struct .
1001	Must parses a configuration string .
1002	FromFile returns a Config from a file .
1003	FromPath returns a Config from a path .
1004	DefaultConfig returns the default config
1005	NewWatcher creates a new watcher .
1006	Watch returns true if the given dependency is watching .
1007	ForceWatching adds a dependency to the watch .
1008	Remove removes the given dependency .
1009	Size returns the size of the view .
1010	Stop stops the watch .
1011	Add adds a dependency to the set .
1012	Get returns a dependency .
1013	List returns a copy of the set .
1014	Len returns the number of items in the set .
1015	String returns a string representation of the set .
1016	deepCopyTags sorts the tags into a slice of strings .
1017	respWithMetadata returns the response metadata for the given interface .
1018	regexpMatch returns a map that matches the given regexp .
1019	NewCatalogServiceQuery returns a CatalogServiceQuery .
1020	NewKVListQuery returns a new KVListQuery .
1021	NewDedupManager creates a new DedupManager .
1022	Start starts the service .
1023	Stop stops the manager .
1024	createSession creates a new session
1025	IsLeader returns true if the given template is leader .
1026	UpdateDeps updates the template for the given template .
1027	setLeader sets the leader for the given template .
1028	parseData parses the contents of a template .
1029	NewFileQuery creates a new FileQuery .
1030	NewCLI returns a new CLI .
1031	Run runs the command .
1032	stop stops the client .
1033	loadConfigs loads configs from the given paths .
1034	logError logs an error .
1035	FileModeGoString returns a string representation of the file mode .
1036	SignalVal returns the value of the signal .
1037	SignalGoString returns a string representation of a signal .
1038	SignalPresent returns true if the signal is present .
1039	TimeDurationVal returns the value of the given time .
1040	TimeDurationGoString returns a string representation of time .
1041	CreateConsulClient creates a new ConsulClient .
1042	Consul returns a consul client .
1043	 Vault .
1044	Stop stops the client .
1045	NewVaultReadQuery returns a vault read query .
1046	NewKVGetQuery returns a new KVGetQuery .
1047	NewVaultAgentTokenQuery returns a new VaultAgentTokenQuery .
1048	watch returns a channel that watches the given file .
1049	NewKVKeysQuery returns a new KVKeysQuery instance
1050	New creates a new child .
1051	ExitCh returns the exit channel .
1052	Pid returns the pid of the child .
1053	Command returns the command string .
1054	Start starts the child process .
1055	Signal sends a signal to the child .
1056	Reload reloads the child process .
1057	Kill kills the child .
1058	Stop stops the child process .
1059	Env returns the environment variables .
1060	NewHealthServiceQuery returns a new HealthServiceQuery .
1061	Fetch fetches the service for the given service .
1062	acceptStatus checks if the list is a valid status
1063	RetryFunc returns a retry function for retry .
1064	NewRunner creates a new Runner .
1065	Stop stops the Runner .
1066	RenderEvents returns a map of runtime events .
1067	Signal implements the Runner interface .
1068	diffAndUpdateDeps updates all the dependencies in the Runner .
1069	templateConfigsFor returns the configs for the given template .
1070	TemplateConfigMapping returns a map of template configurations .
1071	allTemplatesRendered returns true if all templates are rendered .
1072	childEnv returns a list of child environment variables .
1073	storePid stores the pid of the process .
1074	deletePid deletes the pid file .
1075	spawnChild creates a new child .
1076	newQuiescence returns a new quiescence channel .
1077	tick is used to tick the timer
1078	findCommand finds the template for the given template .
1079	newWatcher creates a new watcher .
1080	NewCatalogServicesQuery returns a new CatalogServicesQuery .
1081	DefaultConsulConfig returns a ConsulConfig instance
1082	StringToSignalFunc returns a DecodeHookFunc that returns a DecodeHookFunc .
1083	String returns a string representation of the WaitVar .
1084	NewVaultTokenQuery returns a vault token query .
1085	NewLogFilter returns a new log filter
1086	ValidateLevelFilter checks if the filter is valid .
1087	datacentDatacentersFunc returns a list of datacenters that match the query .
1088	envFunc returns the environment variable for the given environment .
1089	executeTemplateFunc returns a function that executes the given template .
1090	fileFunc returns a function that can be used to create a file .
1091	keyFunc returns a function that can be used to retrieve a key from the Brain .
1092	keyExistsFunc returns true if the key exists .
1093	nodeFunc returns a function that returns a catalog node .
1094	nodeFunc returns a function that returns a list of nodes .
1095	secretFunc returns a function that returns a secret .
1096	secretFunc returns a function that returns a list of secrets .
1097	serviceFunc returns a function that returns a list of HealthService
1098	servicesFunc returns a function that returns a list of catalog services .
1099	TreeFunc returns a tree that matches the given query .
1100	base64Decode decodes a base64 string .
1101	base64Encode encodes a string .
1102	base64URLDecode decodes a base64 string .
1103	base64URLEncoded returns base64 encoded string .
1104	byTag returns a map of tags by tag .
1105	explode takes a slice of pairs and returns a map .
1106	explodeHelper is a helper function to explode a map into a map
1107	in returns true if l is in v .
1108	indent indentation of a string
1109	join will join a slice of strings
1110	parseBool parses a string representation of a string .
1111	parseFloat parses a string representation of a string .
1112	parseInt parses a string representation of a string .
1113	parseJSON parses a string representation of a string
1114	parseUint parses a string .
1115	plugin runs a plugin
1116	replaceAll replaces all occurrences of a string with t .
1117	regexReplaceAll replaces all occurrences of the given string with the regular expression .
1118	exgexMatch returns true if the string matches a regular expression .
1119	split splits a string into a slice of strings .
1120	time returns the timestamp for the given string .
1121	toJSON converts an interface to a JSON string .
1122	toJSONPretty converts a map to a JSON string .
1123	toYAML converts a map to YAML .
1124	toTOML converts a map to a string
1125	add adds b to b
1126	modulo computes the modulo of b
1127	Expired returns true if the item has expired .
1128	SetDefault sets the default value for the given key .
1129	Add adds a value to the cache .
1130	Get implements the cache interface .
1131	IncrementInt implements the Cache interface .
1132	Delete removes a key from the cache .
1133	DeleteExpired removes expired items from the cache .
1134	Items returns the items in the cache .
1135	ItemCount returns the number of items in the cache .
1136	Flush removes all items from the cache .
1137	djb33 returns the seed of the given string .
1138	LinkByName returns a link by name .
1139	NewMockTaskEngine creates a new mock instance
1140	AddTask mocks base method
1141	GetTaskByArn mocks base method
1142	ListTasks mocks base method
1143	MarshalJSON mocks base method
1144	MustInit mocks base method
1145	StateChangeEvents mocks base method
1146	Version mocks base method
1147	NewMockImageManager creates a new mock instance
1148	AddAllImageStates mocks base method
1149	AddAllImageStates mocks base method
1150	GetImageStateFromImageName mocks base method
1151	RecordContainerReference mocks base method
1152	StartImageCleanupProcess mocks base method
1153	NewEC2MetadataClient returns a new EC2MetadataClient
1154	DefaultCredentials retrieves the default credentials from the cloud metadata
1155	GetDynamicData returns the dynamic data for the given path .
1156	GetMetadata mocks base method
1157	VPCID returns the VPC ID for the given mac .
1158	SubnetID returns the subnet ID for a given mac .
1159	newRefreshCredentialsHandler returns a new instance of refreshCredentialsHandler
1160	handlerFunc returns a function that can be used to create a new instance of the refresh function .
1161	AckMessage is used to send a request to the server
1162	handleMessages is used to handle messages .
1163	handleSingleMsgCredentials handles a single message
1164	validRoleType returns true if the given role type is valid .
1165	newPayloadRequestHandler creates a new payload request handler
1166	handlerFunc returns a function that returns a function that can be used to send a message to the payload .
1167	AckMessageId is used to acknowledge a message .
1168	handleMessages processes the incoming messages .
1169	handleSingleMessage handles a single message payload
1170	addPayloadTasks adds tasks to the payload
1171	addTasks adds tasks to the payload
1172	handleUnrecognizedTask handles unsupported tasks .
1173	v2HandlersSetup is used to setup v2 handlers .
1174	v3HandlersSetup initializes v3 handlers .
1175	NewMockProvider creates a new mock instance
1176	IsExpired mocks base method
1177	IsExpired mocks base method
1178	Retrieve retrieves credentials from the provider .
1179	NewMockContainerMetadataResolver creates a new mock instance
1180	ResolveContainer mocks base method
1181	ResolveContainer mocks base method
1182	ResolveTask mocks base method
1183	NewTaskResponse returns a new TaskResponse .
1184	NewContainerResponse returns a new container with the given container ID .
1185	New returns a new Args
1186	DefaultConfig returns the default configuration .
1187	New returns a new HTTP client .
1188	RemoveFromTaskArray removes a task from an array .
1189	adjustForPlatform sets the platform field s value .
1190	PlatformHostConfigOverride overrides the host config .
1191	String returns the string representation of the EniAttachmentStatus
1192	main main function
1193	RetryRules returns the delay for the given request .
1194	NewMockTime creates a new mock instance
1195	After mocks base method
1196	AfterFunc mocks base method
1197	Now returns the time of the current time .
1198	Now mocks base method
1199	Sleep mocks base method
1200	Sleep mocks base method
1201	NewMockTimer creates a new mock instance
1202	Reset mocks base method
1203	Reset mocks base method
1204	Stop mocks base method
1205	Stop mocks base method
1206	AddAgentUpdateHandlers adds the update handlers to the agent .
1207	SdkDockerClient returns a docker client .
1208	ContainerStateToState converts DockerState to DockerStatus .
1209	MetadataFromContainer returns the metadata for the Docker container .
1210	ContainerEvents returns a channel of docker containers .
1211	ListContainers returns a list of containers
1212	ListPluginsWithFilters returns a list of plugins with the specified capabilities .
1213	APIVersion returns the API version .
1214	LoadImage loads a docker image from the docker client
1215	UpdateContainerReference updates the container s container .
1216	AddImageName adds an image name to the image state .
1217	GetImageNamesCount returns the number of image names .
1218	UpdateImageState updates the image state .
1219	RemoveImageName removes the container name from the image state .
1220	HasImageName returns true if the image name exists .
1221	RemoveContainerReference removes a container from the image state .
1222	SetPullSucceeded sets the PullSucceeded field s value .
1223	GetPullSucceeded returns true if the image is successful .
1224	MarshalJSON marshals the image state .
1225	UnmarshalJSON deserializes a TaskStatus .
1226	MarshalJSON returns a JSON representation of TaskStatus .
1227	NewClient returns a new CNI client
1228	SetupNS implements cniClient interface .
1229	CleanupNS implements cniClient .
1230	ReleaseIPResource releases an IP resource
1231	add adds a new network
1232	del deletes a network
1233	createBridgeNetworkConfigWithIPAM creates a bridge network configuration .
1234	createBridgeNetworkConfigWithoutIPAM creates a bridge network configuration .
1235	constructNetworkConfig creates a network configuration for a given plugin
1236	createIPAMNetworkConfig creates an IPAM network configuration .
1237	Version returns the version of the plugin
1238	Capabilities returns the capabilities for the given plugin .
1239	New returns a new UdevWatcher .
1240	newWatcher returns a new instance of udev
1241	performPeriodicReconciliation is used to perform periodic recursively .
1242	calculateOnce implements the interface for udev .
1243	sendENIStateChange sends an ENI state change to the environment .
1244	buildState builds the state of the device .
1245	sendENIStateChange is used to send an ENIP state change to the device .
1246	Close closes the client .
1247	Sign request signature
1248	Publish metrics .
1249	PublishMetricsOnce is used to publish metrics .
1250	MetricsToPublishMetricRequests returns a list of metrics to publish metrics .
1251	publish health metrics
1252	PublishHealthMetrics is used to publish health metrics .
1253	createPublishHealthRequests creates a list of taskHealth requests .
1254	copyMetricsMetadata returns a copy of the metrics
1255	copyTaskMetrics returns a copy of the taskMetrics .
1256	copyHealthMetadata returns a copy of the healthMetadata .
1257	copyTaskHealthMetrics returns a slice of TaskHealthMetrics
1258	UnmarshalJSON deserializes the resources map .
1259	NewVolumeResource creates a new volume resource .
1260	KnownCreated returns true if the volume has been created .
1261	setMountPoint sets the mount point for the volume
1262	GetMountPoint returns the mount point for the volume
1263	Create creates a new volume
1264	Cleanup cleans up the container
1265	MarshalJSON serializes a VolumeResource .
1266	UnmarshalJSON deserializes a VolumeResource .
1267	NewMockClientCreator creates a new mock instance
1268	NewASMClient creates a new SecretsMClient
1269	NewASMClient mocks base method
1270	NewTransportProtocol returns a TransportProtocol .
1271	String returns the string representation of the TransportProtocol .
1272	UnmarshalJSON deserializes a TransportProtocol .
1273	MarshalJSON marshals the transport protocol .
1274	NewMockManager creates a new mock instance
1275	GetTaskCredentials mocks base method
1276	RemoveCredentials mocks base method
1277	SetTaskCredentials sets the TaskCredentials field s value .
1278	GetDockerAuthFromASM returns the AuthConfig from a secret .
1279	GetSecretFromASM returns the secret value from a secret .
1280	NewMockCgroupFactory creates a new mock instance
1281	Load mocks base method
1282	Load mocks base method
1283	LoadImage loads a pause container from the given config .
1284	NewCgroupResource creates a new CgroupResource .
1285	Create creates a TaskCgroup
1286	Cleanup removes the cgroup root .
1287	MarshalJSON implements cgroupResource .
1288	UnmarshalJSON deserializes a cgroup resource .
1289	GetCgroupRoot returns the cgroup root
1290	GetCgroupMountPath returns the cgroup mount path .
1291	Initialize initializes the cgroup resource .
1292	LoadImage loads a docker image .
1293	NewECRFactory returns a new ECRFactory
1294	GetClient returns an ECR client
1295	getClientConfig returns a aws client config .
1296	NewMockAuditLogger creates a new mock instance
1297	GetContainerInstanceArn mocks base method
1298	GetContainerInstanceArn mocks base method
1299	Log mocks base method
1300	Log mocks base method
1301	NewMockInfoLogger creates a new mock instance
1302	Info mocks base method
1303	Info mocks base method
1304	taskShouldBean returns true if the task has been sent .
1305	send sends the event to the event queue
1306	sendContainerStatusToECS sends container status to ECS .
1307	sendTaskStatusToECS sends task status to ECS
1308	setContainerChangeSent sets the container change status
1309	setTaskChangeSent sets the status of the task change .
1310	setTaskAttachmentSent sets the status of the task .
1311	GetSecretsFromSSM returns a map of secret names .
1312	main is the main function for testing
1313	IsRetriableError returns true if the error occurred .
1314	NewMockFile creates a new mock instance
1315	Chmod mocks base method
1316	Chmod mocks base method
1317	Write mocks base method
1318	NewMockOS creates a new mock instance
1319	Create mocks base method
1320	IsNotExist mocks base method
1321	OpenFile mocks base method
1322	RemoveAll mocks base method
1323	NewMockSSMClientCreator creates a new mock instance
1324	NewSSMClient creates a new SSMClient
1325	NewSSMClient creates a new mock instance
1326	NewMockEC2MetadataClient creates a new mock instance
1327	DefaultCredentials mocks base method
1328	DefaultCredentials mocks base method
1329	GetDynamicData mocks base method
1330	InstanceIdentityDocument mocks base method
1331	NewMockHttpClient creates a new mock instance
1332	GetInstanceIdentityDocument mocks base method
1333	GetUserData mocks base method
1334	GetUserData mocks base method
1335	NewMockClient creates a new mock instance
1336	DescribeECSTagsForInstance mocks base method
1337	NewMockClientSDK creates a new mock instance
1338	CreateTags mocks base method
1339	DescribeTags mocks base method
1340	DescribeTags mocks base method
1341	NewStateManager creates a new state manager .
1342	Save saves the state manager .
1343	Load loads the state from the file .
1344	ValidDependencies returns true if the task is valid .
1345	dependenciesCanResolved returns true if the container has been resolved .
1346	onSteadyStateIsResolved returns true if the container has been resolved .
1347	newAgent creates a new agent
1348	printECSAttributes prints a list of ECSA attributes .
1349	start starts the container
1350	doStart starts the container
1351	newTaskEngine creates a new task engine .
1352	setClusterInConfig sets the cluster configuration for the cluster
1353	getEC2InstanceID returns the EC2 instance ID
1354	constructVPCSubnetAttributes returns a list of VPCSubnet attributes .
1355	registerContainerInstance is used to register a container instance .
1356	reregisters a container instance
1357	startAsyncRoutines starts the asyncRoutines service .
1358	startACSSession starts a new ACSSession
1359	getContainerInstanceTagsFrom EC2 API
1360	mergeTags merges two EC2 tags into a slice .
1361	SlicesDeepEqual returns true if two slices are equal .
1362	IsAWSErrorCodeEqual returns true if an error is equal to the given code .
1363	MapToTags converts a map to a slice of tags .
1364	CredentialsHandler implements the http . Handler interface .
1365	processCredentialsRequest is used to process a task .
1366	NewTaskHandler creates a new task handler .
1367	AddStateChangeEvent is used to add a new state change event .
1368	startDrainEventsTickerTicker starts the task draining events .
1369	taskStateChangesToSend returns a list of task state changes .
1370	batchContainerEventUnsafe is used to batch container events .
1371	flushBatchUnsafe is used to flush a batch of tasks .
1372	Get task events .
1373	submitTaskEvents is used to submit a task to a task .
1374	sendChange sends an event to the event queue .
1375	submitFirstEvent sends the first event to the queue .
1376	getTasksToEventsLen returns the number of tasks in the queue .
1377	handleInvalidParamException returns an error if an error occurred .
1378	NewMockControl creates a new mock instance
1379	Exists mocks base method
1380	Init mocks base method
1381	NewQueue returns a new Queue .
1382	Reset resets the buffer .
1383	Add adds a container to the queue .
1384	GetLastStat returns the last stat
1385	GetRawUsageStats returns a slice of CPU usage statistics .
1386	getCWStatsSet returns a new CWStatsSet from the queue .
1387	NewMockCNIClient creates a new mock instance
1388	Capabilities mocks base method
1389	Capabilities mocks base method
1390	CleanupNS mocks base method
1391	ReleaseIPResource mocks base method
1392	SetupNS mocks base method
1393	SetupNS mocks base method
1394	ContainerAssociationsHandler returns a function that can be used to handle a container association .
1395	ContainerAssociationHandler returns a handler for a container association .
1396	NewManager returns a new instance of MetadataManager
1397	Create creates a new container .
1398	Update updates the metadata for the given task .
1399	Clean removes the metadata for a task .
1400	parseAuthData parses the auth data from a JSON string .
1401	ServeHTTP implements the Logger interface .
1402	NewJitteredTicker creates a new channel with the given start time .
1403	getTaskENIIPluginAttribute retrieves the ECSENI plugin version attribute .
1404	NewMockECSSDK creates a new mock instance
1405	CreateCluster mocks base method
1406	ListTagsForResource mocks base method
1407	NewMockECubmitStateSDK creates a new mock instance
1408	SubmitContainerStateChange mocks base method
1409	NewMockECClient creates a new mock instance
1410	DiscoverPollEndpoint mocks base method
1411	GetResourceTags mocks base method
1412	NewTaskEngine creates a new TaskEngine .
1413	NewMockStateManager creates a new mock instance
1414	NewStateManager mocks base method
1415	NewStateManager mocks base method
1416	NewMockSaveableOption creates a new mock instance
1417	AddSaveable mocks base method
1418	AddSaveable mocks base method
1419	NewECSClient creates a new ECS client .
1420	CreateCluster creates a cluster
1421	RegisterContainerInstance is used to register a container instance .
1422	Connect connects to the client
1423	IsReady returns true if the client is ready .
1424	SetReadDeadline mocks base method
1425	Disconnect closes the connection .
1426	WriteMessage sends a message to the client .
1427	ConsumeMessages reads messages from websocket .
1428	handleMessage handles incoming requests .
1429	AllTasks returns all tasks .
1430	AllImageStates returns the list of all image states .
1431	AllENIAttachment returns all the ENIAttachments .
1432	ENIByMac returns the ENI attachment for the given mac .
1433	AddENIAttachment adds an ENI attachment to the Docker container .
1434	RemoveENIAttachment removes an ENI attachment from the Docker container .
1435	GetAllContainerIDs returns all the container ids .
1436	ContainerByID returns the container by ID .
1437	ContainerMapByArn returns a map of docker containers for an ARN .
1438	TaskByShortID returns a list of tasks by short ID .
1439	TaskByID returns a task by its ID .
1440	TaskByArn returns a task by name .
1441	AddTask adds a task to the registry .
1442	AddContainer adds a container to the container
1443	AddImageState adds a new image state .
1444	RemoveTask removes a task from the Docker container .
1445	taskToIPUnsafe returns the IP address for the given ARN .
1446	removeV3EndpointIDUnsafe removes the given v3 endpoint ID from the Docker container
1447	RemoveImageState removes the image state from the Docker container .
1448	AddTaskIPAddress adds a new IP address to the Docker container .
1449	GetTaskByIPAddress returns the task ARN .
1450	storeV3EndpointIDToTaskUnsafe is used to store the given v3 endpoint ID .
1451	storeV3EndpointIDUnsafeToDockerIDUnsafe is used to store v3 endpoint ID .
1452	DockerIDByV3EndpointID returns the Docker ID for the given v3 endpoint ID .
1453	TaskARNByV3EndpointID returns the task ARN for the given V3 endpoint ID .
1454	v1HandlersSetup is used to setup v1 .
1455	String returns a string representation of the Docker container .
1456	NewContainerWithSteadyState returns a container with the given state .
1457	GetKnownStatus returns the known container status .
1458	SetKnownStatus sets the known status of the container .
1459	GetDesiredStatus returns the desired status .
1460	SetDesiredStatus sets the DesiredStatus field s value .
1461	GetSentStatus returns the status of the container .
1462	SetSentStatus sets the status of the container .
1463	SetKnownExitCode sets the known exit code .
1464	GetKnownExitCode returns the known exit code .
1465	SetRegistryAuthCredentials sets the credential credentials .
1466	ShouldPullWithExecution checks if the container is in the container
1467	GetSteadyStateStatus returns the state of the container .
1468	IsKnownSteadyState returns true if the container is known .
1469	IsMetadataFileUpdated returns true if the container is updated .
1470	SetMetadataFileUpdated sets the metadata file updated .
1471	IsEssential returns true if the container is an Essential container .
1472	SetCreatedAt sets the created time .
1473	SetStartedAt sets the startedAt field s value .
1474	SetFinishedAt sets the FinishedAt field s value .
1475	GetCreatedAt returns the created time .
1476	GetStartedAt returns the started container .
1477	GetFinishedAt implements the Container interface .
1478	SetLabels sets the labels for the container .
1479	GetLabels returns the labels of the container .
1480	SetKnownPortBindings sets the known port bindings .
1481	GetKnownPortBindings returns the list of known port bindings .
1482	SetVolumes sets the volumes of the container
1483	GetVolumes returns the volumes of the container .
1484	SetNetworkSettings sets the container s network settings .
1485	GetNetworkSettings returns the network settings .
1486	SetNetworkMode sets the container s network mode .
1487	GetNetworkMode returns the network mode .
1488	SetHealthStatus sets the health status of the container .
1489	GetHealthStatus returns the health status of the container .
1490	BuildContainerDependency builds a container dependency .
1491	updateAppliedStatusUnsafe updates the applied status of the container .
1492	SetAppliedStatus sets the applied status of the container .
1493	GetAppliedStatus returns the status of the container .
1494	ShouldPullWithASuth returns true if the container is present .
1495	SetASMockerAuthConfig sets the container auth config
1496	SetV3EndpointID sets the V3 endpoint ID .
1497	GetV3EndpointID returns the V3 endpoint ID
1498	InjectV3Metadata adds the V3 endpoint to the container .
1499	ShouldCreateWithSSMsecrets returns true if the container does not exist .
1500	ShouldCreateWithASMsecrets returns true if the container should be created .
1501	Get metadata file path
1502	Get task metadata directory
1503	MarshalJSON serializes the Conditional interface .
1504	UnmarshalJSON unmarshals a conditional condition .
1505	NewASMecretryResource creates a new ASMecretryResource .
1506	Create creates a new Secret
1507	retrieveASMecretryValue retrieves the value of an ASM .
1508	getRequiredSecrets returns the required secrets .
1509	clearASMSecretValue clears the secret data .
1510	MarshalJSON marshals the SecretResource to JSON .
1511	UnmarshalJSON deserializes a SecretResource .
1512	Create creates a cgroup .
1513	Remove removes a cgroup
1514	Exists returns true if cgroup path exists .
1515	validateCgroupSpec validates cgroupSpec .
1516	handleInactivityTimeout implements io . Reader .
1517	NewImageManager returns a new ImageManager
1518	RecordContainerReference records a container reference to the container .
1519	RemoveContainerReference removes a container from the image state .
1520	getImageState returns the image state for the given container .
1521	removeImageState removes the image state from the docker image .
1522	Merge merges a Config into a Config .
1523	NewConfig returns a new Config object .
1524	trimWhitespace removes whitespace from the config
1525	validateAndOverrideBounds validates and returns an error if necessary .
1526	NewTaskStatsResponse returns a map of stats for a task .
1527	NewSession creates a new session .
1528	startSessionOnce starts a new ACS session
1529	startACSSession starts a new ACSSession
1530	waitForDuration returns true if the given delay has been completed .
1531	createACSClient creates a new client .
1532	ACsWsWsWsURL returns the ACS URL for the given endpoint .
1533	newDisconnectTimer creates a new connection timer .
1534	anyMessageHandler returns a function that sends a message to the server .
1535	validateIPRules validates IPTables
1536	WriteJSONToResponse writes the response to the response .
1537	ValueFromRequest returns the value of the given field .
1538	GetMuxValueFromRequest retrieves the value of the request from the request .
1539	LimitReachedHandler returns a handler for limit requests .
1540	UnmarshalJSON deserializes a TransitionDependencySet .
1541	Add adds a delta to the queue .
1542	Done is part of the sequence .
1543	NewMockCgroup creates a new mock instance
1544	Add mocks base method
1545	Add mocks base method
1546	Delete mocks base method
1547	MoveTo mocks base method
1548	OOMEventFD mocks base method
1549	Processes mocks base method
1550	Stat mocks base method
1551	Subsystems mocks base method
1552	TaskStatsHandler returns a handler for task stats .
1553	GetKnownAPIVersions returns a slice of docker versions .
1554	NewMockUdev creates a new mock instance
1555	Monitor mocks base method
1556	Monitor mocks base method
1557	SetInferenceDevices sets the InferenceDevices field s value .
1558	SetDeviceName sets the DeviceName field s value .
1559	SetDeviceType sets the DeviceType field s value .
1560	DefaultConfig returns the default configuration .
1561	platformString returns the platform s platform name .
1562	MapTaskToContainerStatus converts a TaskStatus to a ContainerStatus .
1563	Error implements the MultiErr interface .
1564	NewMultiError creates a new MultiError .
1565	GetPullCredentials returns the pull credentials .
1566	SetPullCredentials sets the pull credentials
1567	GetDockerAuthConfig returns the docker auth config
1568	SetDockerAuthConfig sets the docker auth config
1569	NewMockSecretsManagerAPI creates a new mock instance
1570	CancelRotateSecret mocks base method
1571	CancelRotateSecret mocks base method
1572	CancelRotateSecretRequest mocks base method
1573	CancelRotateSecretWithContext mocks base method
1574	CreateSecret mocks base method
1575	CreateSecretRequest mocks base method
1576	CreateSecretWithContext mocks base method
1577	DeleteResourcePolicy mocks base method
1578	DeleteResourcePolicyRequest mocks base method
1579	DeleteResourcePolicyWithContext mocks base method
1580	DeleteSecret mocks base method
1581	DeleteSecretRequest mocks base method
1582	DeleteSecretWithContext mocks base method
1583	DescribeSecret mocks base method
1584	DescribeSecretRequest mocks base method
1585	DescribeSecretWithContext mocks base method
1586	GetRandomPassword mocks base method
1587	GetRandomPasswordRequest mocks base method
1588	GetRandomPasswordWithContext mocks base method
1589	GetResourcePolicy mocks base method
1590	GetResourcePolicyRequest mocks base method
1591	GetResourcePolicyWithContext mocks base method
1592	GetSecretValue mocks base method
1593	GetSecretValueRequest mocks base method
1594	GetSecretValueWithContext mocks base method
1595	ListSecretVersionIds mocks base method
1596	ListSecretVersionsPages mocks base method
1597	ListSecretVersionIdsWithContext creates a new mock instance with the specified parameters .
1598	ListSecretVersionIdsRequests mocks base method
1599	ListSecrets mocks base method
1600	ListSecretsPages mocks base method
1601	ListSecretsRequest mocks base method
1602	ListSecretsWithContext mocks base method
1603	PutResourcePolicy mocks base method
1604	PutResourcePolicyRequest mocks base method
1605	PutResourcePolicyWithContext mocks base method
1606	PutSecretValue mocks base method
1607	PutSecretValue mocks base method
1608	PutSecretValueWithContext mocks base method
1609	RestoreSecret mocks base method
1610	RestoreSecretRequest mocks base method
1611	RestoreSecretWithContext mocks base method
1612	RotateSecret mocks base method
1613	RotateSecretRequest mocks base method
1614	RotateSecretWithContext mocks base method
1615	TagResource mocks base method
1616	TagResourceRequest mocks base method
1617	UntagResource mocks base method
1618	UntagResourceRequest mocks base method
1619	UntagResourceWithContext mocks base method
1620	UpdateSecret mocks base method
1621	UpdateSecretRequest mocks base method
1622	UpdateSecretVersion mocks base method
1623	UpdateSecretVersionRequest mocks base method
1624	UpdateSecretVersionWithContext mocks base method
1625	UpdateSecretVersionWithContext mocks base method
1626	UpdateSecretWithContext mocks base method
1627	createBindsEnv returns a slice of binds and env variables .
1628	parseMetadataAtContainerCreate returns the metadata for the given task .
1629	parseMetadata returns the metadata for the given task .
1630	parseDockerContainerMetadata parses Docker container metadata from Docker container .
1631	parseNetworkMetadata parses the given settings and returns the network metadata .
1632	Initialize the GPU .
1633	SetGPUIDs sets the GPU IDs for the GPU .
1634	SetDriverVersion sets the driver version .
1635	GetDriverVersion returns the driver version .
1636	GetDevices returns the GPU devices .
1637	NewMockLicenseProvider creates a new mock instance
1638	GetText mocks base method
1639	GetText mocks base method
1640	NewMockBackoff creates a new mock instance
1641	Duration mocks base method
1642	Duration mocks base method
1643	UnmarshalText deserializes a MetadataStatus
1644	After implements the Default interface .
1645	AfterFunc adds a function to the default time .
1646	Since returns the duration of the given time .
1647	NewMockTaskResource creates a new mock instance
1648	ApplyTransition mocks base method
1649	Cleanup mocks base method
1650	GetCreatedAt mocks base method
1651	GetTerminalReason mocks base method
1652	Initialize mocks base method
1653	KnownCreated mocks base method
1654	MarshalJSON mocks base method
1655	NextKnownState mocks base method
1656	SetAppliedStatus mocks base method
1657	SetAppliedStatus mocks base method
1658	SetCreatedAt mocks base method
1659	SetDesiredStatus mocks base method
1660	SetKnownStatus mocks base method
1661	StatusString mocks base method
1662	NewMockLoader creates a new mock instance
1663	LoadImage mocks base method
1664	Error returns the string representation of the containerNotFound .
1665	String returns a string representation of the DockerContainerChangeEvent .
1666	UnmarshalJSON deserializes a TaskVolume
1667	MarshalJSON marshals a TaskVolume
1668	NewSSMClient creates a new SSM client .
1669	GetClient returns a client for the given docker version .
1670	getWindowsReplaceableVersions returns a list of docker versions .
1671	getWindowsSupportedVersions returns a list of docker versions .
1672	PortBindingBindingFromDocker returns a slice of PortBinding
1673	NewASMuthResource creates a new ASMuthResource .
1674	Create creates a new auth resource .
1675	GetRequiredASMResources returns the required ASM resources .
1676	GetExecutionCredentialsID returns the execution credential ID
1677	clearASMockerAuthConfig clears the auth data .
1678	GetASMockerAuthConfig returns the auth config for the given secret
1679	MarshalJSON serializes an ASMuth resource .
1680	UnmarshalJSON deserializes an ASM auth resource .
1681	ContainerMetadataHandler returns a handler for container metadata
1682	GetContainerResponse returns a container response from the given state .
1683	GetContainerNetworkMetadata returns the network metadata for a container .
1684	Initialize initializes the cgroup resource .
1685	StartDefaultTerminalHandler starts the default termination handler .
1686	FinalSave is called when the task engine is finished .
1687	String returns a string representation of the cache key .
1688	NewECRAuthProvider returns a new DockerAuthProvider
1689	getAuthConfigFromCache retrieves the auth config from the cache .
1690	getAuthConfigFromECR returns the auth config from an ECR .
1691	IsTokenValid returns true if the token is valid .
1692	createTaskResponse creates a JSON response for a task .
1693	NewTaskStateChangeEvent creates a new TaskStateChangeEvent .
1694	NewContainerStateChangeEvent creates a new container state change event .
1695	SetTaskTimestamps sets the TaskTimestamps field s value .
1696	ShouldBeReported returns true if the task state changes .
1697	GetIPV4Addresses returns the list of IPV4 addresses .
1698	GetIPV6Addresses returns the list of IPV6 addresses .
1699	String returns a string representation of the ENI .
1700	ENIFromACS creates an ENI from an ECS .
1701	ValidateTaskENI validates a TaskEni
1702	NewMockPlugins creates a new mock instance
1703	Scan scans all plugins .
1704	Scan mocks base method
1705	TaskFromACS creates a task from an ACS payload .
1706	initializeDockerVolumes initializes Docker Volumes
1707	Add task scoped volumes
1708	updateContainerVolumeDependency updates the container with the given name
1709	initializeCredentialsEndpoint initializes the credential endpoint
1710	initializeContainersV3Endpoint sets the V3Endpoint ID for the container .
1711	requiresASMockerAuthAuthData returns true if the task is required
1712	initializeASMuthResource creates an ASMuth resource .
1713	requiresSSMSecrets returns true if the task needs to be created .
1714	initializeSSMsecretsResource creates a new SSMS secret resource .
1715	getAllSSMecsecretRequirements returns all the secrets required by the task .
1716	requiresASMSecretret returns true if the task is required
1717	initializeASMsecretsResource creates a new ASM secret resource .
1718	getAllASMecretentialRequirements returns all the required secrets for the task
1719	BuildCNIConfig builds the CNIConfig
1720	convert ENIITonfig converts ENI to CNI
1721	convertAppMeshToCNIConfig converts AppMesh to CNI .
1722	HostVolumeByName returns the volume by name .
1723	UpdateMountPoints updates the mount points for the container .
1724	DockerConfig returns the docker config for the given container .
1725	DockerHostConfig returns the docker host config .
1726	ApplyExecutionRoleLogsAuthLogs adds credentials to the task config
1727	shouldOverrideNetworkMode returns true if the task should be overridden .
1728	applyENIHostname adds the hostname to the docker config
1729	shouldOverridePIDMode returns true if the task should be overridden .
1730	shouldOverrideIPCMode returns true if the task should be overridden .
1731	UpdateStatus updates the status of the task .
1732	UpdateDesiredStatus updates the status of the task .
1733	SetKnownStatus sets the known status of the task .
1734	GetKnownStatus returns the known task status .
1735	GetKnownStatusTime returns the known known status time .
1736	SetCredentialsID sets the credentials ID for the task .
1737	GetCredentialsID returns the credentials ID for the task .
1738	SetExecutionRoleCredentialsID sets the ExecutionCredentialsID for the task .
1739	GetExecutionCredentialsID returns the ExecutionCredentialsID
1740	GetDesiredStatus returns the status of the task .
1741	SetDesiredStatus sets the DesiredStatus field s value .
1742	GetSentStatus returns the status of the task .
1743	SetSentStatus sets the status of the task .
1744	SetTaskEni sets the ENI field s value .
1745	GetTaskEN returns the ENI for the task .
1746	SetAppMesh sets the AppMesh
1747	GetAppMesh returns the AppMesh
1748	GetStopSequenceNumber returns the stop sequence number .
1749	SetStopSequenceNumber sets the StopSequence number .
1750	SetPullStartedAt sets the PullStartedAt field s value .
1751	GetPullStartedAt returns the pull start time .
1752	SetPullStoppedAt sets the pullStoppedAt field s value .
1753	GetPullStoppedAt returns the pullStoppedAt .
1754	SetExecutionStoppedAt sets the ExecutionStoppedAt field s value .
1755	GetExecutionStoppedAt returns the execution time .
1756	StringUnsafe returns a string representation of a task .
1757	RecordExecutionStoppedAt is used to record execution time .
1758	GetResources retrieves all resources from the task .
1759	getResourcesUnsafe returns all resources that are unsafe
1760	AddResource adds a resource to the task .
1761	SetTerminalReason sets the terminal reason .
1762	GetTerminalReason returns the terminal reason .
1763	PopulateASMuthData sets the AsmuthData field s value .
1764	getSSMSecretsResource retrieves all SSM secrets from the task .
1765	PopulateSecrets populates the secrets from the container
1766	getASMSecretsResource retrieves all the associated tasks from the task .
1767	getPIDMode returns the PID mode .
1768	getIPCMode returns the IPC mode
1769	AssociationsByTypeAndContainerAndContainer returns all the association names for the given type .
1770	AssociationByTypeAndName returns the association associated with the given type .
1771	newAttachENIHandler creates a new attach ENIACI handler
1772	handlerFunc returns a function that can be used to send an attach task to the device .
1773	handleMessages handles incoming messages .
1774	handleSingleMessage handles a single attachment .
1775	addENIAttachmentToState adds an ENIttachment to the state of the task .
1776	validateAttachTaskNetworkNetworkNetworkInterface validates an AttachTaskNetworkInterface message .
1777	ForceSave mocks base method
1778	ForceSave mocks base method
1779	NewMockClientServer creates a new mock instance
1780	AddRequestHandler mocks base method
1781	AddRequestHandler mocks base method
1782	Connect mocks base method
1783	Disconnect mocks base method
1784	IsConnected mocks base method
1785	MakeRequest mocks base method
1786	SetAnyRequestHandler mocks base method
1787	SetConnection mocks base method
1788	SetReadDeadline mocks base method
1789	ShouldReportToBackend returns true if the state of the containerStatus should be restored .
1790	BackendStatus returns the state of the container status .
1791	UnmarshalJSON deserializes a ContainerStatus .
1792	MarshalJSON returns the JSON representation of the containerStatus .
1793	UnmarshalJSON implements the ContainerHealthStatus interface .
1794	MarshalJSON implements ContainerHealthStatus .
1795	Publish metrics
1796	NewMockDockerClient creates a new mock instance
1797	APIVersion mocks base method
1798	ContainerEvents mocks base method
1799	ContainerEvents mocks base method
1800	CreateContainer mocks base method
1801	CreateVolume mocks base method
1802	DescribeContainer mocks base method
1803	InspectContainer mocks base method
1804	InspectImage mocks base method
1805	KnownVersions mocks base method
1806	KnownVersions mocks base method
1807	ListContainers mocks base method
1808	ListImages mocks base method
1809	ListPlugins mocks base method
1810	ListPluginsWithFilters mocks base method
1811	PullImage mocks base method
1812	RemoveImage mocks base method
1813	StopContainer mocks base method
1814	WithVersion mocks base method
1815	NewMockCache creates a new mock instance
1816	Delete mocks base method
1817	Get mocks base method
1818	Set mocks base method
1819	Set mocks base method
1820	newManagedTask creates a new managed task .
1821	runTask runs the task .
1822	Emits the current status
1823	waitForHostResources waits for the task to wait for the task to wait until it is reached .
1824	waitSteady is used to wait for the state of a task .
1825	 steadyState returns true if the task is running .
1826	cleanupCredentials removes credentials from the managed task .
1827	waitEvent is used to wait for an event to be updated .
1828	handleResourceStateChange handles a resource state change .
1829	emitContainerEvent emits a container event .
1830	releaseIPInIP is used to release an IP address
1831	handleStoppedContainerTransition is part of the container .
1832	handleEventError is used to handle an event of an event .
1833	handleContainerStoppedTransitionError is called when a container is stopped .
1834	progressTask processes the task .
1835	isWaitingForACSECSExecutionCredentialCredentials returns true if there is an error .
1836	startContainerTransitions starts a new container transition .
1837	startResourceTransitions starts a new resource transition .
1838	transitionResource updates the state of a task .
1839	applyResourceState updates the state of the resource .
1840	waitForStopReported returns true if the task was stopped .
1841	NewFactory returns a new instance of Factory
1842	FindClientAPIVersion returns the client API version .
1843	getClient returns a client s client .
1844	findDockerVersions returns a map of docker versions
1845	runAgent starts the agent .
1846	sleepCtx waits for a given duration until the given duration is reached .
1847	TaskMetadataHandler returns a handler for the task metadata .
1848	Subscribe registers a new event handler
1849	broadcast sends an event to the event stream
1850	Unsubscribe removes a subscriber from the event stream .
1851	WriteToEventStream implements the EventStream interface .
1852	Listen for events .
1853	Start listening to the event stream
1854	SetLevel sets the log level
1855	ForModule returns a new logger for the given module .
1856	NewMockWebsocketConn creates a new mock instance
1857	ReadMessage mocks base method
1858	SetWriteDeadline mocks base method
1859	Get mocks base method
1860	NewSSMsecretsResource creates a new SSMecretryResource .
1861	Create creates a new Secret
1862	getGoRoutineMaxNumNumNum returns the total number of secrets in the secret
1863	retrieveSSMecretretsByRegion retrieves all secrets from the given region .
1864	retrieveSSMsecretsValues retrieves all the secrets from the given region .
1865	clearSSMSecretValue removes the secret data from the secret
1866	GetCachedSecretValue returns the value for the given secret key .
1867	SetCachedSecretValue sets the cached secret value for the given key .
1868	Clean mocks base method
1869	SetAvailabilityZone mocks base method
1870	SetContainerInstanceARN mocks base method
1871	SetHostPublicIPAddress mocks base method
1872	NewMockDockerMetadataClient returns a new mock instance
1873	InspectContainer mocks base method
1874	JsonKeys returns a slice of keys .
1875	TaskContainerMetadataHandler returns a handler for the task metadata .
1876	WriteContainerMetadataResponse writes a container metadata response to the response .
1877	WriteTaskMetadataResponse writes a task metadata response .
1878	Init initializes the container
1879	Error returns the error message
1880	Retry returns true if the error is retryable .
1881	NewMockDockerStateResolver creates a new mock instance
1882	State mocks base method
1883	printLicense prints the license
1884	Load loads cgroups from the given path .
1885	New creates a new Cgroups .
1886	timeoutAndMoveOn moves the function to the given function .
1887	UnmarshalJSON implements the DockerTaskEngine interface .
1888	Init initializes DockerTaskEngine .
1889	MustInit initializes DockerTaskEngine .
1890	isTaskManaged returns true if the task is managed .
1891	syncState synchronizes the task state .
1892	filterTasksToStartUnsafe returns a list of tasks to start with the container .
1893	updateContainerMetadata updates the container metadata .
1894	syncContainerStatus synchronizes the status of the container .
1895	checkTaskState checks the state of a task .
1896	sweepTask removes all containers from the Docker task .
1897	startTask starts a task
1898	openEventstream opens a docker taskstream .
1899	handleDockerEvents handles docker events .
1900	handleDockerEvent handles a Docker event .
1901	AddTask adds a task to the registry .
1902	ListTasks returns all tasks .
1903	GetTaskByArn returns a task by name .
1904	imagePullRequired returns true if the image has been pulled .
1905	cleanupPauseContainerNetwork cleans up the container network .
1906	updateTaskUnsafe is used to update a task .
1907	transitionContainer is used to transition a container .
1908	applyContainerState applies the given state to the container .
1909	Version returns the version of the docker task .
1910	NewMockSSMClient creates a new mock instance
1911	GetParameters mocks base method
1912	GetParameters mocks base method
1913	NewMockFactory creates a new mock instance
1914	FindClientAPIVersion mocks base method
1915	FindKnownAPIVersions returns a slice of docker versions .
1916	GetDefaultClient mocks base method
1917	NewMockFileSystem creates a new mock instance
1918	Copy mocks base method
1919	Exit mocks base method
1920	MockAll mocks base method
1921	Open mocks base method
1922	ReadAll mocks base method
1923	Remove mocks base method
1924	Rename mocks base method
1925	 TeeReader mocks base method
1926	initializeTaskENIDependencies initializes the task environment .
1927	setVPCSubnet sets the VPC subnet s subnet .
1928	startUdevWatcher starts a new udev .
1929	IncrementCallCount adds a call to the generic metrics .
1930	NewMockTaskEngineState creates a new mock instance
1931	AddContainer mocks base method
1932	AddENIAttachment mocks base method
1933	AddImageState mocks base method
1934	AddTaskIPAddress mocks base method
1935	AllImageStates mocks base method
1936	AllImageStates mocks base method
1937	AllTasks mocks base method
1938	ContainerByID mocks base method
1939	ENIByMac mocks base method
1940	GetAllContainerIDs mocks base method
1941	RemoveENIAttachment mocks base method
1942	RemoveImageState mocks base method
1943	RemoveTask mocks base method
1944	RemoveTask mocks base method
1945	TaskARNByV3Id returns the name of the task ARN .
1946	TaskByArn mocks base method
1947	UnmarshalJSON mocks base method
1948	String returns the string representation of the container type .
1949	UnmarshalJSON deserializes a container type .
1950	MarshalJSON marshals the containerType to JSON .
1951	parseNanoTime parses a string .
1952	NewMockResponseWriter creates a new mock instance
1953	Header mocks base method
1954	Header mocks base method
1955	WriteHeader mocks base method
1956	WriteHeader mocks base method
1957	Compare docker versions .
1958	SignHTTPRequest is used to sign an HTTP request .
1959	GetClient returns a docker client .
1960	getAgentVersions returns a list of docker versions
1961	dockerCPUShares returns the docker CPU CPU for the container
1962	verifyTasksMetadata verifies that the task is valid .
1963	Verify task metadata
1964	Verify container metadata
1965	NewMockResult creates a new mock instance
1966	GetAsVersion mocks base method
1967	GetAsVersion mocks base method
1968	Print mocks base method
1969	Print mocks base method
1970	ContainerCreate mocks base method
1971	ContainerInspect mocks base method
1972	ContainerList mocks base method
1973	ContainerRemove mocks base method
1974	ContainerStart mocks base method
1975	ContainerStats mocks base method
1976	ContainerStop mocks base method
1977	Events mocks base method
1978	ImageImport mocks base method
1979	ImageInspectWithRaw returns an instance of ImageInspectWithRaw
1980	ImageList mocks base method
1981	ImageLoad mocks base method
1982	ImagePull mocks base method
1983	ImageRemove mocks base method
1984	Ping mocks base method
1985	PluginList mocks base method
1986	VolumeCreate mocks base method
1987	VolumeInspect mocks base method
1988	VolumeRemove mocks base method
1989	ResolveTask returns the task s task metadata .
1990	ResolveContainer retrieves a container from the Docker container .
1991	synchronizeState synchronizes docker stats
1992	addAndStartStatsContainer adds a container to the container
1993	MustInit initializes the Docker stats engine .
1994	waitToStop waits for the container to stop .
1995	removeAll removes all containers from the container .
1996	addContainerUnsafe adds a container to the container
1997	addToStatsContainerMapUnsafe adds stats container to stats container
1998	GetInstanceMetrics returns the metrics for the docker stats
1999	GetTaskHealthMetrics returns a list of task health metrics .
2000	stopTrackingContainerUnsafe removes the container from the container
2001	handleDockerEvents handles docker events .
2002	removeContainer removes the container from the container
2003	newDockerContainerMetadataResolver returns a new DockerContainerMetadataResolver .
2004	taskContainerMetricsUnsafe returns a slice of container metrics .
2005	resetStatsUnsafe clears the stats queue .
2006	ContainerDockerStats returns the stats for a container .
2007	newMetricsMetadata returns a new MetricsMetadata
2008	compareSemver compares two semver versions .
2009	ExtractVersion extracts the version number from the input string .
2010	GetIAMRoleCredentials returns the IAM role credentials .
2011	GenerateCredentialsEndpointRelativeURI returns a string representation of the Credentials endpoint .
2012	IAMRoleCredentialsFromACS returns an IAM RoleCredentials from an ECSAC .
2013	SetTaskCredentials sets the task credentials .
2014	GetTaskCredentials returns a TaskIAM role .
2015	RemoveCredentials removes a task from the manager .
2016	verify response fields
2017	Getpid mocks base method
2018	Getpid mocks base method
2019	AppMeshFromACS creates a AppMesh from the given proxy configuration .
2020	buildAppPorts builds the list of app ports from the configuration
2021	buildEgressIgnoredIPs builds a list of egressIgnoredIPs from the configuration .
2022	buildEgressIgnoredPorts returns a slice of egressIgnoredPorts .
2023	appendDefaultEgressIgnoredIPs appends the defaultEgressIPs to the given list of egressIPs .
2024	IsInstanceTypeChangedError returns true if an error occurred .
2025	NewNamedError returns a new default error .
2026	Error returns the error message .
2027	BuildLinuxResourceSpec builds a Linux resource spec .
2028	buildExplicitLinuxCPUSpec builds a Linux CPU CPU spec .
2029	buildImplicitLinuxCPUSpec builds a new Linux CPU CPU .
2030	buildLinuxMemorySpec builds the Linux memory for the given task .
2031	platformHostConfigOverride overrides the host config
2032	OverrideCgroupParent overrides the cgroup parent .
2033	GetMACAddress returns the mac address for the given device .
2034	retrieve retrieves the mac address from the device .
2035	retrieveOnce retrieves the mac address from the device .
2036	IsValidNetworkDevice returns true if the device is valid .
2037	ReceiveMessage implements the EventLog interface .
2038	GetAuthorizationToken returns the authorization token .
2039	NewMockEngine creates a new mock instance
2040	ContainerDockerStats mocks base method
2041	ContainerDockerStats mocks base method
2042	GetInstanceMetrics mocks base method
2043	GetInstanceMetrics mocks base method
2044	GetTaskHealthMetrics mocks base method
2045	RetryWithBackoff performs a retry with the given callback function .
2046	RetryWithBackoffCtxCtx returns a retry error .
2047	RetryNryN attempts to retry the given number of n times .
2048	RetryNryNtxCtxCtxCtxCtxCtxCtxCtxCtxCtxCtxCtxCtxCtxCtxCtx .
2049	AddJitter adds a jitter to the given duration .
2050	NewMockIOUtil creates a new mock instance
2051	WriteFile mocks base method
2052	WriteFile mocks base method
2053	DescribeECSTagsForInstance retrieves all EC2 tags for an instance
2054	TaskContainerStatsHandler returns a handler for a task container .
2055	WriteTaskStatsResponse creates a task stats response .
2056	WriteContainerStatsResponse writes the container stats for a container .
2057	NewTaskResponse creates a new TaskResponse .
2058	NewContainerResponse creates a new container response from the Docker container .
2059	NewPortBindingsResponse returns a slice of port bindings
2060	NewVolumesResponse returns a slice of volumes
2061	NewTasksResponse returns a new TaskEngine
2062	NewPublishMetricsRequest creates a new PublishMetricsRequest
2063	NewPublishHealthMetricsRequest creates a new PublishHealthMetricsRequest .
2064	StartListing starts listening for incoming messages .
2065	Copy events to the buffer .
2066	Consume consumes messages from the buffer .
2067	ContainerStatsHandler returns a handler for container stats .
2068	NewMetricsClient returns a new MetricsClient
2069	NewMockECRSDK creates a new mock instance
2070	NewMockECFactory creates a new mock instance
2071	GetClient mocks base method
2072	NewMockECClient creates a new mock instance
2073	GetCredentialsEventType returns the event type for the given role type .
2074	NewMockGPUManager creates a new mock instance
2075	GetDevices mocks base method
2076	GetGPUIDsUnsafe mocks base method
2077	SetDevices mocks base method
2078	SetDriverVersion mocks base method
2079	SetDriverVersion mocks base method
2080	SetGPUIDs mocks base method
2081	SetRuntimeVersion mocks base method
2082	NewMockRoundTripper creates a new mock instance
2083	RoundTrip mocks base method
2084	RoundTrip mocks base method
2085	NewMockNetLink creates a new mock instance
2086	LinkByName mocks base method
2087	LinkByName mocks base method
2088	LinkList mocks base method
2089	LinkList mocks base method
2090	NewMockCNI creates a new mock instance
2091	AddNetwork mocks base method
2092	AddNetworkList mocks base method
2093	DelNetwork mocks base method
2094	DelNetwork mocks base method
2095	DelNetworkList mocks base method
2096	NewLRUCache creates a new LRU cache .
2097	Get returns the value for the given key .
2098	Set adds a value to the cache .
2099	Delete removes an item from the cache .
2100	StartTimer starts a timer .
2101	IsSent returns true if the connection has been sent .
2102	SetSentStatus sets the AttachStatus field s value .
2103	StopAckTimer stops the event .
2104	HasExpired returns true if the cache has expired .
2105	String returns the string representation of the environment .
2106	StringUnsafe returns a string representation of the ENI attachment .
2107	StartMetricsSession starts the metrics session .
2108	StartSession starts a telemetry session
2109	heartbeatHandler returns a function that sends a heartbeat message to the server .
2110	AckPublishMetricHandler is a function that returns a function that returns a function that can be used to receive an AckPublishMetric .
2111	AckPublishHealthMetricHandler is a function that returns a function that returns a function that is used to send the AckPublishHealth metrics .
2112	anyMessageHandler returns a function that sends a message to the client .
2113	formatURL returns a string representation of the container
2114	Native returns a GtkStackSwitcher .
2115	Native returns a GtkComboBox .
2116	NativeComboBox returns a GtkComboBoxText object .
2117	Native implements the GtkAppChooser interface .
2118	Native returns a GtkAppChooserWidget .
2119	Native returns a copy of the PixbufFormat .
2120	Native implements the GtkAlignment interface .
2121	Native returns a pointer to a GtkMisc object .
2122	NativeWindow returns a GtkApplicationWindow .
2123	TypeString returns the type of variant .
2124	GetString returns the string representation of the variant .
2125	GetStrv returns a slice of strings .
2126	IsType returns true if the variant is a variant .
2127	NativeFrames returns the native frame clock .
2128	Native returns a GdkFrameTimings object .
2129	Native returns a native GdkMonitor object .
2130	Native returns the native screen .
2131	Native returns the native variant builder .
2132	String returns a string representation of the status code .
2133	ToError returns an error .
2134	Native returns a pointer to a GtkLevelBar .
2135	NativeAccelGroup returns a GtkAccelGroup .
2136	Native returns a pointer to a GtkAccelMap .
2137	dataRaw returns the value of the list .
2138	Native returns a copy of this context .
2139	Native returns a GtkTextView .
2140	String returns a string representation of the variant type .
2141	Native returns a GtkApplication object .
2142	Native implements the GtkMenuShell interface .
2143	Native returns the native style context .
2144	NewMatrix returns a new matrix .
2145	Native returns a copy of the matrix .
2146	InitTranslate initializes a new matrix .
2147	InitScale initializes a new matrix .
2148	InitRotate initializes the rotation matrix .
2149	Translate translates a matrix to a matrix .
2150	Scale scales the matrix .
2151	Rotate rotates a matrix .
2152	Multiply multiplies a matrix .
2153	Native returns the native GtkPaperSize .
2154	Native returns a GdkContext .
2155	Native returns a pointer to a GtkButtonBox .
2156	Native returns a GtkTextIter .
2157	Native returns a pointer to the main context .
2158	Native returns a GtkTreeViewColumn .
2159	Native returns a copy of the VariantIterIter .
2160	Next returns the next element .
2161	LookupAction returns the action for the given action name .
2162	AddAction adds an action to the map .
2163	Remove action .
2164	Native returns a pointer to a surface .
2165	NewSurface creates a new surface .
2166	NativeDialog returns a GtkAboutDialog object .
2167	AddFont adds a font to the font .
2168	Native returns a GtkLabel .
2169	Native returns a copy of the VariantDict .
2170	Native returns a GtkActionable object .
2171	Native returns a pointer to a GtkHeaderBar .
2172	Native returns a GtkListBox .
2173	Native returns a pointer to a GtkListRow .
2174	Native returns a pointer to a GtkRevealer .
2175	Native returns the native search bar .
2176	BindProperty bind property to target object
2177	GetSource returns the source object .
2178	GetTarget returns the target object .
2179	GetFlags returns the binding flags .
2180	Native returns a GtkFontChooser .
2181	Native returns the native font button .
2182	ChangeActionState mocks base method
2183	Activate activates an action group .
2184	Native returns a GtkWidget object .
2185	Native returns a GtkAllocation object .
2186	Native returns a pointer to a GtkGLArea .
2187	Native returns a GtkTreeView .
2188	SetSearchEqualMatch matches the search function .
2189	goMarshal is used to marshals a closure .
2190	gValueSlice returns a slice of values .
2191	 IdleAdd creates a new source handle .
2192	TimeoutAdd adds a function to the source .
2193	sourceAttach creates a new source handle .
2194	Native returns a pointer to a GObject .
2195	Take a pointer to a Go object .
2196	GetPropertyType returns the type of a property .
2197	Native returns the native pointer of this object .
2198	InitI18n initializes i18n
2199	Local converts a string into a string .
2200	Native returns a GtkShortcutSection .
2201	Native returns a GtkShortcutGroup .
2202	NativeShortcut returns a pointer to a GtkShortcut .
2203	SimpleActionGroupNew returns a new SimpleActionGroup .
2204	ActionNameIsValid returns true if the given action name is valid .
2205	GetName returns the name of the action .
2206	GetState returns the state of the action .
2207	GetStateHint returns the state hint .
2208	GetParameterType returns the variant type .
2209	GetStateType returns a variant type .
2210	ChangeState sets the state of the Action .
2211	Activate activates an action .
2212	SimpleActionNew creates a new SimpleAction .
2213	SimpleActionfulNewAction creates a new SimpleAction .
2214	SetEnabled sets the enabled action .
2215	PropertyActionNew creates a new property action action .
2216	Native returns a pointer to a GtkAdjustment .
2217	Native returns a GtkAssistant object .
2218	Native returns a pointer to a GtkBin .
2219	Native returns the native color button .
2220	Native returns a GtkCellRenderer .
2221	Native implements the GtkCellRenderer interface .
2222	Native returns a GtkCellRendererPixbuf .
2223	Native returns a GtkCellRendererText .
2224	Native returns a GtkCellRendererToggleToggleToggleToggleToggleToggleToggleToggleToggleToggle t .
2225	Native check button
2226	Native check menu item
2227	NativeClipboard returns a pointer to a GtkClipboard .
2228	WaitIsTextAvailable returns true if the clip is available .
2229	WaitForText returns the text of the clipboard .
2230	WaitIsRichTextAvailable returns true if the buffer is available .
2231	WaitIsUrisAvailable returns true if the clipboard is available .
2232	WaitIsImageAvailable returns true if the clip is available .
2233	SetImage sets the image .
2234	WaitForImage returns a copy of the clipboard .
2235	WaitIsTargetAvailable returns true if the target is available .
2236	WaitForContents mocks base method
2237	Native returns a GtkContainer .
2238	Native returns a GtkCssProvider .
2239	Native returns a GtkDialog object .
2240	Native returns a pointer to a GtkEntry .
2241	Native returns a pointer to a GtkEntryBuffer .
2242	Native implementation of GtkEntryCompletion .
2243	Native returns a GtkEventBox .
2244	Native returns a GtkExpander .
2245	Native returns a GtkFileChooser .
2246	Native returns a pointer to a file chooser button .
2247	NativeDialog returns a GtkFileChooserDialog .
2248	Native returns a GtkFileChooser widget .
2249	Native returns a GtkFileFilter .
2250	Native returns the native frame .
2251	Native returns a GtkAspectFrame .
2252	Native returns a GtkGrid object .
2253	Native returns a GtkImage object .
2254	SetSize sets the size of the layout .
2255	GetSize returns the size of the layout .
2256	Native link button
2257	Native returns a pointer to a GtkListStore .
2258	Native returns a pointer to a GtkMenuButton .
2259	Native returns a pointer to a GtkMenuItem .
2260	SetLabel sets the label of the menu item .
2261	GetLabel returns the label of the menu item .
2262	NativeDialog returns a GtkMessageDialog object .
2263	Native returns a GtkNotebook .
2264	NativeWindow returns a GtkOffscreenWindow .
2265	Native returns a GtkOrientable object .
2266	Native returns the native overlay .
2267	Native returns a native GtkPaned object .
2268	Native returns a GtkProgressBar object .
2269	Native radio button .
2270	Native menu item .
2271	Native returns a pointer to a GtkRange .
2272	NativeChooser returns a pointer to a GtkChooser .
2273	NativeFilter returns a pointer to a GtkFilter .
2274	Native returns a GtkScale object .
2275	NativeScrollBar returns a GtkScrollBar .
2276	NativeWindow returns a GtkScrolledWindow .
2277	Native returns the native search entry .
2278	Native returns the native GtkSelectionData object .
2279	GetData returns the data of the selection .
2280	GetData gets the data from the given pointer .
2281	SetData sets the data for the given atom .
2282	DragIconPixPix sets the icon of the dragbuffer .
2283	Native returns a pointer to a GtkSeparator .
2284	Native returns a pointer to a GtkSeparatorMenuItem .
2285	Native implements the GtkSeparatorTool interface .
2286	Native returns a pointer to a spin button .
2287	Native returns a GtkSpinner .
2288	Native returns a GtkStatusbar object .
2289	Native returns a GtkSwitch object .
2290	Native returns a GtkTextTag .
2291	Native returns a pointer to a GtkTextTagTable .
2292	Native returns a pointer to a GtkTextBuffer .
2293	SelectRange selects a text buffer .
2294	Native returns a pointer to a GtkToggleButton .
2295	Native returns a pointer to a GtkTool .
2296	Native returns a pointer to a GtkToolButton .
2297	Native returns a pointer to a GtkToggleToolButton .
2298	Native returns a pointer to a GtkToolItem .
2299	Native returns a pointer to a GtkTreeIter .
2300	Native returns a pointer to a GtkTreeModel .
2301	TreePathFromList returns a TreePath from the given list .
2302	Native returns a pointer to a GtkTreePath .
2303	GetIndices returns the indices of the tree path .
2304	Native returns a pointer to a GtkTreeSelection .
2305	GetPath returns the path of the tree row .
2306	GetModel returns the tree model .
2307	Valid returns true if the tree row is valid .
2308	Native returns a pointer to a GtkTreeStore .
2309	Insert inserts a tree into the tree .
2310	SettingsGetDefault returns the default settings .
2311	Native returns a GtkTextMark object .
2312	Native returns a pointer to a pointer .
2313	Native returns a GtkWindow .
2314	Native returns a GdkAt instance .
2315	GdkAtom creates an Atom from a string .
2316	Native returns the native device .
2317	Native returns a pointer to a GdkCursor .
2318	Native returns the native device manager .
2319	Native returns the native display .
2320	Native native drag context .
2321	Native returns the native GdkEvent .
2322	XRoot returns the x root of the event button .
2323	YRoot returns the height of the mouse button .
2324	SetColors sets the color of the RGBA .
2325	Native returns the native window .
2326	ClosureNew creates a new Closure .
2327	Native returns a GtkColorChooser .
2328	NativeDialog returns a Gtk ColorChooserDialog .
2329	Native returns a copy of the source .
2330	Translate translates the given coordinates to the specified coordinate .
2331	Scale scales the image .
2332	Rotate rotates the specified angle .
2333	Transform applies a transformation matrix to the context .
2334	SetMatrix sets the matrix .
2335	GetMatrix returns a new matrix .
2336	UserToDevice converts a user to a device .
2337	UserToDeviceDistance returns the distance between two points .
2338	DeviceToUser converts a device to a user .
2339	DeviceToUserDistance returns the distance between two points .
2340	Draw draws the sprite .
2341	Length returns the length of the stream .
2342	Decode decodes an audio stream .
2343	IsMouseButtonPressed returns true if the mouse button is pressed .
2344	Touch returns a slice of touch objects .
2345	paeth returns the half of a given b .
2346	filterPaeth filters the pixels in pixels in pixels .
2347	MipmapLevel returns the level of the pixel map .
2348	hideConsoleWindowOnWindows hides the console window .
2349	DepthMask sets the depth mask .
2350	EdgeFlag sets the edge flag .
2351	TexImage3 renders a TexImage3 image .
2352	QuadVertices returns a slice of vertices .
2353	PutVertex implements the Image interface .
2354	scaleUpdater updates the scale .
2355	NewBoard creates a new board .
2356	Update updates the board .
2357	Move moves the board to the board .
2358	Size returns the size of the board .
2359	Draw draws the board .
2360	ClearIndex clears the index .
2361	CreateProgram creates a new program .
2362	DebugMessageCallback registers a callback for debug messages .
2363	GetError returns the current error .
2364	GetGraphicsResetStatus returns the current terminal status .
2365	LineWidth sets the line width .
2366	PassThrough is used to pass a token to the program .
2367	PointSize sets the size of a point .
2368	IsReady returns true if the context is ready .
2369	NewPlayerFromBytes creates a new Player from bytes .
2370	Close closes the player .
2371	Seek sets the offset of the player .
2372	decode decodes the decoded image .
2373	Decode decodes the given io . Reader .
2374	DecodeConfig decodes a config from the given io . Reader .
2375	Add adds a new color to the current color .
2376	IsButtonPressed returns true if the given button is pressed .
2377	ButtonName returns the name of the given button .
2378	AppendHookOnUpdate adds a callback to the hook .
2379	DebugPrint prints an image with the given string .
2380	GamepadIDButtonPressed returns the ID of the gamepad .
2381	Seek implements the Stream interface .
2382	decode decodes an audio stream .
2383	MovePieceToLeft moves a piece to the left corner of a piece .
2384	RotatePieceRight returns the angle of the given piece .
2385	RotatePieceLeft returns the angle of the given piece .
2386	flushable returns true if the field is empty .
2387	flushableLine returns true if the given line is empty .
2388	flushLine will flush the line at the given index .
2389	intersect returns the intersection of two lines
2390	rayCasting returns a slice of points for a given object .
2391	Str converts a string to a string .
2392	Close closes the stream .
2393	NewWorld creates a new world .
2394	init initializes the world area
2395	Update updates the world area .
2396	Draw draws the pixels in the world
2397	DrawLine draws a line on the image .
2398	DrawRect draws a rectangle on the image .
2399	NewGame creates a new Game .
2400	Update updates the game .
2401	Draw draws the game .
2402	IsKeyReleased returns true if the given key has been released .
2403	KeyPressDuration returns the duration of the given key .
2404	IsMouseButtonJustReleased returns true if the mouse button has been released .
2405	MouseButtonPressDuration returns the duration of the given mouse button .
2406	JustConnectedGamepadIDs returns the list of available gamepad IDs .
2407	IsGamepadJustDisconnected returns true if the given id is not connected .
2408	IsGamepadButtonJustPressed returns true if the game is pressed .
2409	IsGamepadButtonJust returns true if the gamepad has been released .
2410	GamepadButtonPress returns the duration of a gamepad button .
2411	JustPressedTouchIDs returns a slice of all touchIDs .
2412	IsTouchJustReleased returns true if a touch has been released .
2413	TouchPressDuration returns the touch duration for the given id .
2414	ViewportSize returns the size of the image .
2415	Loop runs a goroutine on a goroutine .
2416	Run runs the given function .
2417	InternalImageSize returns the internal image size .
2418	square computes the square of the given volume .
2419	Play note .
2420	axisAt returns the piano at the given index .
2421	Play note .
2422	Draw draws the path to the target image .
2423	String returns a string representation of the GeoM .
2424	Reset resets the geometry .
2425	Concat concatenates a GeoM .
2426	Rotate rotates the given point .
2427	Invert returns the inverse of the geometry .
2428	ScaleGeo returns a GeoM with the given coordinates .
2429	TranslateGeo returns a GeoGeoGeo .
2430	RotateGeo returns a new GeoM
2431	newFramebufferFromTexture creates a framebuffer from a texture .
2432	newScreenbuffer returns a new framebuffer .
2433	aque returns true if the image is opaque .
2434	writeIDATs writes the image IDs to the buffer .
2435	levelToZlib returns zlib . zlib . zlib
2436	Encode implements io . Writer
2437	Encode encodes an image .
2438	NewImage creates a new image
2439	NewScreenFramebufferImage creates a new ImageFramebuffer .
2440	imageSize returns the size of the image .
2441	makeStale clears the image .
2442	ReplacePixels replaces the image with the given image .
2443	DrawTriangles draws the vertices of the image .
2444	appendDrawTriangles adds a new image to the image .
2445	makeStaleIfOn determines if the image is stale .
2446	readPixelsFromGPU reads pixels from GPU .
2447	resolveStale checks if the image is stale
2448	dependOn returns true if the image is dependent on the image .
2449	dependImages returns a map of all images in the image .
2450	hasDependency returns true if the image has a dependency .
2451	Dispose the image .
2452	IsInvalidated checks if the image is invalid .
2453	NewImage creates a new image
2454	Pixels returns the pixels of the image .
2455	CopyPixels copies the image .
2456	Pos returns the position of the current tile .
2457	NextPos returns the next position of the next tile .
2458	NewTile returns a new Tile .
2459	MoveTiles moves the tiles to the specified size .
2460	Update updates the tile .
2461	String returns a string representation of the color .
2462	ScaleColor scales a color
2463	TranslateColor returns a new color .
2464	RotateHue returns a new color .
2465	availableFilename returns the filename for the given prefix .
2466	appMain is the main function for the application .
2467	repeatedKeyPressed returns true if the key is repeating .
2468	totalBytes returns the total number of bytes .
2469	newArrayBuffer returns a new buffer .
2470	enable implements the interface .
2471	disable disables all vertices .
2472	Reset the state of the openGL state .
2473	areSameFloat32Array compares two floats
2474	NewInfiniteLoopWithIntro creates a new InfiniteLoop with introspection .
2475	Read implements io . Reader interface .
2476	Seek implements io . Reader interface .
2477	remove removes the image from the cache
2478	resolveStaleImages resolves stale images .
2479	Move forward to the game .
2480	RotateRight moves the player to the player .
2481	RotateLeft moves the player .
2482	updateGroundImage updates the game .
2483	drawGroundImage draws the ground image on the screen .
2484	String returns the string representation of the Dir .
2485	Update updates the mouse state .
2486	Dir returns the direction of the input .
2487	Read reads from the stream .
2488	Size returns the size of the image .
2489	Fill fills the image with the given color .
2490	Bounds returns the bounds of the image .
2491	Dispose the image .
2492	NewImage creates a new image
2493	makeVolatile mipmaps
2494	IsFullscreen returns true if the user is fullscreen .
2495	glfwSize returns the width of the user .
2496	getScale returns the scale of the user .
2497	actual screen scale
2498	setScreenSize sets the size of the user .
2499	currentMonitor returns the current monitor .
2500	CopyImage returns a copy of the given image .
2501	Append vertices to the queue .
2502	EnqueueDrawTriangles adds a vertex to the queue .
2503	Enqueue adds a command to the queue .
2504	Flush flushes all commands .
2505	Exec executes a draw command .
2506	CanMerge returns true if the image can be merged .
2507	Exec executes the command .
2508	Exec executes the command .
2509	Exec executes the command .
2510	Exec executes the command .
2511	Execute executes the command .
2512	schemaHostNetworkPolicy returns the schema for the host network network .
2513	expandHostNicFailureCriteria expands HostNicFailureCriteria .
2514	flattenHostNicFailureCriteria flattens a HostNicFailureCriteria
2515	expandHostNicOrderPolicy expands HostNicOrderPolicy
2516	flattenHostNicOrderOrderPolicy flattens a HostNicOrderPolicy .
2517	expandHostNicTeamingPolicy expands HostNicTeamingPolicy .
2518	flattenHostNicTeamingPolicy flattens a HostNicTeamingPolicy .
2519	expandHostNetworkSecurityPolicy expands HostNetworkSecurityPolicy .
2520	flattenHostNetworkSecurityPolicy flattens a host network security policy .
2521	expandHostNetworkTrafficPolicy expands HostNetworkTrafficPolicy .
2522	flattenHostNetworkNetworkTrafficPolicy flattens a HostNetworkTrafficPolicy .
2523	expandHostNetworkPolicy expands HostNetworkPolicy .
2524	flattenHostNetworkPolicy flattens a HostNetworkPolicy .
2525	schemaHostNasVolumeSpec returns a schema for hostNasVolumeSpec .
2526	expandHostNASVolumeSpec expands HostNasVolumeSpec .
2527	flattenHostNASVolume flattens a HostNASVolume into a ResourceData structure .
2528	isNASVolume returns true if the given type is a NFS volume .
2529	expandVMVPortgroupPolicy expands a VMware DVPortgroup policy .
2530	flattenVMVVSPortgroupPolicy flattens a VMware DV2DportGroupPolicy .
2531	expandDVPortgroupConfigSpec returns a DVPortgroupConfigSpec .
2532	flattenDVPortgroupConfigInfo flattens a DVPortgroupConfig .
2533	expandClusterHostGroup expands a cluster group .
2534	flattenClusterHostGroup flattens a cluster host group .
2535	resourceVSphereComputeGroupGroupFlatten returns the name of the cluster with the given name .
2536	resourceVSphereComputeClusterHostGroupFetchObjects fetches the cluster and name of the cluster .
2537	netifKey returns the key for the given network interface .
2538	matchGateway returns true if the given gateway matches the given gateway .
2539	expandCustomizationGlobalIPSettings expands CustomizationGlobalIPSettings .
2540	expandCustomizationLinuxPrep returns a new CustomizationLinuxPrepare object .
2541	expandCustomizationGuiRunOnce returns a CustomizationGuiRun instance .
2542	expandCustomizationGuattendedUnattended returns a custom CustomizationGuattended CustomizationGuattended .
2543	expandCustomizationIdentification returns a CustomizationIdentificationIdentification .
2544	expandCustomizationUserData expands CustomizationUserData .
2545	expandCustomizationSysprep returns a CustomizationSysprep object .
2546	expandCustomizationSysprepText returns the CustomizationSysprepText field .
2547	expandCustomizationIP6AddressSpec expands the custom IP address for the given network .
2548	expandCustomizationIPSettings expands CustomizationIPSettings .
2549	expandCustomizationAdapterMappingMapping returns a slice of Customization adapters
2550	ExpandCustomizationSpec returns a custom CustomizationSpec .
2551	ValidateCustomizationSpec validates a CustomizationSpec .
2552	schemaVirtualSwitchBondBridgeBridge returns the schema for the HostVirtualSwitch bridge
2553	expandHostVirtualSwitchConfig expands HostVirtualSwitchConfig .
2554	flattenHostVirtualSwitchConfig flattens a HostVirtualSwitchConfig .
2555	expandLinkDiscoveryProtocolConfig returns a LinkDiscoveryProtocolConfig .
2556	flattenLinkDiscoveryProtocolConfig flattens a LinkDiscoveryProtocolConfig .
2557	expandHostVirtualSwitchBridge returns a HostVirtualSwitchBridge
2558	flattenHostVirtualSwitchBridge flattens a HostVirtualSwitchBondBridge
2559	schemaHostVirtualSwitchSpec returns the schema for the host virtual machine .
2560	expandHostVirtualSwitchSpec expands HostVirtualSwitchSpec
2561	flattenHostVirtualSwitchSpec flattens a HostVirtualSwitchSpec .
2562	saveHostVirtualSwitchID saves the name of the host virtual machine .
2563	virtualSwitchIDsFromResourceID converts the given resource ID to a string .
2564	expandStorageDrsVMConfigInfo expands StorageDrsVmConfigInfo to StorageDrsVmConfigInfo .
2565	flattenStorageDrsVMConfigInfo flattens a StorageDrsVmConfig .
2566	resourceVSphereStorageDrsOverride returns the vSphereStorageDrs for the given pod .
2567	resourceVSphereStorageVrsFindEntry looks up the VSphereStorageDrs configuration for a given volume .
2568	NetworkInterfaceSubresourceSchema returns a map of network interfaces .
2569	NewNetworkInterfaceSubresource creates a new NetworkInterfaceSubresource .
2570	NetworkInterfaceDiffOperation implements the NetworkInterface interface .
2571	ReadNetworkInterfaceTypes returns a list of network interface types .
2572	baseVirtualEthernetCardToBaseVirtualDevice converts a BaseVirtualEthernetCard to baseVirtualDevice .
2573	baseVirtualEthernetCardToBaseCard converts a BaseVirtualEthernetCard to BaseVirtualEthernetCard .
2574	virtualEthernetCardString returns the string representation of a VirtualEthernetCard .
2575	Create implements the VirtualInterface interface .
2576	Read implements the interface interface .
2577	Delete deletes a virtual device .
2578	ValidateDiff validates a NetworkInterfaceSubresource
2579	nicUnitRange returns the number of devices in the given list .
2580	hostStorageSystemSystemFromHostSystemID returns the host storage system for the given host system .
2581	FromUUID returns a VirtualMachine from a UUID
2582	virtualMachineFromSearchIndex retrieves the virtual machine from the search index .
2583	virtualMachineView retrieves virtual machine from container view
2584	Properties returns the properties of the virtual machine .
2585	WaitForGuestIP waits for a guest IP to wait for the guest IP to wait for the given timeout .
2586	WaitForGuestNet returns an error if the guest is not running .
2587	Create creates a virtual machine .
2588	Clone clones a virtual machine
2589	Customize creates a new virtual machine .
2590	MoveToFolder mocks base method
2591	Relocate a virtual machine
2592	MOIDForUUID returns the MOID for a UUID .
2593	UUIDForMOID returns the UUID for the given MOID .
2594	MOIDsForUUIDs returns a list of MOIDs for UUIDs
2595	UUIDsForMOIDs returns a list of MOIDs for the given moids .
2596	UUIDsForManagedObjectReferences returns the UUIDs for a ManagedObjectReference .
2597	MOIDs returns a slice of MOID results .
2598	ManagedObjectReferences returns a list of ManagedObjectReferences for the UUID .
2599	UUIDs returns a slice of UUIDs .
2600	FromKeygroup retrieves a DistributedVirtualPortgroup from a DVS .
2601	FromMOID returns a DistributedVirtualPortgroup
2602	FromPath returns a DistributedVirtualPortgroup from a path .
2603	Properties returns the properties of a distributed virtual portgroup .
2604	Create a new DVPortgroup
2605	Properties returns the properties of a Datastore .
2606	MoveToFolder mocks base method
2607	MoveToFolderSystemSystemRelativeID moves the given host system to the given host system .
2608	Browser returns an instance of HostDatastore
2609	SearchDatastore searches for a given datastore .
2610	FileExists checks if a file exists .
2611	FromPath returns a VirtualApp from a path .
2612	FromID returns a VirtualApp from the given ID .
2613	IsVApp returns true if the given rp is vp .
2614	Create creates a virtual app .
2615	Update updates a VAppSpec .
2616	ResourceIDString returns a string representation of a resource ID .
2617	SliceInterfacesToStrings converts a slice of interfaces to strings .
2618	SliceStringsToInterfaces converts a slice of strings to interfaces .
2619	SliceInterfacesToManagedObjectReferences converts a slice of interfaces to ManagedObjectReference .
2620	BoolStringPtr converts a string to a string representation .
2621	ValidateBoolStringPtr returns a schema validation function .
2622	BoolPolicy returns a BoolPolicy .
2623	GetBoolPolicy returns a BoolPolicy .
2624	SetBoolPolicy sets the BoolPolicy field s value .
2625	StringPolicy returns a new StringPolicy
2626	GetStringPolicy returns the string representation of a string .
2627	SetStringPolicy sets the StringPolicy field s value .
2628	LongPolicy returns a long policy .
2629	GetLongPolicy returns the LongPolicy for the given key .
2630	SetLongPolicy sets the LongPolicy field s value .
2631	AllFieldsEmpty returns true if v is empty .
2632	DeRef returns the value of v .
2633	Less returns true if i is less than j .
2634	Swap swaps the index and j .
2635	hostDatastoreSystemFromHostSystemID retrieves a host datastore from a host system .
2636	availableScsiDisk returns the available disk .
2637	specForCreateSpec returns a Vmfs DatastoreSpec for the given name .
2638	specForExtendSpec returns a VmfsDatastoreSpec for the given name .
2639	removeDatastore removes a datastore
2640	queryVmfsDatastoreOptions is used to query vfs datastore .
2641	extendVmfsDatastore implements the VirtualDatastore interface .
2642	resourceVSphereCompileClusterImport sets the default values for the resource .
2643	resourceVSphereComputeClusterApply creates a new cluster .
2644	resourceVSphereComputeTagsApplyTags applies the tags to the cluster .
2645	resourceVSphereComputeTags retrieves the tags for a cluster .
2646	resourceVSphereComputeCustomAttributes applies the custom attributes to the vSphere resource .
2647	resourceVSphereComputeCustomAttributes retrieves the custom attributes from the given resource .
2648	resourceVSphereComputeClusterGetCluster retrieves a ClusterComputeResource .
2649	resourceVSphereComputeClusterFromPath returns a ClusterComputeResource from the given path .
2650	resourceVSphereComputeDatacenter saves a datacenter to a datacenter
2651	resourceVSphereComputeNameAndPath sets the name and path to the cluster .
2652	resourceVSphereComputeNameChange applies the name change to the cluster .
2653	resourceVSphereComputeFolderChange is used to move a cluster to a folder .
2654	resourceVSphereComputeEmptyClusterValidate ensures that the cluster is empty .
2655	resourceVSphereComputeClusterDelete deletes a cluster
2656	convertVSphereComputeClusterClusterClusterData is a helper function to flatten the cluster s configuration data .
2657	expandClusterConfigSpec expands a cluster config
2658	flattenClusterConfigSpec recursively flatten cluster config info .
2659	expandClusterDasConfigInfo expands a clusterDas config .
2660	flattenClusterDasConfigInfo recursively flattens a clusterDasConfig into a ResourceData structure .
2661	expandBaseClasAdmissionControlPolicy expands the given policy .
2662	flattenBaseClasAdmissionControlPolicy flattens a baseClusterAdmissionPolicy .
2663	expandClusterFailoverControlPolicy expands the cluster failover resources .
2664	flattenClusterFailoverResourcesAdmissionControlPolicy flattens the cluster failover resources .
2665	expandClusterFailoverControlPolicy expands a cluster failover level .
2666	flattenClusterFailoverControlPolicy flattens a cluster failover level .
2667	expandClusterFailoverControlPolicy expands a cluster failover policy .
2668	flattenClusterFailoverHostAdmissionPolicy flattens a cluster failover policy .
2669	expandClasVmSettings expands a ClusterDASettings .
2670	flattenClasVMSSettings flattens a cluster das vm settings into a ResourceData structure .
2671	expandClusterVMComponentProtectionSettings expands ClusterVmComponentProtectionSettings .
2672	flattenClusterVMComponentProtectionSettings flattens the clusterVmComponentProtectionSettings .
2673	expandClusterVMTToolsMonitoringSettings returns a ClusterVMTToolsMonitoringSettings object .
2674	flattenClusterVMTToolsMonitoringSettings flattens the cluster vm tools .
2675	expandClusterDpmConfigInfo returns a ClusterDpmConfigInfo instance
2676	flattenClusterDpmConfigInfo flattens the clusterDpmConfigInfo into a structure .
2677	expandClusterDrsConfigInfo expands the clusterDrs configuration .
2678	flattenClusterDrsConfigInfo recursively flattens the clusterDrs configuration .
2679	expandResourceVSphereComponentsAdvancedOptions expands the options for a resource .
2680	expandClusterInfoInfo returns a ClusterInfraUpdateInfo instance
2681	flattenClusterInfraUpdateHaConfigInfo flattens the clusterInfraUpdate info into the schema .
2682	expandClusterOrchestrationInfo returns a ClusterOrchestrationInfo instance
2683	flattenClusterOrchestrationInfo flattens the cluster or creates a new clusterOrchestrationInfo .
2684	expandClusterDrsConfigInfo returns a ClusterProactiveDrs instance
2685	flattenClusterProactiveDrsConfigInfo flattens the clusterProactiveDrs configuration .
2686	Properties returns the properties of a StoragePod .
2687	Create creates a storage pod .
2688	ApplyDRSConfiguration applies the DRS configuration to the specified storage .
2689	Rename rename a pod
2690	MoveToFolder mocks base method
2691	StorageDRSEnabled returns true if the pod is enabled .
2692	CreateVM creates a virtual machine .
2693	CloneVM clones a virtual machine
2694	ReconfigureVM is used to reconfigure a virtual machine .
2695	RelocateVM relocate a virtual machine
2696	HasDiskCreationOperations returns true if the given list of virtual devices have been created .
2697	IsMember returns true if the given pod is member of the given datastore .
2698	NewConfig returns a Config object .
2699	Client returns a VSphereClient instance
2700	EnableDebug enables debug mode .
2701	sessionFile returns the session file name .
2702	vimSessionFile returns the vim session file path .
2703	restSessionFile returns the path to the rest session file .
2704	SaveVimClient persists the vim session .
2705	SaveRestClient persists a REST client .
2706	restoreVimClient restores the vim session .
2707	readRestSessionID reads the rest session id .
2708	LoadVimClient loads the vim client .
2709	LoadRestClient loads a REST client .
2710	SaveVimSessionOrNew creates a new VIM session .
2711	RestoreRestSessionOrNew creates a new REST session .
2712	wait waits for a virtual machine to wait for a given timeout
2713	selectEventsForReference retrieves all events for a given reference
2714	getDatastore returns a datastore for the given name
2715	recoverVSphereVirtualMachineUpdateReconfigures the VSphere virtual machine .
2716	resourceVSphereVirtualMachineCreateBareWithSDRS creates a VirtualMachine with the given data .
2717	resourceVSphereVirtualMachineCreateBareStandard creates a virtual machine .
2718	resourceVSphereVirtualMachineCreateWithSDRS creates a new VSphere virtual machine .
2719	resourceVSphereVirtualMachineRollback creates a new virtual machine .
2720	resourceVSphereVirtualMachineRelocateWithSDRSRelocateWithSDRS updates the VSphere virtual machine .
2721	applyVirtualDevices applies the virtual device to the virtual machine .
2722	expandClusterDpmHostConfigInfo expands a ClusterDpmHostConfig .
2723	flattenClusterDpmHostConfigInfo flattens the clusterDpmHostConfigInfo into a structure .
2724	resourceVSphereDPMHostOverride is a helper function to flatten the host name into a string .
2725	resourceVSphereDPMHostOverride returns the DPMHostConfig for the given host .
2726	resourceVSphereVirtualDisk returns a resource for VSphereVirtualDisk
2727	createHardDisk creates a hard disk .
2728	searchForDirectory searches for a directory for a given datastore .
2729	Process mount operations .
2730	processUnmountOperations handles unmount operations .
2731	isEligibleTagEndpoint returns true if the client is a valid tag endpoint .
2732	tagCategoryByName finds a tag category by name .
2733	tagByName retrieves a tag by name .
2734	tagsSchema returns a schema schema .
2735	tagTypeForObject returns the tag type for the given object .
2736	readTagsForResource retrieves tags for a resource .
2737	diff compares two tags
2738	processAttachOperations processes the tags attached to the object .
2739	tagsClientIfDefined returns a client if it is defined .
2740	processTagDiff is used to process a tag diff
2741	expandDVSContactInfo expands DVS contact info
2742	flattenDVSContactInfo flattens a DVSContactInfo into a ResourceData structure .
2743	expandDistributedVirtualSwitchMemberConfig returns a DistributedVirtualMachineConfigSpec for the given map .
2744	flattenDistributedVirtualSwitchMember returns a map of devices to a map .
2745	expandDistributedVirtualVirtualSwitchMemberConfigSpec expands a slice of DistributedVirtualMachineConfigSpec to a slice of DistributedVirtualMachineConfigSpec .
2746	flattenDistributedVirtualVirtualSwitchMember flattens a list of DistributedVirtualVirtualSwitchHostMember members into a map .
2747	expandVMIpfixConfig returns an instance of VMwareIpfixConfig
2748	flattenVMIpFixConfig flattens a VMwareIpfixConfig .
2749	flattenDvsHostInfrastructureTrafficResource flattens a DVSHostInfrastructure resource .
2750	expandDVSNameUplinkListUplinkPortPolicy expands the DVSNameUplinkPortPolicy
2751	flattenDVSNameUplinkListUplinkPortPolicy flattens a DVS name into an array .
2752	expandVMDVSConfigSpec expands a VMware DVS config .
2753	flattenVMDVSConfigInfo recursively flattens a VMwareDVS config object .
2754	schemaDVSCoreSpec returns a map of dVS configs
2755	expandDVSCoreSpec expands the dv1 config .
2756	getWithRestart retrieves a value from the resource data
2757	vAppSubresourceSchema returns a map of vappSubresource .
2758	expandVirtualMachineBootOptions expands virtual machine bootstrap options .
2759	flattenVirtualMachineBootOptions flattens the virtual machine bootstrap options .
2760	expand virtual machine flag
2761	flattenVirtualMachineFlagInfo flattens a virtual machine flag .
2762	expandToolsConfigInfo expands ToolsConfigInfo
2763	flattenToolsConfigInfo flattens a ToolsConfigInfo object .
2764	schemaVirtualMachineResourceAllocation returns a schema for the virtual machine allocation .
2765	expandVirtualMachineResourceAlloc expands virtual machine allocation information .
2766	expandLatencySensitivity returns a new LatencySensitivity .
2767	flattenLatencySensitivity flattens a LatencySensitivity .
2768	flattenVirtualMachineResourceAllocation is a helper function to flatten the resource allocation information .
2769	flattenVAppConfig recursively flattens the vmConfig into a map .
2770	expand virtual machine config
2771	flattenVirtualMachineConfigInfo flattens a virtual machine configuration .
2772	expandVirtualMachineConfigChanged returns a new VirtualMachineConfigSpecChanged with the given info .
2773	getMemoryReservationLocked returns true if the resource is locked .
2774	FromPathOrDefault returns the resource pool for a given path .
2775	Properties returns a resource pool .
2776	ValidateHost validates a host
2777	OSFamily returns the OS family of the system .
2778	Create creates a resource pool .
2779	Update updates a resource pool .
2780	MoveIntoResourcePool mocks base method
2781	expandClusterDasVMConfigInfo returns the cluster das vm config
2782	flattenClusterDasVmConfigInfo flattens the clusterDASV settings into a resource .
2783	resourceVSphereHAHAVMOverride is a helper function for creating a virtual machine that can be used to create a virtual machine .
2784	resourceVSphereHAVMOverrideFindEntry looks up the VSphereHmConfig for the given VM .
2785	schemaHostPortGroupGroupSpec returns the schema for the host port group .
2786	expandHostPortGroupSpec expands HostPortGroupSpec .
2787	flattenHostPortGroupSpec flattens a host port group spec .
2788	calculatePorts returns a set of ports for a host port group .
2789	portGroupPortSchema returns a schema for port group .
2790	saveHostPortGroupID saves the host port group ID .
2791	portGroupGroupIDsFromResourceID returns the port group IDs from a resource .
2792	BaseFromPath returns a BaseComputeResource from the given path .
2793	BaseComputeFromReference returns a BaseComputeResource from a ManagedObjectReference .
2794	BaseProperties returns the properties of the object .
2795	BasePropertiesFromReference retrieves the base properties from a ManagedObjectReference .
2796	DefaultDevicesFromReference retrieves a list of virtual devices from an environment .
2797	OSFamily returns the OS family of the environment .
2798	EnvironmentBrowserBrowserFromReference creates a new EnvironmentBrowserBrowser from a reference .
2799	Properties returns the properties of a cluster .
2800	Create creates a cluster .
2801	MoveToFolder mocks base method
2802	Reconfigure is used to reconfigure a cluster .
2803	Delete deletes a cluster .
2804	IsMember returns true if the host is member of the host system .
2805	MoveHostsInto takes a list of hosts into a cluster .
2806	MoveHostsOutOf removes all hosts from the given cluster .
2807	expandVmwareDistributedVirtualVlanIdSpec expands the vmwareVlanId spec .
2808	flattenVmwareDistributedVirtualSwitchVlanIdSpec flattens the VmwareVirtualVlanIdSpec field s value .
2809	expandVmwareDistributedVirtualSwitchVlanSpec expands vmware vlan switch to vmware
2810	flattenVmwareDistributedVirtualSwitchVlanSpec flattens the Vmware VmwareVLANs of the vmware
2811	expandVmwareDistributedVirtualVirtualSwitchSpec expands the vmware to the vmwarePlanSpec
2812	flattenVmwareDistributedVirtualSwitchSpec flattens the vmwarePlanSpec for the given object .
2813	expandBaseVmwareVlanSpec returns the base VmwareVlanSpec .
2814	flattenBaseVmwareVlanSpec recursively flatten vmware vmware vmwareVlanSpec
2815	expandDVSFailureCriteria returns a new DVSFailureCriteria
2816	flattenDVSFailureCriteria flattens a DVSFailureCriteria .
2817	expandVMUplinkUplinkPortOrderOrderPolicy expands a VMwareUplinkPortOrderPolicy
2818	flattenVMUplinkUplinkPortOrderOrderPolicy flattens a VMware UplinkUplinkPortOrderPolicy into an error .
2819	expandVmwareUplinkPortTeaguinkPolicy expands the vmware port .
2820	flattenVmwareUplinkPortEplinkPortEplinkPolicy flattens the VmwarePortEplink policy .
2821	expandDVSSecurityPolicy expands DVSSecurityPolicy .
2822	flattenDVSSecurityPolicy flattens a DVECurityPolicy .
2823	expandVMUplinkLacpPolicy expands a VMwareUplinkLacpPolicy .
2824	flattenVMUplinkLacpPolicy flattens a VMware UplinkUplinkLacpPolicy .
2825	expandDVSTRAfficPolicyIngressPolicyIngressPolicy creates a new DVSTRAfficPolicy .
2826	flattenDVSTRAfficPolicyIngressPolicyIngressPolicy creates a new DVSTRAfficPolicy .
2827	expandVMDVPortSetting expands a VMwareDVPort setting into a VMwareDVPortSetting .
2828	flattenVMDVSPortSetting flattens a VMwareDVSTort setting the value of a VMwareDVPortSetting .
2829	expandClusterDrsVMConfigInfo expands a ClusterDrsVmConfig .
2830	flattenClusterDrsVMConfigInfo flattens cluster drs vrs .
2831	resourceVSphereDRSVMOverrideParseIDParseID parses the given ID and returns the string representation of the id .
2832	resourceVSphereDRSOverrideFindEntry looks up the VSphere VRS configuration for the given VM .
2833	resourceVSpherePrefixAffinityRuleFlattenRuleFlatten is a helper function to flatten the value of the given key .
2834	schemaDatastoreSummary returns a map of schema data
2835	flattenDatastoreSummary flattens a datastore summary .
2836	resourceVSphereDatastorePath returns the path to the vSphere datastore .
2837	resourceVSphereDatastorePath reads a folder from a datastore .
2838	CdromSubresourceSchema returns a map of subresources
2839	NewCdromSubresource creates a new subresource
2840	CdromDiffOperation is a helper function to validate a subresource
2841	ValidateDiff validates the diff resource
2842	Create creates a new virtual device .
2843	Read reads a virtual device from a list of virtual devices .
2844	Update implements the VirtualDevice interface .
2845	Delete deletes a virtual device .
2846	mapCdrom converts a Cdrom to a Vdrom .
2847	VerifyVAppTransport verifies the VAppTransport .
2848	verifyVAppCdromIromIso verifies that the virtual device is valid .
2849	DatastorePathFromString returns a DatastorePath from a string .
2850	IsVmdkDatastorePath returns true if the given path is a VMDK .
2851	QueryDiskType returns the virtual disk type .
2852	Delete deletes a virtual disk
2853	spaultFault returns the soap fault .
2854	vimSoFault returns the VimFault of an error .
2855	taskFault returns the FaultFault if the error occurred .
2856	IsManagedObjectNotFound returns true if the given error is a ManagedObjectNotFoundError .
2857	isNotFoundError returns true if an error is not found .
2858	IsAnyNotFoundError returns true if an error occurred .
2859	IsResourceInUseError returns true if the given error is in use .
2860	isConcurrentAccessError returns true if an error occurred .
2861	RenameObject mocks base method
2862	vimVirtualCenterValidateVirtualCenter returns an error if the VM is virtual .
2863	parseVersion parses the version and builds a VSphereVersion .
2864	parseVersionFromInfo returns the VSphereVersion from the Info .
2865	ParseVersionFromClient returns VSphere version from client .
2866	String returns a string representation of VSphereVersion .
2867	ProductEqual returns true if vSphereVersion is equal .
2868	Old returns true if the VSphereVersion is older than the given version .
2869	Equal returns true if vSphereVersion is equal .
2870	expandClusterVMGroup expands a cluster VM group
2871	FlattenClusterVMGroup flattens a clusterVM group .
2872	resourceVSphereComputeGroupFindEntry finds a cluster vm group by name .
2873	resourceVSphereComputeClusterResourceFetchObjects fetches the cluster and name of the clusterVM .
2874	resourceVSphereResourcePoolApply adds tags to the resource pool .
2875	resourceVSphereResourcePoolReadTags reads the tags of a resource pool .
2876	expandClusterAffinityRuleSpec expands a cluster affinity rule
2877	FlattenClusterAffinityRuleSpec flattens a cluster affinity rule .
2878	resourceVSphereCompinityRuleFindEntry finds the cluster affinity rule for the given key .
2879	ConfigSchema returns a new schema .
2880	VirtualMachineCloneSchema returns a map of virtual machine names .
2881	Validate virtual machine clone
2882	validateCloneSnapshots validates snapshot snapshots
2883	ReferenceProperties returns the properties of a network .
2884	SystemOrDefault returns the default host system .
2885	Properties returns the properties of a HostSystem
2886	ResourcePool returns a resource pool
2887	hostSystemSystemNameFromID returns the name of the host system
2888	NameOrID returns the name of the host system
2889	Enter maintenance mode
2890	ExitMaintenanceMode shuts down the maintenance mode .
2891	DVSFromUUID retrieves a VVS from a UUID
2892	DVSFromPath returns a VMs from a path .
2893	dVSProperties retrieves the properties of a VMsware .
2894	UpgradeDVS upgrade DVS
2895	enableDVSNetworkResourceManagement is used to enable network resources .
2896	resourceVSphereDatastoreAffinityRuleFlattenRuleFlattenID returns the unique identifier for the given key .
2897	resourceVSphereDatastoreV1AffinityRuleFindEntry finds the cluster affinity rule for the given key .
2898	resourceVSphereDatastoreRuleFindEntryByName finds a cluster anti - affinity rule by name .
2899	resourceVSphereAffinityRuleFetchObjects fetches the storage pod for the given pod ID .
2900	controllerTypeToClass returns the type of a controller .
2901	Addr returns the address of the subresource .
2902	HasChange returns true if the given key has changed .
2903	GetChange implements the Subresource interface .
2904	GetWithRestart implements the Subresource interface .
2905	GetWithVeto retrieves a value from the subresource .
2906	SetRestart sets the Restart field s value .
2907	Hash returns the hash of the subresource .
2908	computeDevAddr computes the address of the device .
2909	splitDevAddr splits a subresource id into a subresource
2910	findVirtualDeviceSelectorSelectFunc returns true if the given controller is in the list controller .
2911	findVirtualDeviceSelectFunc returns a function that returns true if the controller is in the list .
2912	findControllerForDevice returns the controller for the given device .
2913	FindVirtualDeviceByAddr finds a virtual device by address .
2914	FindVirtualDevice finds a virtual device with the given address .
2915	String returns a string representation of the subresource .
2916	SwapSCIDevice swaps the specified device to the specified device .
2917	NormalizeSCSIBus normalizes a list of virtual devices .
2918	setSCSIBusSharing sets the SCSIBusSharing field s value .
2919	createSCSIController creates a new VirtualDeviceSpec
2920	ReadSCSIICusType reads the specified number of controllers from the given list .
2921	ReadSCSIIBusSharing reads the specified number of controllers .
2922	pickSCSIController picks the specified bus .
2923	ControllerForCreateUpdate implements the VirtualResource interface .
2924	applyDeviceChange implements the VirtualDeviceList interface .
2925	DeviceListString returns a string representation of a VirtualDeviceList .
2926	DeviceChangeString returns a string representation of a VirtualDeviceConfigSpec .
2927	subresourceListString returns a string representation of the subresource list
2928	scsiControllerList returns a string representation of a VirtualSCSI controller .
2929	AppendDeviceChangeSpec appends a list of changes to the specified list of ops .
2930	expandClusterDependencyRuleInfo expands ClusterDependencyRuleInfo .
2931	flattenClusterDependencyRuleInfo recursively flattens clusterDependencyRuleInfo .
2932	parseResourceVSphereCompencyRuleParseIDParseIDPependencyRuleParseID parses the given ID and key .
2933	resourceVSphereCompilationRuleFetchObjects fetches a cluster based on the given key .
2934	resourceVSphereDatastoreCluster creates a storage pod .
2935	resourceVSphereDatastoreClusterApplyTags applies the tags to the cluster .
2936	resourceVSphereDatastoreClusterReadTags retrieves the tags for a resource .
2937	resourceVSphereDatastoreClusterApplyCustomAttributes applies the custom attributes to the given resource .
2938	resourceVSphereDatastoreClusterReadCustomAttributes retrieves custom attributes from the given resource .
2939	resourceVSphereDatastConfig applies the SDRS configuration for the given resource .
2940	resourceVSphereDatastoreConfigChange returns true if the resource is a SDR config .
2941	resourceVSphereDatastoreGetPodCluster retrieves the storage pod for the given resource .
2942	resourceVSphereDatastoreClusterFromPath returns a storage pod for a given path .
2943	resourceVSphereDatastoreClusterName saves the name and path to the cluster .
2944	resourceVSphereDatastoreClusterChanges applies the name of the given resource .
2945	resourceVSphereDatastoreChange is used to move a folder to a folder
2946	resourceVSphereDatastoreClusterValidateValidateValidate ensures that the pod is empty .
2947	resourceVSphereDatastoreClusterDelete deletes a pod
2948	flatVSphereDatastoreDataFlatten is a helper function to flatten all the storage drs .
2949	expandStorageDrsPodConfigSpec expands a StorageDrsPodConfigSpec .
2950	flattenStorageDrsPodConfigInfo recursively flattens the storage drs . StorageDrs .
2951	expandStorageDrsAutomationConfig expands the storage drs configuration .
2952	flattenStorageDrsAutomationConfig flattens a StorageDrsAutomationConfig .
2953	expandStorageDrsLoadBalanceConfig expands the storage drs .
2954	flattenStorageDrsLoadBalanceConfig flattens the storage drs into a resource data structure .
2955	expandStorageDrsSpaceLoadBalanceConfig expands a StorageDrsSpaceConfig .
2956	flattenStorageDrsSpaceLoadBalanceConfig flattens the storageDrs configuration into a ResourceDrs .
2957	expandStorageDrsOptionSpec returns a slice of StorageDrsOptionSpec .
2958	flatten storage drs option
2959	resourceVSphereFolderMigrateState migrates a new instance of the VSphere folder
2960	resourceVSphereFolderMigrateState mocks base method
2961	getDatacenter returns a datacenter
2962	datacenterFromID returns a datacenter from the given ID .
2963	NewDiskSubresource creates a new Subresource
2964	DiskApplyOperation performs a delete operation on disk .
2965	deleteOperationDeleteOperation deletes an existing virtual device .
2966	applyApplyOperationCreateOperationCreateUpdate creates a new disk update operation .
2967	DiskMigrateRelocateRelocateRelocateOperation returns a slice of VirtualMachineRelocateSpec .
2968	DiskCloneRelocateRelocateOp returns a slice of VirtualMachineRelocateSpec .
2969	DiskImportOperation takes a list of devices and returns an error .
2970	ReadDiskAttrsForDataSource reads the disk attrs for the given number of disks .
2971	Create creates a VirtualDeviceConfigSpec .
2972	Read implements the VirtualDisk interface .
2973	Update implements the DiskSubresource interface .
2974	Delete deletes a virtual device .
2975	DiffExisting updates the existing disk .
2976	DiffGeneral checks if a DiskSubresource is a diff .
2977	Normalize disk datastore .
2978	Relocate implements the DiskSubresource interface .
2979	String returns a string representation of a DiskSubresource .
2980	expandDiskSettings expands the disk settings .
2981	createDisk creates a new VirtualDisk
2982	assignDisk assigns a disk to the virtual controller
2983	findControllerInfo finds the controller for a given disk .
2984	diskRelocateListList returns a string representation of a VirtualMachineRelocateSpec .
2985	diskRelocateString returns a string representation of a VirtualMachineRelocateSpec .
2986	Less returns true if the interface is less than the given index .
2987	Swap sorts the list of virtual devices .
2988	Less returns the sort of the virtual disk subresources
2989	Swap implements the SortSorter interface .
2990	datastorePathHasBase returns true if the path is a base path .
2991	findVirtualDisk finds the virtual device for the given list .
2992	diskCapacityInGb returns the number of bytes in the given disk .
2993	hostNetworkSystemFromHostSystem returns a HostNetworkSystem from a HostSystem
2994	hostNetworkSystemSystemFromHostSystemID retrieves a HostSystemSystemSystem from a host system .
2995	hostVSwitchFromName retrieves a HostVSwitch from a host .
2996	hostPortGroupFromName retrieves the hostport group from a host .
2997	networkObjectFromHostSystem retrieves a network object from a host system .
2998	resourceVSphere license update
2999	isKeyPresent returns true if the license key is present .
3000	UpdateLabel updates a license label .
3001	DecodeError decodes the license manager .
3002	resourceVSphereVSphereVContainerApply applies tags to VSphere VSphere VSphere VSphere VSphere VSphere VSphere VSphere VSphere VSphere VSphere VSphere .
3003	resourceVSphereVSphereVContainerReads reads the tags for a VSphere VSphere VSphere VSphere VSphere VSphere VSphere VSphere VSphere VSphere .
3004	expandClusterVMHostRuleInfo expands ClusterVmHostRuleInfo .
3005	flattenClusterVMHostRuleInfo flattens clusterVmHostRuleInfo .
3006	resourceVSphereVirtualMachineMigrateState is used to migrate VSphere virtual machine state .
3007	migrateVSphereVirtualMachineStateV3VersionV3 is used to migrate VSphere VirtualMachineState .
3008	NewEnvironmentBrowser returns a new EnvironmentBrowser instance
3009	DefaultDevices returns a list of virtual devices .
3010	OS family
3011	QueryConfigOptionDescriptor returns a list of virtual machine configurations .
3012	RootFromDatacenter returns the root path for the given datacenter .
3013	PathFromDatacenter creates a path from a datacenter
3014	SplitDatacenter parses a datacenter path .
3015	SplitRelativeFolder returns the relative path relative to the inventory .
3016	NewRootFromPath creates a new root path from the given inventory path
3017	datacenterSystemPathFromHostSystemID returns the path of the host system
3018	datastoreRootPathFromHostSystemID returns the root path of the host system
3019	validateDatastoreFolder validates the given folder .
3020	validateHostFolder validates a host
3021	validateVirtualMachineFolder validates a virtual machine
3022	validateNetworkFolder validates a network folder
3023	NormalizePath normalizes a path .
3024	MoveObjectTo mocks base method
3025	Properties returns the properties of a folder .
3026	FindType returns the type of the given folder .
3027	ToServerListQuery returns the query string as a query string .
3028	Index returns the index of the given string .
3029	Any returns true if the given list matches the given predicate .
3030	client returns a new http client
3031	lookupProject returns the project s project name .
3032	lookupZones returns a list of zones for a project .
3033	lookupAddrs returns a list of addresses for a given tag .
3034	New returns a new Discover instance
3035	WithUserAgent adds the user agent to the discover server .
3036	WithProviders adds the providers to the discover .
3037	Names returns the names of providers .
3038	Help returns the help string .
3039	Addrs returns a list of all available providers .
3040	String returns a string representation of the Config .
3041	PodAddrs returns a list of list of pod addresses .
3042	argsOrEnv returns the value of the given key .
3043	Addrs returns a list of addresses for the given provider .
3044	setLog sets the logger .
3045	DiscoverErr returns an error with the given format .
3046	valueOrEnv returns the value of the given key .
3047	newVSphereClient returns a new VSphereClient
3048	newVimSession creates a new VIM session
3049	newRestSession creates a new session .
3050	Addrs returns a list of addresses for the given provider .
3051	tagIDFromName retrieves the tag from the given name and category .
3052	tagCategoryByName retrieves a category by name .
3053	tagByName retrieves a tag by name .
3054	VirtualMachineIPsForTag returns the IP addresses for the given tag .
3055	virtualMachinesForTag returns a list of virtual machines for a tag .
3056	ipAddrsForVirtualMachines returns the list of IP addresses for the given virtual machine .
3057	virtualMachineFromMOID retrieves a virtual machine from the VM
3058	virtual machine properties
3059	buildAndSelectGuestIPs builds a list of IP addresses for the given VM .
3060	skipIPAddr returns true if the IP address is skipped .
3061	virtualMachineNames returns a list of virtual machine names .
3062	validateAndWrapHandler returns a handler that invokes the given handler .
3063	validateAndWrapHandlers returns a slice of handlers .
3064	NewWithLogger returns a new Macaron
3065	Handlers adds handlers to the middleware .
3066	Use adds a handler to the middleware .
3067	ServeHTTP implements the Macaron interface .
3068	SetURLPrefix sets the URL prefix
3069	SetConfig creates a new configuration file .
3070	String returns the string representation of the request body .
3071	RemoteAddr returns the remote address
3072	HTML renders a HTML template
3073	HTMLSet renders a set of HTML templates .
3074	Query returns the query parameter .
3075	QueryTrim removes a string from the query .
3076	QueryStrings returns a slice of query strings .
3077	QueryEscape returns escaped query string .
3078	QueryBool returns the value of a query parameter .
3079	QueryInt returns the value as int .
3080	QueryInt64 returns the int64 value as int64 .
3081	QueryFloat64 returns the float64 value as float64 .
3082	Set params
3083	GetFile returns a multipart file .
3084	SaveToFile saves a file to a file .
3085	GetCookie gets the cookie value from the request .
3086	GetCookieInt returns the value of a cookie .
3087	GetC cookie value
3088	GetCookieFloat64 gets a float64 value from cookie
3089	SetSecureCookie sets a cookie with the given name .
3090	GetSecureCookie returns the cookie with the given key .
3091	SetSuper secure cookie
3092	GetSuperSecureCookie returns the cookie with the given name .
3093	ServeContent implements the http . Handler interface .
3094	ServeFileContent is used to serve a file content
3095	ServeFile serves a file .
3096	ChangeStaticPath changes the static path to the static path .
3097	getNextWildcard returns the next wildcard matching pattern
3098	getRawPattern returns raw pattern from raw string
3099	URLPath returns the path of the leaf .
3100	NewRouteMap creates a new route map .
3101	getLeaf returns the leaf leaf for the given route .
3102	add adds a route to the map .
3103	Name adds a name to the router .
3104	handle adds a route to the router .
3105	Handle implements the Router interface .
3106	Combine returns a new ComboRouter .
3107	NotFound adds a handler to the router .
3108	InternalServerError registers the error handler for the given handlers .
3109	URLFor returns the URL for a named route .
3110	Name sets the name of the route
3111	NewResponseWriter returns a new ResponseWriter
3112	Logger returns a logger that logs the response .
3113	NewTplFile creates a new TplFile .
3114	NewTemplateFileSystem returns a new TemplateFileSystem .
3115	NewTemplateSet returns a new TemplateSet .
3116	GenerateETag generates the ETag for a file .
3117	Populates the given values with the given values .
3118	String returns a string representation of the object .
3119	Provide implements Graph .
3120	Populates the graph .
3121	Object returns a slice of objects .
3122	newPubSub creates a new PubSub .
3123	Stat implements PubSub interface .
3124	New returns a new App
3125	configure configures the application
3126	ParseConfig parses the config .
3127	ReloadConfig reloads the config
3128	Stop listeners
3129	MarshalText implements the Marshaler interface .
3130	UnmarshalText deserializes the offset from the given text .
3131	MarshalText implements the marshaler interface .
3132	UnmarshalText deserializes the protobuf protocol .
3133	UnmarshalText deserializes a Duration from a string .
3134	NewOptions returns a new Options instance
3135	Stat sends metrics to Kafka .
3136	New returns a new cache .
3137	SetMaxSize sets the maximum size of the cache .
3138	GetShard returns a Shard .
3139	Add adds a point to the cache .
3140	Pop removes a point from the cache .
3141	ParseCarbonlinkRequest parses a Carbonlink request .
3142	NewCarbonlinkListener returns a new CarbonlinkListener instance
3143	OnePoint creates a new point
3144	NowPoint creates a new point for a given metric .
3145	Copy returns a copy of the Points .
3146	ParseText parses a line .
3147	Eq returns true if two points are equal .
3148	Match returns a schema matching the given metric .
3149	Parse retention defs
3150	RestoreFromFile restores all points from a file .
3151	RestoreFromDir restores a dump from a dump directory .
3152	Restore restores data from the given path .
3153	Root is a helper for testing
3154	delete deletes the given key .
3155	NewWhisper creates a new Whisper
3156	NewWhisperAggregation creates a new WhisperAggregation .
3157	match matches the given metric
3158	oldPlain parses a plain text .
3159	UpdateIntegrationPD request
3160	Get integrationPD
3161	CreateIntegrationSlack creates a new integration .
3162	UpdateIntegrationSlack updates a Slack integration .
3163	GetIntegrationSlack request
3164	CreateIntegrationAWSCCount creates an IntegrationAWSccount
3165	GetIntegrationAWSCCount returns all integration AWS accounts
3166	DeleteIntegrationAWSCCount deletes an integration account .
3167	ListIntegrationGCP returns a list of IntegrationGCP objects
3168	CreateIntegrationGCP creates a new IntegrationGCP .
3169	UpdateIntegrationGCP updates an IntegrationGCP .
3170	DeleteIntegrationGCP deletes an IntegrationGCP .
3171	Get Dashboard list
3172	GetDashboardLists returns the list of dashboard lists .
3173	Create a dashboard list
3174	UpdateDashboardList updates a dashboard list .
3175	GetDashboardListItems returns a list of dashboard items .
3176	Snapshot returns a snapshot of the given query .
3177	Search hosts
3178	Search metrics
3179	Create an alert
3180	Update an alert
3181	GetAlert returns an alert .
3182	Get alerts
3183	Create a comment
3184	CreateRelatedComment creates a new comment
3185	Edit comment
3186	Create a monitor
3187	UpdateMonitor updates a monitor .
3188	Get a monitor
3189	Get monitors by name
3190	Get monitors by tags
3191	GetMonitors returns a list of Monitors
3192	GetSyntheticsLocations returns a list of Synthetics locations .
3193	GetBool returns the value of the given bool .
3194	GetIntOkOk returns the int value if it is nil .
3195	GetStringOkOk returns the value of the string if it is nil .
3196	GetJsonNumberOk returns the value of the given JSON .
3197	GetPrecision returns the precision of the given precision .
3198	GetStringId converts an id to a string .
3199	GetDashboard returns a dashboard .
3200	GetDashboards returns a list of all dashboards
3201	Create a dashboard
3202	UpdateDashboard updates the dashboard .
3203	InviteUsers mocks base method
3204	CreateUser creates a new user .
3205	GetUsers returns a list of users
3206	GetUser gets a user by handle
3207	UpdateUser updates a user .
3208	DeleteUser deletes a user .
3209	Get board
3210	DeleteBoard deletes a board .
3211	Create a board .
3212	UpdateBoard updates a board .
3213	NewClient returns a new client
3214	SetKeys sets the API key .
3215	Validate checks if the client is valid
3216	MuteHost mute a host
3217	UnmuteHost mocks base method
3218	GetSilenced sets the Silenced field s value .
3219	GetSilencedOkOk returns true if the alert is enabled .
3220	HasSilenced returns true if the alert is silenced .
3221	GetState returns the state of alert .
3222	GetStateOk returns the state of alert
3223	HasState returns true if the alert has been set .
3224	GetAlertIdOk returns the AlertIdOk field if it s non - nil zero value otherwise .
3225	GetKey returns the key of the API key .
3226	GetKeyOk returns the key of the API key .
3227	HasKey returns true if the API key has a key .
3228	GetFacetOk returns the FacetOk field if it s non - nil zero value otherwise .
3229	GetOrder returns the OrderBySort field if it s non - nil zero value otherwise .
3230	GetOrderOk returns the OrderOk field if it s non - nil zero value otherwise .
3231	HasOrder sets the OrderBySort field s value .
3232	GetAuthorHandle returns the AuthorHandle field s value .
3233	GetAuthorHandleOk returns the AuthorHandleOk field if it s non - nil zero value otherwise .
3234	HasAuthorHandle returns true if the board has author handle .
3235	GetIsReadOnly returns true if the Board is readOnly .
3236	GetIsReadOnlyOk returns true if the board is read only .
3237	HasIsReadOnly returns true if the board is readOnly .
3238	GetLayout returns the layout of the board .
3239	GetLayoutOk returns the layout of the board .
3240	HasLayout returns true if the board has layout .
3241	GetShowPresent returns the ShowPresent field if it s non - nil zero value otherwise .
3242	GetShowPresentOk returns true if the change is present .
3243	HasShowPresent returns true if the change is present .
3244	GetChannelName returns the ChannelName field s value .
3245	GetChannelNameOk returns the channelNameOk field if it s non - nil zero value otherwise .
3246	HasChannelName returns true if the channel has a channel name .
3247	GetTransferAllUserComments returns the TransferAllUserComments field s value .
3248	GetTransferAllUserCommentsOk returns the TransferAllUserCommentsOk field s value .
3249	HasTransferAllUserComments returns true if the receiver has a TransferAllUserComments field .
3250	GetHostName returns the host name .
3251	GetHostNameOk returns the host name of the check .
3252	HasHostName returns true if the check is a host name .
3253	GetTimestamp returns the timestamp of the check .
3254	GetTimestampOk returns the timestamp of the check .
3255	HasTimestamp returns true if the check is a timestamp .
3256	GetRelatedId returns the RelatedId field if it s non - nil zero value otherwise .
3257	GetRelatedIdOk returns the related ID of the related Comment
3258	HasRelatedId returns true if the comment has related ID .
3259	GetImageURL returns the ImageURL field if it s non - nil zero value otherwise .
3260	GetImageURLOk returns the ImageURLOk field if it s non - nil zero value otherwise .
3261	HasImageURL returns true if the condition is set .
3262	GetInvert returns the Invert field if it s non - nil zero value otherwise .
3263	GetInvertOk returns true if the condition is set .
3264	HasInvert returns true if the condition has been set .
3265	GetIcon returns the Icon field s value .
3266	GetIconOk returns the IconOk field if it s non - nil zero value otherwise .
3267	HasIcon returns true if the user has an icon .
3268	GetCustomImageUrl returns the CustomImageUrl field if it s non - nil zero value otherwise .
3269	GetCustomImageUrlOk returns the CustomImageUrlOk field if it s non - nil zero value otherwise .
3270	HasCustomImageUrl sets the CustomImageUrl field if it s non - nil zero value otherwise .
3271	GetInverted sets the Inverted field s value .
3272	GetInvertedOk returns true if the DashboardConditionalFormat is enabled .
3273	HasInverted returns true if the DashboardConditionalFormat is true .
3274	GetDashboardCount returns the DashboardCount field s value .
3275	GetDashboardCountOk returns the DashboardCount field if it s non - nil zero value otherwise .
3276	HasDashboardCount returns true if the dashboard has a dashboard count .
3277	GetModified returns the Modified field s value .
3278	GetModifiedOk returns the modified status of the Dashboard .
3279	HasModified returns true if the dashboard is modified .
3280	GetActive returns true if the downtime is active .
3281	GetActiveOk returns true if the state is active .
3282	HasActive returns true if the Downtime is active .
3283	GetCanceled returns the canceled time .
3284	GetCanceledOk returns true if the delta is canceled .
3285	HasCanceled returns true if the duration has been canceled .
3286	GetMonitorId returns the MonitorId field s value .
3287	GetMonitorIdOk returns the MonitorId ok .
3288	HasMonitorId sets the MonitorId field s value .
3289	GetParentId returns the parent id .
3290	GetParentIdOk returns the parent id if it s non - nil zero value otherwise .
3291	HasParentId returns true if the Downtime has parentId .
3292	GetRecurrence returns the recurrence .
3293	GetRecurrenceOk returns the recurrence of this Downtime .
3294	HasRecurrence returns true if the delta is a recurrence .
3295	GetTimezone returns the timezone
3296	GetTimezoneOk returns the timezone ok
3297	HasTimezone checks if the timezone has a timezone .
3298	GetAlertType returns the AlertType field if it s non - nil zero value otherwise .
3299	GetAlertTypeOk returns the alert type of the event .
3300	HasAlertType returns true if the event is a alert type .
3301	GetEventType returns the EventType field s value .
3302	GetEventTypeOk returns the event type of the event type
3303	HasEventType returns true if the event has an event type .
3304	GetPriority returns the priority of the event .
3305	GetPriorityOk returns the priority of the event .
3306	HasPriority returns true if the event is a Priority .
3307	GetSourceType returns the SourceType field if it s non - nil zero value otherwise .
3308	GetSourceTypeOk returns the SourceTypeOk field if it s non - nil zero value otherwise .
3309	HasSourceType returns true if the event is a source type .
3310	GetDefinition returns the definition of the Graph .
3311	GetDefinitionOk returns the definition of the graph .
3312	HasDefinition returns true if the graph has a definition .
3313	GetIncludeNoMetricHosts returns true if the graph is included .
3314	GetIncludeNoMetricsOksOksOksOks returns true if the graph is not included in the graph .
3315	HasIncludeNoMetricHosts returns true if the graph is not included .
3316	GetIncludeUngroupedHosts returns true if the graph is included .
3317	GetIncludeUngroupedHostsOksOksOks returns true if the graph is not included .
3318	HasIncludeUngroupedHosts returns true if the graph is not included .
3319	GetVal returns the value of the GraphDefinitionMarker .
3320	GetValOk returns the value of the GraphDefinitionMarker .
3321	HasVal returns true if the graph definition has a valid value .
3322	GetOrderDirection returns the OrderDirection field s value .
3323	GetOrderDirectionOk returns the OrderDirectionOk field if it s non - nil zero value otherwise .
3324	HasOrderDirection sets the OrderDirection field s value .
3325	GetStacked sets the Stacked field s value .
3326	GetStackedOk returns true if the GraphDefinitionRequest is set .
3327	HasStacked returns true if the GraphDefinitionRequest has been set .
3328	GetLastNoData sets the LastNoDataTs field s value .
3329	GetLastNoDataOk returns the LastNoDataOk if it s non - nil zero value otherwise .
3330	HasLastNoData sets the LastNoDataTs field s value .
3331	GetLastNotifiedTs returns the LastNotifiedTs field if it s non - nil zero value otherwise .
3332	GetLastNotifiedTsOk returns the LastNotifiedTsOk field if it s non - nil zero value otherwise .
3333	HasLastNotifiedTs returns true if the group has not been set .
3334	GetLastResolvedTs returns the LastResolvedTs field if it s non - nil zero value otherwise .
3335	GetLastResolvedTsOk returns the LastResolvedTsOk field if it s non - nil zero value otherwise .
3336	HasLastResolvedTs returns true if the group has been resolved .
3337	GetLastTriggeredTs returns the LastTriggeredTs field if it s non - nil zero value otherwise .
3338	GetLastTriggeredTsOk returns the LastTriggeredTsOk field if it s non - nil zero value otherwise .
3339	HasLastTriggeredTimgered sets the LastTriggeredTs field s value .
3340	GetTriggeringValue returns the TriggeringValue field if it s non - nil zero value otherwise .
3341	GetTriggeringValueOk returns the TriggeringValueOk field if it s non - nil zero value otherwise .
3342	HasTriggeringValue sets the TriggeringValue field s value .
3343	GetEndTime returns the EndTime field s value .
3344	GetEndTimeOk returns the EndTimeOk field if it s non - nil zero value otherwise .
3345	HasEndTime sets the EndTime field s value .
3346	GetOverride returns the Override field if it s non - nil zero value otherwise .
3347	GetOverrideOk returns true if the override is ok .
3348	HasOverride returns true if the HostActionMute has an override .
3349	GetFill returns the Fill field s value .
3350	GetFillOk returns the FillfulRequest field if it s non - nil zero value otherwise .
3351	HasFill returns true if the request has fill .
3352	GetSize returns the size of the HostmapRequest
3353	GetSizeOk returns the size of the HostmapRequest
3354	HasSize returns true if the hostmap request has size .
3355	GetRoleNameOk returns the RoleNameOk field if it s non - nil zero value otherwise .
3356	GetAccountIDOk returns the AccountIDOk field if it s non - nil zero value otherwise .
3357	GetAuthProviderX509CertURLURL returns the AuthProviderX509CertURL field s value .
3358	GetAuthProviderX509CertURLOk returns the AuthProviderX509CertURL field if it s non - nil zero value otherwise .
3359	HasAuthProviderX509CertificateCertURL sets the AuthProviderX509CertURLURL field s value .
3360	GetAuthURI returns the AuthURI field if it s non - nil zero value otherwise .
3361	GetAuthURIk returns the AuthURI field if it s non - nil zero value otherwise .
3362	HasAuthURI sets the AuthURI field s value .
3363	GetClientID returns the ClientID field s value .
3364	GetClientIDOk returns the ClientIDOk field if it s non - nil zero value otherwise .
3365	HasClientID sets the ClientID field s value .
3366	GetClientX509CertURL returns the ClientX509CertURL field s value .
3367	GetClientX509CertURLOk returns the ClientX509CertURLOk field s value .
3368	HasClientX509CertURLURL sets the ClientX509CertURL field s value .
3369	GetHostFiltersOk sets the HostFilters field s value .
3370	GetPrivateKey returns the PrivateKey field s value .
3371	GetPrivateKeyOk returns the PrivateKeyOk field if it s non - nil zero value otherwise .
3372	HasPrivateKey returns true if the integration has a private key .
3373	GetPrivateKeyID returns the PrivateKeyID field s value .
3374	GetPrivateKeyIDOk returns the PrivateKeyIDOk field if it s non - nil zero value otherwise .
3375	HasPrivateKeyID returns true if the IntegrationKeyID field is set .
3376	GetTokenURI returns the TokenURI field if it s non - nil zero value otherwise .
3377	GetTokenURI returns the token uri for this Integration .
3378	HasTokenURI sets the TokenURI field if it s non - nil zero value otherwise .
3379	GetClientEmailOk returns the ClientEmailOk field s value .
3380	GetProjectIDOk returns the ProjectIDOk field if it s non - nil zero value otherwise .
3381	GetAPITokenOk returns the APIToken ok .
3382	GetSubdomainOk returns the subdomain of the integration .
3383	GetID returns the ID of the LogSet .
3384	GetIDOk returns the ID of the LogSet
3385	HasID returns true if the LogSet has a ID .
3386	GetPerUnit returns the PerUnit field if it s non - nil zero value otherwise .
3387	GetPerUnitOk returns the PerUnitOk field if it s non - nil zero value otherwise .
3388	HasPerUnit returns true if the MetricMetadata has a per unit .
3389	GetShortName returns the ShortName field if it s non - nil zero value otherwise .
3390	GetShortNameOk returns the ShortNameOk field if it s non - nil zero value otherwise .
3391	HasShortName returns true if the metric has a short name .
3392	GetStatsdInterval returns the statsd interval .
3393	GetStatsdIntervalOk returns the statsd interval of the metric .
3394	HasStatsdInterval sets the StatsdInterval field s value .
3395	GetOverallState returns the OverallState field s value .
3396	GetOverallStateOk returns the overall state of the monitor .
3397	HasOverallState returns true if the monitor has the overall state .
3398	GetOverallStateModified returns the OverallStateModified field if it s non - nil zero value otherwise .
3399	GetOverallStateModifiedOk returns the OverallStateModified field if it s non - nil zero value otherwise .
3400	HasOverallStateModified returns true if the Monitor was modified .
3401	GetBackgroundColor returns the BackgroundColor field if it s non - nil zero value otherwise .
3402	GetBackgroundColorOk returns the background color of the note definition .
3403	HasBackgroundColor sets the BackgroundColor field s value .
3404	GetContent returns the content of the note definition .
3405	GetContentOk returns the content of the note definition .
3406	HasContent returns true if the note definition has content .
3407	GetShowTick sets the ShowTick field s value .
3408	GetShowTickOk returns the ShowTickOk field if it s non - nil zero value otherwise .
3409	HasShowTick sets the ShowTick field s value .
3410	GetEnableLogsSample sets the EnableLogsSample field s value .
3411	GetEnableLogsSampleOk returns true if the options are enabled .
3412	HasEnableLogsSample returns true if the options are enabled .
3413	GetEscalationMessage returns the EscalationMessage field s value .
3414	GetEscalationMessageOk returns the EscalationMessageOk field if it s non - nil zero value otherwise .
3415	HasEscalationMessage sets the EscalationMessage field s value .
3416	GetEvaluationDelay sets the EvaluationDelay field s value .
3417	GetEvaluationDelayOk returns the evaluation delay if it s non - nil zero value otherwise .
3418	HasEvaluationDelay sets the EvaluationDelay field s value .
3419	GetIncludeTags returns the IncludeTags field if it s non - nil zero value otherwise .
3420	GetIncludeTagsOk returns true if the options are included .
3421	HasIncludeTags returns true if the options are included .
3422	GetLocked sets the Locked field s value .
3423	GetLockedOk returns true if the option is locked .
3424	HasLocked returns true if the options are locked .
3425	GetNewHostDelay sets the NewHostDelay field s value .
3426	GetNewHostDelayOk returns the NewHostDelay option if it s non - nil zero value otherwise .
3427	HasNewHostDelay sets the NewHostDelay field s value .
3428	GetNotifyAudit sets the NotifyAudit field s value .
3429	GetNotifyAuditOk returns true if the options are set .
3430	HasNotifyAudit sets the NotifyAudit field s value .
3431	GetQueryConfig returns the QueryConfig field if it s non - nil zero value otherwise .
3432	GetQueryConfigOk returns the query config .
3433	HasQueryConfig returns true if the options are set .
3434	GetRenotifyInterval sets the RenotifyInterval field s value .
3435	GetRenotifyIntervalOk returns the value of RenotifyInterval .
3436	HasRenotifyInterval sets the RenotifyInterval field s value .
3437	GetRequireFullWindow returns true if the options are set .
3438	GetRequireFullWindowOk returns true if the options are set .
3439	HasRequireFullWindow returns true if the options are required .
3440	GetThresholds returns the Thresholds field if it s non - nil zero value otherwise .
3441	GetThresholdsOk returns the ThresholdCount field if it s non - nil zero value otherwise .
3442	HasThresholds returns true if the options are set .
3443	GetThresholdWindows returns the ThresholdWindows field if it s non - nil zero value otherwise .
3444	GetThresholdWindowsOk returns the ThresholdWindowsOk if it s non - nil zero value otherwise .
3445	HasThresholdWindows returns true if the options are set .
3446	GetTimeoutH returns the TimeH field s value .
3447	GetTimeoutHOK returns the timeout if it s non - nil zero value otherwise .
3448	HasTimeoutH returns true if the option has a timeout .
3449	GetSeconds returns the seconds field if it s non - nil zero value otherwise .
3450	GetSecondsOk returns the seconds field if it s non - nil zero value otherwise .
3451	HasSeconds returns true if the period has been set .
3452	GetLogSet returns the LogSet .
3453	GetLogSetOk returns the LogSetOk if it is nil .
3454	HasLogSet returns true if the query is set .
3455	GetQueryIsFailed returns true if the query has failed .
3456	GetQueryIsFailedOk returns true if the query is failed .
3457	HasQueryIsFailed returns true if the query has failed .
3458	GetQueryString returns the query string .
3459	GetQueryStringOk returns the query string if it s non - nil zero value otherwise .
3460	HasQueryString returns true if the query has a query string .
3461	GetTimeRange returns the TimeRange field if it s non - nil zero value otherwise .
3462	GetTimeRangeOk returns the TimeRangeOk if it s non - nil zero value otherwise .
3463	HasTimeRange returns true if the query has a time range .
3464	GetUntilDate returns the UntilDate field s value .
3465	GetUntilDateOk returns the UntilDateOk field if it s non - nil zero value otherwise .
3466	HasUntilDate returns true if this recurrence is a valid date .
3467	GetUntilOccurrences sets the UntilOccurrences field s value .
3468	GetUntilOccurrencesOk returns the NumberOccurrences ok .
3469	HasUntilOccurrences returns true if the recurrence occurs .
3470	GetAPIKey returns the API key .
3471	GetAPIKeyOk returns the API key for this request .
3472	HasAPIKey returns true if the request has an API key .
3473	GetComment returns the comment .
3474	GetCommentOk returns the comment ok .
3475	HasComment returns true if the request has a comment .
3476	GetDashboard returns the Dashboard .
3477	GetDashboardOk returns the Dashboard ok .
3478	HasDashboard returns true if the request has a dashboard .
3479	GetEvent returns the current event .
3480	GetEventOk returns the event ok
3481	HasEvent returns true if the request has an event .
3482	GetTags returns the tags for this request .
3483	GetTagsOk returns the tag map for this request .
3484	HasTags returns true if the request has tags .
3485	GetThreshold returns the Threshold field if it s non - nil zero value otherwise .
3486	GetThresholdOk returns the threshold of the rule .
3487	HasThreshold returns true if the rule has a threshold .
3488	GetXaxis returns the Xaxis axis .
3489	GetXaxisOk returns the xaxis axis if it s non - nil zero value otherwise .
3490	HasXaxis sets the Xaxis field s value .
3491	GetShared returns true if the screen is shared .
3492	GetSharedOk returns true if the screen is shared .
3493	HasShared returns true if the screen is shared .
3494	GetAggr returns the Aggr field s value .
3495	GetAggrOk returns the AggrOk field if it s non - nil zero value otherwise .
3496	HasAggr returns true if the series contains Aggr .
3497	GetDisplayNameOk returns the DisplayNameOk field if it s non - nil zero value otherwise .
3498	GetLength returns the length of the series .
3499	GetLengthOk returns the length of the series .
3500	HasLength returns true if the series has length .
3501	GetScope returns the Scope field s value .
3502	GetScopeOk returns the scope of the series
3503	HasScope returns true if the series has a scope .
3504	GetUnits returns the units of the series .
3505	GetUnitsOk returns the units of the series .
3506	HasUnits returns true if the series has units .
3507	GetServiceKeyOk returns the ServiceKeyOk field if it s non - nil zero value otherwise .
3508	GetOperator returns the operator field s value .
3509	GetOperatorOk returns the operator ok .
3510	HasOperator returns true if the assertion has operator .
3511	GetProperty returns the Property field s value .
3512	GetPropertyOk returns the PropertyOk field if it s non - nil zero value otherwise .
3513	HasProperty returns true if the SyntheticsAssertion has a property .
3514	GetRequest returns the SyntheticsRequest field s value .
3515	GetRequestOk returns the SyntheticsRequest field if it s non - nil zero value otherwise .
3516	HasRequest returns true if the request has a request .
3517	GetIsMobile sets the IsMobile field s value .
3518	GetIsMobileOk returns true if the device is mobile .
3519	HasMobile returns true if the device is mobile .
3520	GetUserAgent returns the UserAgent field s value .
3521	GetUserAgentOk returns the UserAgentOk field s value .
3522	HasUserAgent sets the UserAgent field s value .
3523	GetRegion returns the Region field s value .
3524	GetRegionOk returns the RegionOk field s value .
3525	HasRegion sets the Region field s value .
3526	GetFollowRedirects sets the FollowRedirects field s value .
3527	GetFollowRedirectsOk sets the FollowRedirectsOks field s value .
3528	HasFollowRedirects returns true if the OPTIONS option is set .
3529	GetMinFailureDuration returns the MinFailureDuration field s value .
3530	GetMinFailureDurationOk returns the MinFailureDurationOk field if it s non - nil zero value otherwise .
3531	HasMinFailureDuration sets the MinFailureDuration field s value .
3532	GetMinLocationFailed sets the MinLocationFailed field s value .
3533	GetMinLocationFailed sets the MinLocationFailed field s value .
3534	HasMinLocationFailed sets the MinLocationFailed field s value .
3535	GetTickEvery returns the TickEvery field s value .
3536	GetTickEveryOk returns the tick if it s non - nil zero value otherwise .
3537	HasTickEvery sets the TickEvery field s value .
3538	GetBody returns the Body field s value .
3539	GetBodyOk returns the body of the SyntheticsRequest
3540	HasBody returns true if the request has body body .
3541	GetMethod returns the Method field s value .
3542	GetMethodOk returns the MethodOk field s value .
3543	HasMethod returns true if the SyntheticsRequest has been set .
3544	GetTimeout returns the Timeout field s value .
3545	GetTimeoutOkOk returns the TimeoutOk field if it s non - nil zero value otherwise .
3546	HasTimeout returns true if the request has a timeout .
3547	GetConfig returns the SyntheticsConfig field if it s non - nil zero value otherwise .
3548	GetConfigOk returns the SyntheticsConfig field if it s non - nil zero value otherwise .
3549	HasConfig returns true if the test is set .
3550	GetDeletedAt returns the DeletedAt field s value .
3551	GetDeletedAtOk returns the DeletedAtOk field s value .
3552	HasDeletedAt sets the DeletedAt field s value .
3553	GetModifiedBy returns the ModifiedBy field s value .
3554	GetModifiedByOk returns the ModifiedBy field if it s non - nil zero value otherwise .
3555	HasModifiedBy sets the ModifiedBy field s value .
3556	GetMonitorStatus returns the MonitorStatus field s value .
3557	GetMonitorStatusOk returns the MonitorStatusOk field if it s non - nil zero value otherwise .
3558	HasMonitorStatus returns true if the test status is enabled .
3559	GetPublicId returns the publicId field if it s non - nil zero value otherwise .
3560	GetPublicIdOk returns the PublicIdOk field if it s non - nil zero value otherwise .
3561	HasPublicId returns true if the test is public .
3562	GetDefault returns the default value for the template variable .
3563	GetDefaultOk returns the default value of the template variable
3564	HasDefault returns true if the template variable has a default value .
3565	GetPrefix returns the prefix of the template variable .
3566	GetPrefixOk returns the prefix of the template variable
3567	HasPrefix returns true if the template variable has a prefix .
3568	GetCritical returns the Critical field if it s non - nil zero value otherwise .
3569	GetCriticalOk returns the CriticalOk field if it s non - nil zero value otherwise .
3570	HasCritical returns true if the threshold is critical .
3571	GetCriticalRecovery returns the CriticalRecovery field if it s non - nil zero value otherwise .
3572	GetCriticalRecoveryOk returns the CriticalRecoveryOk field if it s non - nil zero value otherwise .
3573	HasCriticalRecovery returns true if the threshold is critical .
3574	GetOk returns the Ok field if it s non - nil zero value otherwise .
3575	GetOkOk returns the OkOk field if it s non - nil zero value otherwise .
3576	HasOk returns true if the threshold is ok .
3577	GetTimeAggregator returns the TimeAggregator field s value .
3578	GetTimeAggregatorOk returns the TimeAggregatorOk field if it s non - nil zero value otherwise .
3579	HasTimeAggregator sets the TimeAggregator field s value .
3580	GetUnknown returns the Unknown field s value .
3581	GetUnknownOk returns the unknown value of UnknownThreshold
3582	HasUnknown returns true if the threshold is unknown .
3583	GetWarning returns the warning value .
3584	GetWarningOk ok
3585	HasWarning returns true if the threshold has a warning .
3586	GetWarningRecovery returns the WarningRecovery field if it s non - nil zero value otherwise .
3587	GetWarningRecoveryOk returns the warning if it s non - nil zero value otherwise .
3588	HasWarningRecovery returns true if the threshold has a warning .
3589	GetRecoveryWindow returns the RecoveryWindow field s value .
3590	GetRecoveryWindowOk returns the recovery window ok .
3591	HasRecoveryWindow returns true if the threshold is a recovery window .
3592	GetTriggerWindow returns the TriggerWindow field s value .
3593	GetTriggerWindowOk returns the TriggerWindowOk field if it s non - nil zero value otherwise .
3594	HasTriggerWindow returns true if the threshold window has a trigger window .
3595	GetQueryType returns the QueryType field if it s non - nil zero value otherwise .
3596	GetQueryTypeOk returns the QueryTypeOk field if it s non - nil zero value otherwise .
3597	HasQueryType returns true if the tile definition has a query type .
3598	GetTextFilter returns the TextFilter field if it s non - nil zero value otherwise .
3599	GetTextFilterOk returns the TextFilterOk field if it s non - nil zero value otherwise .
3600	HasTextFilter sets the TextFilter field s value .
3601	GetFrom returns the From field s value .
3602	GetFromOk returns the date from the time range .
3603	HasFrom returns true if the time range has been set .
3604	GetLive returns true if the time range is live .
3605	GetLiveOk returns true if the time range is live .
3606	HasLive returns true if the time range is live .
3607	GetTo returns the To field s value .
3608	GetToOk returns the value of the TimeRange .
3609	HasTo returns true if the time range contains the given time range .
3610	GetShowLegend returns the ShowLegend field if it s non - nil zero value otherwise .
3611	GetShowLegendOk returns the ShowLegendOk flag if it s non - nil zero value otherwise .
3612	HasShowLegend sets the ShowLegend field s value .
3613	GetLineType returns the LineType field if it s non - nil zero value otherwise .
3614	GetLineTypeOk returns the LineTypeOk field if it s non - nil zero value otherwise .
3615	HasLineType returns true if t is a line type .
3616	GetLineWidth returns the line width .
3617	GetLineWidthOk returns the line width .
3618	HasLineWidth returns true if the line width is set .
3619	GetNewStatus returns the NewStatus field if it s non - nil zero value otherwise .
3620	GetNewStatusOk returns the status of the ToggleStatusOk
3621	HasNewStatus returns true if the ToggleStatus has been set .
3622	GetService returns the service s value .
3623	GetServiceOk returns the service ok .
3624	HasService returns true if the trace definition has a service .
3625	GetShowBreakdown sets the ShowBreakdown field s value .
3626	GetShowBreakdownOk gets the ShowBreakdownOk field s value .
3627	HasShowBreakdown sets the ShowBreakdown field s value .
3628	GetShowDistribution sets the ShowDistribution field s value .
3629	GetShowDistributionOk gets the ShowDistributionOk field s value .
3630	HasShowDistribution sets the ShowDistribution field s value .
3631	GetShowErrors returns the ShowErrors field if it s non - nil zero value otherwise .
3632	GetShowErrorsOk returns true if the trace definition is ok .
3633	HasShowErrors returns true if the service has showErrors .
3634	GetShowHits sets the ShowHits field s value .
3635	GetShowHitsOk gets the ShowHitsOk field s value .
3636	HasShowHits returns true if the service has showHits .
3637	GetShowLatency sets the ShowLatency field s value .
3638	GetShowLatencyOk returns the ShowLatencyOk field if it s non - nil zero value otherwise .
3639	HasShowLatency sets the ShowLatency field s value .
3640	GetShowResourceList retrieves the ShowResourceList field s value .
3641	GetShowResourceListOk gets the ShowResourceListOk field s value .
3642	HasShowResourceList sets the ShowResourceList field s value .
3643	GetSizeFormat returns the SizeFormat field if it s non - nil zero value otherwise .
3644	GetSizeFormatOk returns the SizeFormatOk field if it s non - nil zero value otherwise .
3645	HasSizeFormat sets the SizeFormat field s value .
3646	GetSpanName returns the SpanName field if it s non - nil zero value otherwise .
3647	GetSpanNameOk returns the SpanNameOk field if it s non - nil zero value otherwise .
3648	HasSpanName returns true if the trace service has a span name .
3649	GetFromTs returns the FromTs field s value .
3650	GetFromTsOk returns the FromTsOk field if it s non - nil zero value otherwise .
3651	HasFromTs returns true if the trigger has a FromTs value .
3652	GetToTs returns the ToTs field if it s non - nil zero value otherwise .
3653	GetToTsOk returns the ToTsOk field if it s non - nil zero value otherwise .
3654	HasToTs returns true if the trigger is a ToTsValue .
3655	GetAlertID returns the AlertID field s value .
3656	GetAlertIDOk returns the alert ID of the Widget
3657	HasAlertID returns true if the widget has an alert ID .
3658	GetAutoRefresh returns the autoRefresh field if it s non - nil zero value otherwise .
3659	GetAutoRefreshOk returns true if the widget is enabled .
3660	HasAutoRefresh returns true if the widget has autoRefresh .
3661	GetBgcolor returns the background color
3662	GetBgcolorOk ok
3663	HasBgcolor returns true if the widget has bgcolor
3664	GetColumns returns the column s columns .
3665	GetColumnsOk returns the column s column name .
3666	HasColumns returns true if the widget has columns .
3667	GetHTML returns the HTML of the Widget .
3668	GetHTMLOk returns the HTML of the Widget
3669	HasHTML returns true if the Widget has HTML
3670	GetLayoutVersion returns the layout version of the Widget .
3671	GetLayoutVersionOk returns the layout version of the widget
3672	HasLayoutVersion returns true if the widget has layout version .
3673	GetLegend returns the legend field if it s non - nil zero value otherwise .
3674	GetLegendOk returns true if the Widget has been set .
3675	HasLegend returns true if the widget has a legend .
3676	GetManageStatusShowTitle returns the ManageStatusShowTitle field if it s non - nil zero value otherwise .
3677	GetManageStatusShowTitleOk returns the ManageStatusShowTitle of the Widget
3678	HasManageStatusShowTitle sets the ManageStatusShowTitle field s value .
3679	GetManageStatusTitleAlign sets the ManageStatusTitleAlign field s value .
3680	GetManageStatusTitleAlignOk returns the value of the ManageStatusTitleAlignTitleAlignTitleAlign option .
3681	HasManageStatusTitleAlign sets the ManageStatusTitleAlign field s value .
3682	GetManageStatusTitleSize returns the ManageStatusTitleSize field s value .
3683	GetManageStatusTitleOk returns the ManageStatusTitleOk field if it s non - nil zero value otherwise .
3684	HasManageStatusTitleTitleSize returns true if the widget has been set .
3685	GetManageStatusTitleText returns the ManageStatusTitleText field .
3686	GetManageStatusTitleOk returns the ManageStatusTitleText field if it s non - nil zero value otherwise .
3687	HasManageStatusTitleText sets the ManageStatusTitleText field s value .
3688	GetMonitor returns the screenboard monitor .
3689	GetMonitorOkOk returns the screenboard if it is nil .
3690	HasMonitor returns true if the widget has a Monitor .
3691	GetMustShowShowdown returns the MustShowBreakdown field if it s non - nil zero value otherwise .
3692	GetMustShowShowBreakdownOk returns true if the widget has been shown .
3693	HasMustShowShowdown returns true if the widget has been set .
3694	GetMustShowDistribution returns the MustShowDistribution field if it s non - nil zero value otherwise .
3695	GetMustShowDistributionOk returns true if the Widget is enabled .
3696	HasMustShowDistribution returns true if the widget has been set .
3697	GetMustShowErrors returns the MustShowErrors field if it s non - nil zero value otherwise .
3698	GetMustShowErrorsOk returns true if the widget has been set .
3699	HasMustShowErrors returns true if the widget has occurred .
3700	GetMustShowHits returns the MustShowHits field if it s non - nil zero value otherwise .
3701	GetMustShowHitsOk returns true if the widget has been set .
3702	HasMustShowHits returns true if the widget has been set .
3703	GetMustShowLatency returns the MustShowLatency field if it s non - nil zero value otherwise .
3704	GetMustShowLatencyOk returns true if the Widget is enabled .
3705	HasMustShowLatency returns true if the Widget has been set .
3706	GetMustShowResourceList returns the MustShowResourceList field if it s non - nil zero value otherwise .
3707	GetMustShowResourceListOk returns true if the WidgetList is ok .
3708	HasMustShowResourceList returns true if the widget has a resource list .
3709	GetParams returns the params
3710	GetParamsOk returns the params for the widget
3711	HasParams returns true if the widget has params
3712	GetServiceService returns the service service service .
3713	GetServiceServiceServiceOk returns the service service service .
3714	HasServiceService returns true if the widget has service service service .
3715	GetSizeVersion returns the SizeVersion field if it s non - nil zero value otherwise .
3716	GetSizeVersionOk returns the size of the widget
3717	HasSizeVersion returns true if the widget has size version .
3718	GetTextSize returns the TextSize field s value .
3719	GetTextSizeOk returns the text size of the Widget
3720	HasTextSize returns true if the widget has a text size
3721	GetTick returns true if the widget is tick .
3722	GetTickOk returns true if the tick is tickable .
3723	HasTick returns true if the widget has a tick .
3724	GetTileDef returns the TileDef field s value .
3725	GetTileDefOk returns the tile definition of the Widget
3726	HasTileDef returns true if the Widget has a tile definition .
3727	GetTitleText returns the TitleText field if it s non - nil zero value otherwise .
3728	GetTitleTextOk returns the title of the Widget
3729	HasTitleText returns true if the widget has title text .
3730	GetURL returns the URL of the Widget
3731	GetURLOk returns the URL of the Widget
3732	HasURL returns true if the widget has a URL .
3733	GetCompute returns the ComputeCompute field s value .
3734	GetComputeOk returns the value of the ComputeOrLogQuery .
3735	HasCompute returns true if the widget has been computed .
3736	GetIndex returns the index of the index
3737	GetIndexOk returns the index of the index .
3738	HasIndex returns true if the widget has index .
3739	GetSearch returns the search value for the widget
3740	GetSearchOk returns the search ok for the widget
3741	HasSearch returns true if the widget has a search .
3742	GetHideValue returns the HideValue field if it s non - nil zero value otherwise .
3743	GetHideValueOk returns the HideValueOk field if it s non - nil zero value otherwise .
3744	HasHideValue sets the HideValue field s value .
3745	GetImageUrl returns the ImageUrl field if it s non - nil zero value otherwise .
3746	GetImageUrlOk returns the ImageUrlOk field if it s non - nil zero value otherwise .
3747	HasImageUrl returns true if the WidgetConditionalFormat is true .
3748	GetAliasName returns the alias name .
3749	GetAliasNameOk returns the alias name of the widget
3750	HasAliasName returns true if the widget has an alias name .
3751	GetSearchBy returns the SearchBy field s value .
3752	GetSearchByOk returns the searchBy field s value .
3753	HasSearchBy sets the SearchBy field s value .
3754	GetIncludeUnits sets the IncludeUnits field s value .
3755	GetIncludeUnitsOk sets the IncludeUnitsOk field s value .
3756	HasIncludeUnits sets the IncludeUnits field s value .
3757	dump dumps the template data
3758	newAccessor creates a new accessor
3759	addIdent adds an identifier to the template .
3760	addSelectorExpr adds a selector to the template .
3761	addMapType adds a map type to the template .
3762	addArrayType adds an array type to the template .
3763	Create a new downtime .
3764	UpdateDowntime updates the specified downtime .
3765	GetDowntime returns a Downtime .
3766	GetDowntimes retrieves all Downtimes .
3767	MarshalJSON marshals the API key .
3768	UnmarshalJSON deserializes the API key .
3769	Get API keys
3770	Get API key
3771	Create a new API key
3772	Delete API key
3773	PostMetrics sends a series of metrics to the server
3774	Get screenboard
3775	Get screenboards
3776	Create a screenboard .
3777	Update screenboard
3778	ShareScreenboard sends a screenshot to the screen .
3779	Revoke a screenboard
3780	GetTags returns tags for a given source
3781	GetHostTags returns the tags of a host
3782	AddTagsToHost adds tags to a host
3783	RemoveHostTags removes host tags from host
3784	redactError returns an error if the error occurred .
3785	doRequestWithRetries performs a request with retries .
3786	PostEvent creates a new event
3787	GetEvent returns an event .
3788	GetEvents returns a list of events for a given range .
3789	ViewMetadata returns a MetricMetadata .
3790	PostCheck adds a check to the client .
3791	WriteObject writes an object to the stream .
3792	ReadObject implements the io . Reader interface .
3793	SetParams sets the request params
3794	SetMeta sets the Meta field s value .
3795	SetResult sets the result of the response .
3796	SetError sets the error .
3797	Close closes the connection .
3798	Reply implements the Conn interface .
3799	ReplyWithError sends a reply with an error .
3800	LogMessages logs messages .
3801	HandlerWithError returns a HandlerWithErrorConfigurer
3802	Handle implements the Handler interface .
3803	ReadObject implements io . Reader interface .
3804	PickID adds a request to the request .
3805	String returns a string representation of the NodeAddr .
3806	ccIP returns the crum of the given IP .
3807	Stats returns the stats for the server .
3808	NewServer creates a new Server .
3809	SetIPBlockList sets the IP address list .
3810	AddNode adds a node to the server .
3811	getNode returns a node with the given id .
3812	Ping implements the Server interface .
3813	add response nodes
3814	findNode attempts to find a node with the given target ID .
3815	Bootstrap starts a new traversal .
3816	NumNodes returns the number of nodes in the server .
3817	Nodes returns the list of nodes in the table .
3818	Close closes the server .
3819	IsGood returns true if the node is good
3820	NumContacted returns the number of active connections .
3821	Announce is used to announce peers .
3822	Maybe announce peer .
3823	Close closes the Announce .
3824	NewUUID returns a new UUID .
3825	SetNodeInterface sets the name of the node interface
3826	NodeID returns the node ID .
3827	SetNodeID sets the node ID
3828	NodeID returns the node ID .
3829	ParseBytes parses a byte slice into a UUID .
3830	MustParse parses a string into a UUID .
3831	FromBytes returns a UUID from a byte slice .
3832	Must panic .
3833	Variant returns the variant of the UUID .
3834	Time returns the time of the UUID .
3835	MarshalText encodes a UUID into a byte slice .
3836	UnmarshalText deserializes a UUID .
3837	UnmarshalBinary deserializes a UUID .
3838	RunCursorAt starts the cursor at the given position .
3839	Run runs the select command
3840	New returns a new ScreenBuf .
3841	Clear clears the screen .
3842	Write implements ScreenBuf .
3843	Flush flushes the screen .
3844	Styler returns a function that returns a string with the given attributes .
3845	New creates a new List .
3846	Prev returns the position of the list .
3847	Search searches for a given term .
3848	CancelSearch will cancel the search .
3849	Set start position
3850	SetCursor sets the cursor position .
3851	Next returns the next element .
3852	PageUp sets the cursor up to the list .
3853	PageDown moves the cursor to the list .
3854	Items returns the items in the list .
3855	NewCursor returns a new cursor .
3856	Correct the position of the cursor .
3857	format converts a string to a string
3858	Format returns the string representation of the cursor .
3859	Format a mask
3860	Replace replaces the character in the cursor .
3861	Place sets the position of the cursor .
3862	Move moves the cursor to the cursor .
3863	Backspace backs the cursor .
3864	Listen listens for a given key .
3865	AggregateIssueChan returns a channel of the given channels .
3866	StaticCallee returns the static callable for the call .
3867	Func returns a function with the given name .
3868	Var returns a global variable .
3869	Const returns a named constant .
3870	Type returns the type of a package .
3871	getGoPath returns the path to the home directory
3872	addPath adds a path to the list of paths .
3873	configureEnvironmentForInstall sets the environment for the current environment .
3874	UnmarshalStrict is a convenience function for Unmarshal
3875	Decode decodes the given value into an error .
3876	Close closes the encoder .
3877	save simple key
3878	align returns the value of x .
3879	lintName returns the name of the given name .
3880	sanitCheck checks if a function is valid .
3881	mustSanityCheck checks if fn is a valid function .
3882	findDuplicate returns the first block in the list of blocks
3883	newIssuePathFromAbsPath creates a new IssuePath from an absolute path .
3884	NewIssue creates a new Issue .
3885	SortIssueChan sorts all issues in the given channel .
3886	binaryBinop op .
3887	expr returns the value of an expression .
3888	stmtList implements the builder .
3889	assignOp assigns an op to a function .
3890	localValueSpec parses a value spec .
3891	ArrayLen computes the length of an array of elements .
3892	switchStmt renders a switch statement .
3893	typeSwitchStmt creates a type switch statement .
3894	ForStmt generates a statement for the given statement .
3895	rangeStmt renders a range statement .
3896	buildFunction builds a function .
3897	buildFuncDecl builds a function declaration .
3898	Build builds the package .
3899	objectOf returns the object of the given identifier .
3900	typeOf returns the type of the given expression .
3901	Expect an event .
3902	peek returns the next event type .
3903	prepare parses the given node and returns it .
3904	Parse parses a string .
3905	ParseVerb parses a verb .
3906	terminates returns true if the function is terminated .
3907	Reads a reader from the input buffer .
3908	set input reader
3909	Initialize the YAML .
3910	yaml_writer_writer is a helper function for writing to the output writer .
3911	setOutputWriter sets the output writer .
3912	Yaml_mapping_start_start_start_event_start_start_event_start_event_start_event_start_event_start_event_start_event_start_event_start_event_event_event_start_event_event_event_event_event_event_start_event_event_event_event_start_event_event_event_event_event_event_event_event_start_event_event_event_event_event_event_event_event_event_start_event_event_start_event_event_event_
3913	flush writes to the buffer .
3914	processConversion is used to process a conversion function .
3915	processCompositeLiteral processes a composite literal .
3916	processCgoExported checks if the given node is exported .
3917	WritePackage writes a package .
3918	NewLinter creates a new Linter .
3919	IsStub checks if a function is a stub .
3920	CheckUnexportedReturn returns an error if the function is not exported .
3921	CreateProgram creates a new program .
3922	IsIgnored checks if the given issue is ignored .
3923	Unmatched returns a map of ignored ranges .
3924	LoadFiles parses the given list of files .
3925	ForArch returns a new Sizes with the given arch .
3926	ConvertFrom returns true if the value is converted to the given type .
3927	emitNode implements yaml_emitter .
3928	IsBlank returns true if the given identifier is a blank string .
3929	Dereference returns the type of the given type .
3930	TCPDialCheck is used to connect to a TCP connection .
3931	HTTPGetCheck returns a function that checks the HTTP GET request .
3932	DNSResolveCheck returns an error if the given host is valid .
3933	NewHandler creates a new basic handler .
3934	NewMetricsHandler creates a new metrics handler .
3935	Timeout adds a timeout to the given timeout .
3936	NewPinger creates a new Pinger .
3937	Network sets the connection to the given network .
3938	AddIP adds a new IP address
3939	AddIPAddr adds a new IP address .
3940	RemoveIP removes the given IP address .
3941	RemoveIPAddr removes an IP address .
3942	MakeLang creates a slug from a string
3943	Substitute returns a string with the given values .
3944	SubstituteRune returns a string with the given map .
3945	Parse parses the command line .
3946	Sum returns a byte slice of x .
3947	Reset resets the zero value .
3948	Write writes the input to the buffer .
3949	Sum32 computes the hash of x .
3950	ChecksumZero returns the zero value for the given input .
3951	Uint32Zero returns the zero value of x .
3952	UncompressBlock decodes a block into dst .
3953	NewReader returns a new Reader .
3954	Reset resets the reader .
3955	readUint32 reads a uint32 .
3956	Write implements the Writer interface .
3957	compressBlock compresses the given data .
3958	Flush flushes the compressed data .
3959	Close implements the Writer interface .
3960	Reset implements io . Writer .
3961	writeUint32 writes a uint32 .
3962	Uncompress is a wrapper for Uncompress .
3963	Compress is used to compress a file .
3964	Fuzz fuzzes the given data .
3965	NewClient creates a new client
3966	Subscribe adds a function to the client
3967	Start starts the server .
3968	PushEvent sends an event to the event bus .
3969	New returns a new instance of EventBus
3970	doSubscribe implements the EventBus interface
3971	Subscribe implements the EventBus interface .
3972	HasCallback returns true if the event has a callback
3973	Unsubscribe removes a handler from the event bus .
3974	Publish publishes a message to the event bus .
3975	NewNetworkBus creates a new NetworkBus
3976	Start starts the server .
3977	NewServer returns a new Server
3978	HasClientSubscribed returns true if the given subscriber is subscribed .
3979	Start starts the server .
3980	Register registers a subscriber .
3981	Valid checks if the GTLD period is valid .
3982	HasValidTLD checks if the given domain is valid .
3983	IsTLDMap returns true if label is in tld map
3984	Execute checks if the given certificate is valid .
3985	lintReversedIPAddressLabels returns an error if the given name is invalid .
3986	CheckRDNSequenceWhiteSpace checks if the given raw RDN sequence is valid .
3987	IsIA5String returns true if the string is an IA5 string .
3988	AllAlternateNameWithTagTag returns true if the given tag matches the given tag .
3989	IsEV returns true if an object is an EVID .
3990	Execute checks if the given certificate is an onion version .
3991	getData gets data from url
3992	getGTLDData returns a list of GTLDs
3993	delegateGTLDs returns a list of GTLDs that are delegated to the given list of entries .
3994	validateGTLDs checks if the entries are valid .
3995	init initializes the flag
3996	IsNameAttribute returns true if oid is a name attribute .
3997	MarshalJSON returns the JSON representation of the LintStatus .
3998	String returns the string representation of the LintStatus .
3999	EncodeLintDescriptionsToJSON encodes lintions to JSON .
4000	LintCertificate takes a certificate and returns a ResultSet
4001	CheckApplies returns true if the certificate is acceptable .
4002	failResult creates a LintResult with the given arguments .
4003	Check effective date
4004	GetExtFromCert returns the extension of the given certificate .
4005	TypeInName returns true if the given name matches the given oid .
4006	GetMappedPappedPolicies returns an array of objects corresponding to the given policy .
4007	printJSON prints a JSON representation of v .
4008	UnmarshalJSON deserializes a URI .
4009	NewClient returns a new Client
4010	NewEnterpriseClient creates a new enterprise client .
4011	Query executes a query .
4012	Mutate mocks base method
4013	populateFiles populates the list of files
4014	detectPath tries to detect the current path .
4015	pathUp sets the current directory up to the current directory .
4016	pathDown handles the path down to the current directory
4017	Destroy removes the control .
4018	preload loads data from the database
4019	value returns the value at the given row .
4020	Refresh screen
4021	AddWindow creates a new window .
4022	DestroyWindow destroys the given view .
4023	IsDeadKey returns true if the given key is dead .
4024	SetTextDisplay sets the text display display .
4025	CreateRadioGroup creates a new RadioGroup .
4026	Select returns the number of selected items .
4027	SelectItem returns true if the radio group is selected .
4028	SetSelected returns true if the radio group is selected .
4029	AddItem adds a RadioGroup to the group .
4030	NewColorParser returns a new ColorParser .
4031	NextElement returns the next element .
4032	SetTitle sets the title of the edit field .
4033	SetMaxWidth sets the maximum width of the edit field .
4034	SetSize sets the size of the edit field .
4035	PopAttributes populates the current canvas .
4036	PushClip pushes the clip to the canvas
4037	PopClip removes the clip from the canvas .
4038	InClipRect returns true if x is in the given rectangle .
4039	SetScreenSize sets the size of the canvas .
4040	Symbol returns a terminal cell .
4041	SetClipRect sets the clipping rectangle .
4042	ClipRect returns a copy of the canvas
4043	Draw horizontal line
4044	DrawVerticalLine renders a vertical line .
4045	DrawRawText draws the text at the given position .
4046	DrawTextVertical draws a text vertically .
4047	DrawRawTextVertical draws the text of the given text .
4048	DrawFrame draws a frame .
4049	FillRect fills a rectangle with the given rune .
4050	TextExtent returns the width of the given text .
4051	Ensure that the list is visible .
4052	Clear clears the list of items .
4053	AddItem adds a new item to the list .
4054	SelectItem sets the selected item in the list .
4055	Item returns the item at the given id .
4056	FindItem returns the first item in the list
4057	PartialFindItem returns the first item in the list
4058	SelectItemText returns the selected item .
4059	RemoveItem removes an item from the list .
4060	SysColor returns the color for the given color .
4061	SysObject retrieves the theme for the given object
4062	SetThemePath sets the theme path
4063	loadTheme loads a theme
4064	ReloadTheme loads a theme
4065	ThemeInfo returns a theme descriptor for the given name .
4066	Ellipsize takes a string and returns it .
4067	CutText truncates the given string .
4068	AlignText returns the shift of the given string
4069	SliceColorized converts a string to a string
4070	ColorToString converts a color to a string .
4071	Main loop .
4072	CreateEditField creates a new edit field .
4073	ChildAt returns the child of the given parent .
4074	DeactivateControls removes all controls from the parent .
4075	ActivateControl activates a control .
4076	FindChild returns the child of the given control .
4077	IsMouseClickEvent returns true if the event is a mouse click event .
4078	FindFirstControl returns the first control of the given control .
4079	ActiveControl returns the active control .
4080	FindFirstActiveControl returns the first active control .
4081	SendEventToChild sends an event to the given parent
4082	CalculateClipper computes the clipping of the given control .
4083	ClippedParent returns the clipped parent of the given control .
4084	ControlInRect returns true if the given control is within the given rectangle .
4085	CreateAlertDialog creates a confirmation dialog
4086	ProcessEvent implements the CheckBox interface .
4087	SetState sets the state of the checkBox .
4088	State returns the state of the checkbox .
4089	SetAllow3State sets the Allow3State field s value .
4090	SetSize sets the size of the checkbox .
4091	ScrollTo moves the frame to the frame .
4092	EnsureColVisible ensures that the column is visible .
4093	EnsureRowVisible ensures that the row is visible .
4094	Columns returns the list of columns .
4095	SetColumnInfo sets the column info .
4096	OnKeyPress registers a function on the view .
4097	OnDrawCell registers a callback for drawing cells .
4098	SetSelectedRow sets the selected row .
4099	SetSelectedCol sets the selected col .
4100	SetSelected sets the selected radio button .
4101	OnChange registers a callback for the Radio .
4102	SetText sets the text .
4103	SetWordWrap sets the wordWrap flag .
4104	LoadFile loads the text from a file .
4105	AddText adds text to the text view .
4106	Value returns the value of the progress bar .
4107	SetLimits sets the minimum value of the progress bar .
4108	Step implements the ProgressBar interface .
4109	SecondColors returns the secondary colors of the progress bar .
4110	SetSecondaryColors sets the color of the progress bar .
4111	SetAutoSize sets the auto size of the bar chart
4112	SetBarGap sets the gap .
4113	SetMinBarWidth sets the minimum bar width .
4114	SetShowTitles sets the ShowTitles field s value .
4115	SetLegendWidth sets the legend width .
4116	OnDrawCell adds a callback to the chart
4117	SetShowMarks sets the ShowMarks field s value .
4118	OnKeyDown registers a callback for keydown
4119	SetMaximized sets the maximized window .
4120	SetVisible sets the visibility of the window .
4121	SetTop sets the top of the chart
4122	SetAutoScale sets the autoScale option .
4123	SetHilitePeaks sets the hilite peak value .
4124	loadEnv loads environment variables
4125	Get returns the value for the given key .
4126	MustGet returns the value for the given key .
4127	Set sets the environment variable .
4128	MustSet sets the value for the given key .
4129	GoPaths returns a slice of path paths .
4130	CurrentModule returns the current module path .
4131	request sends a request to the client
4132	validate validates the notification request
4133	NewNetworkNumber returns a new NetworkNumber .
4134	ToIP converts a NetworkNumber to an IP .
4135	Equal returns true if two network numbers are equal .
4136	Next returns the next network number .
4137	Previous returns a new NetworkNumber .
4138	NewNetwork creates a new Network .
4139	Masked returns a copy of the network .
4140	Contains returns true if the network is contained in the network .
4141	Covers returns true if the network is in the network .
4142	LeastCommonBitPosition returns the lowest common bit position .
4143	Equal returns true if two networks are equal .
4144	Mask mocks base method
4145	NextIP returns the next IP .
4146	PreviousIP returns the previous IP .
4147	newPrefixTree creates a new prefix tree .
4148	Insert inserts a new prefix entry .
4149	Remove removes a prefix from the trie .
4150	Contains returns true if the given IP is contained in the prefix .
4151	String returns a string representation of the prefix .
4152	walkDepth is used to walk all the nodes in the tree .
4153	newBruteRanger returns a new bruteRanger .
4154	Insert inserts an entry into the cache .
4155	Remove removes the given network .
4156	Contains returns true if the given IP matches the given IP .
4157	ParseMessage parses an IRC message .
4158	NewClient returns a new client
4159	Say sends a message to a channel
4160	 Whisper sends a Whisper message to the chat .
4161	Join a channel
4162	Depart removes a channel
4163	Disconnect closes the client .
4164	Connect connects to the IRC server .
4165	Userlist returns a list of users for a channel .
4166	handleLine receives a message from the client .
4167	Execute executes the command line command
4168	Execute implements the Command interface .
4169	class classification classification
4170	Execute creates the space security groups .
4171	Execute executes the command .
4172	Execute the spaceNamedQuotaCommand .
4173	Execute adds an ASG to the configuration .
4174	Execute executes the command .
4175	Execute performs a delete command .
4176	Execute command .
4177	Contains returns true if the given space name exists .
4178	Execute executes the command line command .
4179	Execute executes the command .
4180	Gets the configuration of the YAML configuration .
4181	GetGlobalConfig returns the global configuration .
4182	GetOrgConfigs returns all org configs
4183	GetSpaceDefaults returns the space defaults for YAML .
4184	AddOrgToConfig adds an org to the config
4185	AddSpaceToConfig adds a space to the config
4186	CreateConfigIfNotExists creates a new configuration if necessary .
4187	DeleteConfigIfExists deletes the config directory .
4188	RenameSpaceConfiguration implements the RenameSpaceCommand interface .
4189	Execute executes the command .
4190	DeleteSpace deletes a space
4191	NewExportManager creates a new import manager .
4192	Contains returns true if the given orgName exists .
4193	UpdateOrgs updates the org configs
4194	UpdateSpaces updates the existing space .
4195	allDesiredSegment returns a slice of the desired configs .
4196	ListUsers lists all users
4197	Execute command .
4198	RemoveUnknownVisibilities removes unknown visibility from the service .
4199	DisablePublicServiceAccess disables a public service .
4200	ListServiceInfo returns information about the service .
4201	Execute executes the command
4202	Execute executes the command .
4203	Executes the DeleteOrgConfiguration command .
4204	Delete a space configuration
4205	Execute executes the delete command .
4206	NewKeyProvider returns a new secret provider with the given key .
4207	NewConfiguration creates a new JWT configuration .
4208	NewConfigurationTrustProvider creates a new ConfigurationTrustProvider
4209	NewValidator returns a new JWT validator .
4210	ValidateRequest validates a JWT request .
4211	ValidateRequestWithLeeway returns a JWT token with the given leeway .
4212	Claim claims for a JWT token .
4213	NewJWKClient creates a new JWK client .
4214	NewJWKClientWithCache creates a new JWKClient with the given options .
4215	GetKey returns the key associated with the given ID .
4216	GetSecret gets the secret from the request .
4217	FromMultiple returns a RequestTokenExtractorFunc that returns a RequestTokenExtractor .
4218	FromParams returns a JWT token from the request .
4219	NewMemoryKeyCacher returns a new KeyCacher .
4220	Get implements the KeyCacher interface .
4221	Add adds a key to the cache .
4222	keyExpired returns true if the key is expired .
4223	handleOverflow checks if the cache has been exceeded .
4224	Patch applies a patch to a new io . Writer .
4225	Diff implements io . Writer
4226	validColor returns true if the given color is valid .
4227	New creates a new Spinner .
4228	Start starts the spinner .
4229	Stop stops the spinner .
4230	Reverse reverses the list of strings .
4231	Color sets the color .
4232	UpdateSpeed updates the speed of the Spinner .
4233	UpdateCharSet updates the charset .
4234	clear is used to erase the last output .
4235	GenerateNumberSequence returns a sequence of numbers .
4236	header returns the header of the stream .
4237	NewMultiplex creates a new multix connection .
4238	Accept returns a new stream .
4239	NewNamedStream creates a new stream .
4240	encodeInt encodes the given latitude and latitude .
4241	Center returns the center of the box .
4242	Round returns the bounding box .
4243	BoundingBox returns the bounding box for the given hash .
4244	BoundingBoxIntWithPrecision returns a bounding box for the given hash .
4245	DecodeCenter returns the center of the given hash .
4246	Neighbors returns the neighbors of the given hash .
4247	NeighborsIntWithPrecision returns the number of neighbors in the given hash .
4248	NeighborsIntWithPrecision returns the number of neighbors in the given hash .
4249	splits a 32 - bit integer
4250	newEncoding creates a new encoding .
4251	Encode encodes a uint64 to a string .
4252	InitArgs initializes the command line arguments
4253	InitPath sets the path to the Linux factory
4254	StartInitializes the container .
4255	newConsole creates a new console .
4256	mount mounts the console .
4257	dupsStdio reads the stdio .
4258	open opens a slave file
4259	ptname returns the name of the terminal .
4260	finalizeNamespace cleans up the namespace
4261	joinExistingNamespaces takes a list of namespaces and writes them to the system .
4262	setupUser is used to setup the user
4263	killCgroupProcesses kills all processes .
4264	addUidMappings adds the UidMappings to the system .
4265	dropBoundingSet removes the bounding box .
4266	drop removes all capabilities from the whitelist .
4267	ensureParent creates the parent directory if it exists .
4268	Pid returns the PID of the process .
4269	Sign signals the process .
4270	NewConsole creates a new console .
4271	setupRootfs is used to setup rootfs
4272	createDevices creates a new device .
4273	createDeviceNode creates a new device node .
4274	remountReadonly writes the readonly flag to the specified path .
4275	joinCpuset sets the cpuset for the given pid .
4276	joinBlkio writes blkio to blkio
4277	execSetns executes the setns process .
4278	GetAllSubsystems returns all the system subsystems
4279	GetCurrentCgroupDir returns the cgroup directory for the given subsystem .
4280	Capture returns a stacktrace containing a stacktrace .
4281	getCgroupParamUint returns the value of cgroup param .
4282	GetAdditionalGroupsPath returns the list of groups in the given group .
4283	addArgsFromEnv adds args to the environment variable
4284	InitLabels initializes the labels for the given options .
4285	SetFileLabel sets the label for a file label
4286	SetFileCreateLabel sets the label for a file label
4287	Relabel replaces a file with relabel .
4288	NetworkGetRoutes returns a list of all the routes .
4289	CreateBridge creates a bridge .
4290	DeleteBridge deletes a bridge .
4291	AddToBridge adds an interface to the bridge interface .
4292	DelFromBridge removes an interface from a bridge .
4293	labelIndex returns the index of the label in the label
4294	getSelinuxMountPoint returns the selinux mount point
4295	SelinuxEnabled returns true if selinux is enabled .
4296	Setfilecon sets the sconux for a file
4297	GetFilecon returns the filecon for the given path .
4298	badPrefix checks if fpath is a valid prefix
4299	Chon sets the scon on the given file .
4300	DepSecOpt returns a copy of the src .
4301	attach attaches a network to the network .
4302	Add adds a syscalls to the context .
4303	Load initializes the context .
4304	newGraph creates a new graph .
4305	MakeDisjointSet creates a DisjointSet with the given name .
4306	FindSet finds a forest with the given name .
4307	Union combines two trees .
4308	Me returns the current user .
4309	List projects .
4310	DisableProject disables a project .
4311	FollowProject returns a project
4312	GetProject returns a project by name .
4313	ListRecentBuilds returns a list of recent builds .
4314	ListRecentBuildsForProject returns a list of Builds for a project .
4315	ListBuildArtifacts returns a list of artifacts .
4316	AddSSHUser adds a build to a build .
4317	Build builds a build .
4318	ParameterizedBuild returns a build for the given parameters .
4319	Build opts for a given branch
4320	ClearCache clears the cache for a given repository .
4321	DeleteEnvVar deletes an environment variable .
4322	AddSSHKey adds a private key to an account .
4323	GetActionOutputs returns the output of the action .
4324	List checkout keys
4325	Create a checkout key
4326	Get checkout key
4327	Delete a checkout key
4328	New creates a new client .
4329	Clone returns a new client .
4330	Count adds a counter to the bucket .
4331	Gets the value of a bucket .
4332	Timing adds a value to the bucket .
4333	Send sends a timestamp to the bucket .
4334	Unique adds a unique value to the bucket .
4335	Flush flushes the client .
4336	Close closes the client .
4337	SampleRate sets the rate of the client .
4338	Prefix adds a prefix to the client .
4339	TagsFormat sets the tag format .
4340	Tags adds tags to the client .
4341	flush writes the buffer to the buffer .
4342	BuildQwerty builds a graphwerty graph from a file .
4343	BuildDvorak builds a Dvorak graph .
4344	BuildKeypad builds a graphpad graph from a file .
4345	BuildMacKeypadBuildpad builds the macadency graph .
4346	BuildLeet builds a graph from a file .
4347	DictionaryEntropy returns the entropy for the given rank .
4348	SpatialEntropy returns the entropy of a match .
4349	RepeatEntropy returns the entropy of a match .
4350	SequenceEntropy returns the entropy of a match .
4351	ExtraLeetEntropy returns the entropy of the given password .
4352	DateEntropy returns the entropy of a date match .
4353	omimimatch returns a list of matches for the given password .
4354	Null returns the value of a null value .
4355	Number returns the number of characters .
4356	Array returns the value of an array .
4357	FindRange returns a slice of bytes in a slice .
4358	Object is part of an object .
4359	FindKey finds the key of the given key .
4360	FindIndex returns the index of the given index .
4361	dot returns an OpFunc that matches the given key .
4362	Chain returns a new OpFunc that applies the given filters .
4363	Index returns the index of the given index .
4364	Range returns a ScanFunc that matches the given range .
4365	String returns the position of a string .
4366	Boolean returns true if the input is a boolean .
4367	Must panics if an error is encountered .
4368	Parse parses a selector string .
4369	Any returns the value at the given position .
4370	ProxyRequestFromContext returns a proxy request from the context .
4371	DurationValue converts a string to a string .
4372	Base64Value returns the base64 value .
4373	UIValue returns the URI of the given string .
4374	EmailValue returns the value of the email .
4375	HostnameValue returns the hostname value .
4376	IP4Value returns a new IPv4 address .
4377	IP6Value returns a new IPv6 address .
4378	CIDRValue returns the CIDR value for the given string .
4379	MACValue returns the MAC value for the given string .
4380	UUIDValue converts a UUID to a UUID .
4381	UUID3Value returns a UUID3 .
4382	UUID4Value returns a UUID4 .
4383	UUID5Value returns a UUID5 value .
4384	 ISBN value
4385	 ISBN10 value
4386	BN13Value returns the ISBN13 value .
4387	CreditCardValue returns the value of a CreditCard .
4388	SSNValue returns the SSN value for the given string .
4389	H HexColorValue returns a hexadecimal color .
4390	RGBColorValue returns the RGBA color value .
4391	PasswordValue converts a string to a string .
4392	MarshalJSON marshals an ObjectId into a byte slice .
4393	MarshalEasyJSON marshals the object id to w .
4394	UnmarshalJSON implements json . Unmarshaler interface .
4395	UnmarshalEasy implements json . Unmarshaler interface .
4396	SetBSON sets the BSON field s value .
4397	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ObjectId .
4398	IsHostname checks if a string is a valid hostname
4399	IsEmail returns true if the string is an email address .
4400	MarshalJSON marshals the base64 to JSON .
4401	MarshalEasyJSON encodes a base64 encoded string .
4402	UnmarshalJSON implements json . Unmarshaler interface .
4403	UnmarshalEasy implements json . Unmarshaler interface .
4404	SetBSON sets the Base64 field s value .
4405	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Base64 .
4406	MarshalJSON returns the JSON representation of the URI .
4407	MarshalEasyJSON writes the URI to w .
4408	UnmarshalJSON implements json . Unmarshaler interface .
4409	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new URI .
4410	MarshalJSON marshals the email address to JSON .
4411	MarshalEasyJSON encodes an email into a writer .
4412	UnmarshalJSON implements json . Unmarshaler interface .
4413	UnmarshalEasy implements json . Unmarshaler interface .
4414	SetBSON sets the BSON field s value .
4415	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Email .
4416	MarshalEasyJSON writes the hostname to w . Writer .
4417	SetBSON sets the Hostname field s value .
4418	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Hostname .
4419	MarshalEasyJSON writes an IPv4 address to w .
4420	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new IPv4 .
4421	MarshalEasyJSON writes an IPv6 address to w .
4422	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new IPv6 .
4423	MarshalEasyJSON writes a CIDR to w . Writer .
4424	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new CIDR .
4425	MarshalEasy writes the MAC address to w .
4426	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new MAC .
4427	MarshalEasy writes the UUID to w .
4428	SetBSON sets the UUID field s value .
4429	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID .
4430	MarshalEasyJSON encodes a UUID .
4431	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID3 .
4432	MarshalEasyJSON encodes a UUID4 .
4433	UnmarshalJSON implements json . Unmarshaler interface .
4434	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID4 .
4435	MarshalEasyJSON marshals the UUID5 .
4436	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UUID5 .
4437	MarshalEasy writes the ISBN to w .
4438	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN .
4439	MarshalEasyJSON serializes the ISBN10 .
4440	UnmarshalEasy implements json . Unmarshaler interface .
4441	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN10 .
4442	MarshalEasyJSON encodes an ISBN13 .
4443	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ISBN1313 .
4444	MarshalEasyJSON encodes a CreditCard .
4445	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new CreditCard .
4446	MarshalEasy writes the SSN to w .
4447	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new SSN .
4448	MarshalJSON serializes the hex color .
4449	MarshalEasy writes the hex color to w .
4450	UnmarshalJSON unmarshals a hex color .
4451	UnmarshalEasy unmarshals a hex color .
4452	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new HexColor .
4453	MarshalEasy writes the RGBA color to w .
4454	UnmarshalJSON deserializes the RGBA color .
4455	UnmarshalEasy deserializes the RGBA color .
4456	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new RGBColor .
4457	MarshalJSON marshals the password .
4458	MarshalEasyJSON encodes a password .
4459	SetBSON sets the password field s value .
4460	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Password .
4461	IsDateTime returns true if the string is a date time .
4462	ParseDateTime parses a date string .
4463	UnmarshalText deserializes a DateTime .
4464	Scan scans the given raw data into a DateTime .
4465	Value returns the value of the DateTime .
4466	MarshalJSON marshals the DateTime to JSON .
4467	MarshalEasyJSON implements the Writer interface .
4468	UnmarshalJSON implements json . Unmarshaler interface .
4469	UnmarshalEasy implements json . Unmarshaler interface .
4470	SetBSON sets the BSON field s value .
4471	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DateTime .
4472	IsDuration returns true if the string is a duration .
4473	ParseDuration parses a string into a time . Duration .
4474	Scan implements the Scan interface .
4475	Value returns the value of the Duration .
4476	MarshalJSON marshals the duration of Duration .
4477	MarshalEasy serializes the duration of the duration .
4478	UnmarshalJSON unmarshals a Duration .
4479	UnmarshalEasy implements json . Unmarshaler interface .
4480	SetBSON sets the Duration field s value .
4481	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Duration .
4482	DateValue converts a string to a date .
4483	IsDate returns true if the string is a date .
4484	UnmarshalText unmarshals a date .
4485	Scan implements the Scan interface .
4486	Value returns the value of the date .
4487	MarshalEasyJSON implements io . Writer . Writer .
4488	UnmarshalJSON implements json . Unmarshaler interface .
4489	UnmarshalEasy unmarshals a date .
4490	SetBSON sets the Date field s value .
4491	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Date .
4492	DateTimeValue converts a DateTime to a DateTime .
4493	NewSeededFormats returns a new Registry instance .
4494	Add adds a new format to the list .
4495	GetType returns the type of the given name .
4496	DelByName removes a known format by name .
4497	DelByFormat removes the given format from the format .
4498	ContainsName returns true if the given name matches the given name .
4499	ContainsFormat returns true if the format contains a format .
4500	Parse parses a string and returns an error .
4501	Sequence takes a list of filters and returns an error .
4502	Contents returns the contents of the contents of the contents .
4503	Items returns a FilterFunc that filters the given items .
4504	Repeat adds a string to the output .
4505	Number returns a FilterFunc that filters the number of numbers .
4506	Uniq returns a FilterFunc that returns a FilterFunc that returns a FilterFunc .
4507	UniqWithCount returns a FilterFunc that returns a FilterFunc .
4508	Reverse returns a FilterFunc that can be used to sort the input .
4509	SampleWithSeed returns a filter that takes a random number of samples .
4510	First returns a FilterFunc that returns a FilterFunc .
4511	Last returns a FilterFunc that returns the last element in the ring .
4512	DropLast returns a FilterFunc that drops all elements in the ring .
4513	Text adds the text to the sort filter .
4514	TextDecreasing sets the number of elements in the sort order .
4515	Num adds a number to the sort filter
4516	NumDecreasing sets the number of elements in the sort order .
4517	By implements SortFilter .
4518	Flips the last element in the sort order .
4519	Runs the sort function
4520	RunFilter runs the filter .
4521	Grep returns a filter that matches regexp .
4522	GrepNot returns a Filter that matches the given regexp .
4523	LimitArgs sets the LimitArgs field s value .
4524	Takes a list of filenames and returns an error .
4525	ReadLines reads lines from the given io . Reader .
4526	IsComment returns true if the host is a comment .
4527	NewHostsLine returns a HostsLine .
4528	IsWritable returns true if the host is writable .
4529	Flush writes the hosts to disk .
4530	Add adds a new host to the list of hosts .
4531	Remove removes a host from the hosts
4532	NewHosts returns a new instance of Hosts
4533	NewOpenAPISchemaFor implements the OpenAPISchema interface .
4534	Validate validates the given object .
4535	FlattenToV1 converts a list of objects to v1 .
4536	ParseVersion parses a server version .
4537	FetchVersion returns the version of the server .
4538	SetMetaDataAnnotation sets the annotation for the given object .
4539	SetMetaDataLabel sets the label for the given object .
4540	ResourceNameFor returns the resource name for the given object .
4541	FqName returns the name of the given object .
4542	String returns a string representation of the ImageName .
4543	RegistryRepoName returns the name of the image name .
4544	RegistryURL returns the URL for the image name .
4545	ParseImageName parses an image name .
4546	NewRegistryResolver returns a new Resolver .
4547	NewLogFormatter returns a new LogFormatter .
4548	NewMemcachedDiscoveryClient returns a new MemcachedDiscoveryClient
4549	ClientForResource returns a resource for the given object .
4550	formatDiff is used to format diffs
4551	isEmptyValue returns true if the given interface is empty .
4552	depTier returns the pod spec for the given object
4553	New returns a new Lexer .
4554	NextToken returns the next token .
4555	InnerText returns the inner text of the block statement .
4556	MarkdownHelper renders a Markdown helper .
4557	Parse parses a string .
4558	NewHelperMap creates a new HelperMap .
4559	AddMany adds multiple helpers to the helper
4560	RenderRenderer renders the given input as a string .
4561	Render renders the given input .
4562	RunScript runs a script
4563	NewTemplate returns a new Template .
4564	Parse parses the template .
4565	Exec executes the template .
4566	Clone returns a copy of the template .
4567	Render renders a string
4568	BlockWith renders a block with the given context .
4569	Has returns true if the given key exists .
4570	export returns a copy of the context
4571	NewContextWith returns a new Context with the given data .
4572	NewContextWithContext creates a new Context with the given context .
4573	Aggregate aggregates all goroutines of a goroutine .
4574	Less returns true if b is less than r .
4575	parseDump parses a dump of goroutines .
4576	hasPathPrefix returns true if path is a path prefix
4577	getFiles returns all the files in the given goroutines .
4578	splitPath splits a path into a slice of paths .
4579	isFile returns true if the file is a file .
4580	rootIn returns the root of the given path .
4581	findRoots finds the root of the goroutines .
4582	String returns the string representation of the function .
4583	Name returns the name of the function .
4584	PkgName returns the package name .
4585	IsExported returns true if f is exported .
4586	IsPtr returns true if the argument is a pointer .
4587	equal compares two Args
4588	similarity returns true if the arguments are equal .
4589	merge merges two Args
4590	equal returns true if c is equal
4591	Compare returns true if the call is similar to the given call .
4592	merge returns a copy of this call .
4593	PkgSrc returns the package s src .
4594	updateLocations updates the location of the call .
4595	equal compares two stack calls
4596	similar to the stack
4597	merge merges the stack into a new Stack .
4598	Less returns true if the stack is less than r .
4599	equal returns true if the signature is equal .
4600	similarity returns true if the signature matches the given signature .
4601	merge merges the signature into a new Signature .
4602	Less returns true if the signature is less than r .
4603	CreatedByString returns a string representation of the created signature .
4604	nameArguments returns the list of arguments for the given goroutine .
4605	CalculateLengths computes the length of the given buckets .
4606	functionColor returns the color for the given line .
4607	routineColor returns the color for the given bucket .
4608	BucketHeader renders a bucket header .
4609	callLine returns a string representation of a line .
4610	StackLines returns a string representation of a stack trace .
4611	Augments the given goroutine .
4612	load parses a file .
4613	getFuncDecl returns the AST for the given file .
4614	fieldToType converts a field to a type .
4615	extractArgumentsType extracts the argument type from a function .
4616	Reset resets the template .
4617	Unlock the mutex
4618	Runlock implements the Lock interface .
4619	returns a copy of the lock
4620	getSourceLines returns the lines of a file
4621	stack returns a slice of stack traces .
4622	NewWithAlphabet creates a new UUID with the given alphabet .
4623	numToString converts a number to a string .
4624	StringToNum converts a string to a number .
4625	newAlphabet returns a new alphabet .
4626	Index returns the index of the given string .
4627	Deduplicate returns a slice of strings .
4628	Is returns true if the given error is an error .
4629	Error returns the error message .
4630	ErrorStack returns a string representation of the error .
4631	TextStyle converts a text style to a string .
4632	NewPointsIndex returns a new PointIndex .
4633	NewExpiringPointsIndex creates a new set of PointsIndex objects .
4634	Get returns the point at the given id .
4635	GetAll returns all points in the index
4636	Add adds a point to the index .
4637	Remove removes a point from the index .
4638	Range returns a slice of points .
4639	KNearest returns a slice of points for a given point .
4640	PointsWithin returns a slice of points within a given point .
4641	newMultiValue returns a new multi - value counter .
4642	newAverageAcculatingCounter returns a new aggregate counter .
4643	newGeoIndex creates a new geoIndex
4644	AddEntryAt adds a point at the given point at the given point .
4645	GetEntryAt returns the entry at the given point .
4646	Range returns the range of cells in the given range .
4647	NewClusteringIndex creates a new ClusteringIndex .
4648	NewExpiringClusteringIndex returns a new ClusteringIndex .
4649	Range implements the ClusteringIndex interface .
4650	KNearest returns the nearest point for the given point .
4651	Push adds an element to the queue .
4652	Pop removes the element from the queue .
4653	Peek returns the next element in the queue .
4654	PeekBack returns the next element in the queue .
4655	ForEach iterates over all elements in the queue .
4656	Clone returns a copy of the set .
4657	NewCountIndex returns a new CountIndex .
4658	NewExpiringCountIndex creates a new CountIndex .
4659	Range returns a slice of points in the index .
4660	KNearest implements the Index interface .
4661	DirectionTo returns the direction of the given point .
4662	 BearingTo returns the bearing of the given point .
4663	imateSquareDistance calculates the distance between two points .
4664	newResult returns a new result .
4665	NewSource creates a new source .
4666	newHelperMethodYield creates a helper method for a helper function .
4667	newHelperMethodDoctype creates a new helper method .
4668	NewFile creates a new File .
4669	Load loads a template .
4670	getCache returns the template for the given name .
4671	setCache adds a template to the cache
4672	FlushCache clears the cache .
4673	newPlainTextInner creates a new plainTextInner .
4674	newEmptyElement creates a new empty empty element .
4675	newComment creates a new comment .
4676	newHelperMethodJavascriptJavascript creates a new helper method .
4677	ParseSource parses a source .
4678	parseBytes parses a byte slice into a list of elements .
4679	appendChildren recursively append children to result .
4680	newHTMLComment creates a new HTML comment .
4681	newHelperMethodIncludeInclude creates a helper for the helper .
4682	newHelperMethodConditionalComment creates a helper for a helper function .
4683	CompileResult compiles a result .
4684	CompileResultWithTemplate compiles a result into a template .
4685	AppendChild appends a child element .
4686	writeChildren writes children to the buffer .
4687	newElementBase returns a new elementBase .
4688	readFiles reads a source file and returns a new source .
4689	readFile reads a file .
4690	findIncludes finds all includes in the given data .
4691	findIncludePaths finds all include paths in a file .
4692	hasFile returns true if the given path exists .
4693	newHelperMethodCSS creates a helper method for a helper function .
4694	newElement creates a new element .
4695	newHelperMethodContent creates a helper method .
4696	setAttributes sets the attributes of the tag .
4697	noCloseTag returns true if the tag is not closed .
4698	IsBlockElement returns true if the element is inline .
4699	newHTMLTag creates a new HTML tag .
4700	extractTagName extracts tag name from string
4701	extractID extracts the ID from a line .
4702	extractClasses extracts classes from a string
4703	parseTokens parses a list of tokens .
4704	newPlainText creates a plaintext .
4705	isHelper returns true if the line is a helper method .
4706	isHelperOf returns true if the given name is a helper function .
4707	isPlainText returns true if the line is a plain text .
4708	isComment returns true if the line is a comment .
4709	isHTMLComment returns true if the line is a HTML comment .
4710	isAction returns true if the line is a action .
4711	fileName returns the file name .
4712	childOf returns true if the line is a child of the given parent .
4713	newLine creates a new line .
4714	indent returns the indentation of the given string .
4715	InitializeOptions initializes the options .
4716	AddNoCloseTagName adds a name to the options list .
4717	DeleteNoCloseTagName deletes the named tag name .
4718	Asset returns the asset .
4719	newAction creates a new action .
4720	AddRelayTransport adds a transport to the host .
4721	NewRelay creates a new relay .
4722	ParseJSONBody parses a JSON body .
4723	New returns a new Runner .
4724	RunGroup implements the Runner interface .
4725	ParseFile parses a list of groups .
4726	ParseLine parses a line .
4727	Capture returns the comment for the line .
4728	Bytes returns a string representation of the lines .
4729	Equal returns true if value is equal to value
4730	Type returns the type of the value .
4731	NewServer returns a new http . Handler
4732	PrettyPrintAsJSON returns a pretty printable as JSON .
4733	StringMarshalJSON returns a string representation of a string .
4734	StringMD5Hex returns the MD5 hash of a string
4735	StringSHA1Base64 returns a base64 encoded string .
4736	StringJoinFormat formats a slice of values into a string .
4737	StringJoin returns a string representation of a slice .
4738	Less returns true if the given index is less than the given index .
4739	Swap swaps two strings .
4740	StringMap returns a slice of strings .
4741	StringFilter returns a slice of strings that match the given function .
4742	StringFindBetween starts between two strings .
4743	StringFind returns the remainder of the string .
4744	EncryptAES encrypts a plaintext using AES .
4745	DecryptAES decrypts a ciphertext using AES .
4746	PanicIfErr panics if an error occurred .
4747	AsError converts an error to an error .
4748	FirstError returns the first error if the error occurs .
4749	LastError returns the last error .
4750	AsErrorList returns an error list .
4751	Error returns the error
4752	Last returns the last error .
4753	Collect collects all errors from the list .
4754	HTTompressHandlerFunc wraps http . HandlerFunc . HandlerFunc
4755	HTTPPostJSON sends a POST request to the given URL .
4756	HTTPDelete makes a HTTP DELETE request
4757	HTTPUnmarshalRequestBodyJSON unmarshals a request body into a result .
4758	GetWriter returns a flate writer .
4759	Return a new writer .
4760	GetWriter returns a gzip writer .
4761	Return a gzip writer .
4762	FileGetLines returns lines of a file or an error .
4763	FileGetLastLine returns the last line of a file or an error .
4764	FileSize returns the size of the file .
4765	BytesHead returns the head of the given data .
4766	BytesMap maps a function to a slice of bytes .
4767	BytesFilter returns a slice of bytes that match the given function .
4768	ReflectStructFieldString sets the field s value .
4769	ReadBinary implements io . Reader interface .
4770	WriteFull writes data to writer
4771	ReadLine reads a line from a reader .
4772	WaitForStdin returns the number of bytes from stdin .
4773	GetenvDefault returns the default value for the given key .
4774	NetIP returns the network IP address .
4775	RealNetIP returns the real IP address .
4776	Load loads configuration from the given configuration .
4777	LoadJSON loads a configuration from a configuration file .
4778	LoadTOML loads the configuration from the given configuration .
4779	LoadBytes loads a configuration from a file .
4780	LoadJSONBytes loads a configuration from a JSON file .
4781	LoadTOMLBytes loads a configuration from a config file .
4782	LoadWithEnvJSON loads a configuration from a config file .
4783	LoadWithEnvTOML loads configuration from a config file .
4784	LoadWithEnvBytes loads config from src .
4785	LoadWithEnvJSONBytes loads config from src . json
4786	LoadWithEnvTOMBytes loads config from the given src .
4787	Crop returns a copy of the given image .
4788	computeSize computes the size of the rectangle .
4789	computeCropArea returns the cropped crop area .
4790	New creates a new git command
4791	NewLongThen returns a new GitCmd .
4792	Command returns the git command .
4793	Exec runs git command
4794	stopProcess stops the process .
4795	runCmd runs a command
4796	runCmdOutput returns the output of the given command .
4797	Init initializes Git .
4798	writeScriptFile writes a script to a file .
4799	gitWrapper script script
4800	bashScript returns the ssh script for the given repo .
4801	handleToken is used to handle a request .
4802	Handle implements the Handler interface .
4803	handleSignature handles the signature of the request
4804	setup creates a new webhook
4805	parseURL parses the given repo URL and returns it .
4806	Start starts the repo
4807	add adds a new repo
4808	Repo returns a repository .
4809	String returns a string representation of the repository .
4810	Val returns the string representation of the repository .
4811	Pull pulls the repo
4812	pull pulls the repo from the repository
4813	checkCommit commits a commit to the repository .
4814	gitCmd runs git command
4815	Prepare initializes the repo .
4816	most recent commit .
4817	originURL returns the origin URL for the repository .
4818	Executes the command and executes the command .
4819	Stdin sets the stdin
4820	Stdout sets the stdout to stdout .
4821	Stderr sets stderr
4822	Createdir mocks base method
4823	CreatedirAll mocks base method
4824	Stat implements GitOS .
4825	LookPath returns the path for the given file .
4826	TempFile returns a temporary file .
4827	ReadDir implements GitOS .
4828	Command implements GitOS .
4829	NewTicker returns a new Ticker .
4830	TimeSince returns the time since the given time .
4831	handleSignature handles the signature of the request
4832	Error returns the error message .
4833	hookName returns the name of the hook handler .
4834	ServeHTTP implements the http . Handler interface .
4835	hostname returns the hostname
4836	generateOptions returns the options for the given query .
4837	generate query options
4838	convert options to url
4839	mode returns the file mode .
4840	Register an alias for the given name .
4841	Register registers a scheme .
4842	Unregisters a scheme .
4843	has returns true if b is a string
4844	SchemeDriverAndAliases returns the driver for the given name .
4845	GenFromURL returns a function that can be used to generate a new URL .
4846	GenOpaque generates a query string .
4847	GeneratePostgres generates a postgres query .
4848	GenerateSQLServer generates a SQLServer .
4849	GenMyMySQL generates the MySQL database for the given URL .
4850	GenOracle generates a new Oracle for the given URL .
4851	GenFirebird generates a new URL for the given URL .
4852	GenerateADODDB generates a database URL for the given URL .
4853	GenerateODBC generates the database for the given URL .
4854	GenerateOLEODBC generates the OLE SQL for the given URL .
4855	GenClickhouse generates a URL from a URL .
4856	GenVoltDB generates the VoltDB for the given URL .
4857	GeneratePresto generates a Presto .
4858	GenCassandra generates a Cassandra query string .
4859	GenSnowflake generates a Snowflake from a URL .
4860	String returns a string representation of the URL .
4861	Short returns the string representation of the URL .
4862	Normalize normalizes the URL .
4863	NewLimiter returns a new RateLimiter
4864	Has returns true if the given id exists .
4865	Attempted returns the number of attempts for the given ID .
4866	Left returns the number of items in the rate limit .
4867	Attempt attempts to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt to attempt .
4868	IsPublicIP returns true if the given IP is public .
4869	ParseForwarded parses a list of IP addresses .
4870	Inspect returns true if the field is in the input field .
4871	Out returns true if the field is out .
4872	SetLobReader sets the chunk reader .
4873	Error returns the error message .
4874	SetIdx sets the index of the error .
4875	Code returns the error code .
4876	Position returns the position of the error .
4877	Level returns the level of the error .
4878	Text returns the text of the error .
4879	IsWarning returns true if the error occurred .
4880	IsError returns true if the error is an error .
4881	IsFatal returns true if the error is a fatal error .
4882	Size returns the number of bytes in bytes .
4883	StringSize returns the size of a string .
4884	FullRune returns true if the first rune is a rune .
4885	DecodeRune returns a rune from a byte slice .
4886	RunesLen returns the length of a rune .
4887	On returns true if the tracer is on .
4888	SetOn sets the value of the Tracer .
4889	read reads the segment header .
4890	Go starts the sniffer .
4891	Write writes bytes to the session .
4892	NewSession creates a new session .
4893	QueryDirect returns the result of a query .
4894	ExecDirect executes a query .
4895	Prepare executes a query .
4896	Exec executes a query .
4897	DropStatementID deletes a statement .
4898	Call mocks base method
4899	Query executes a query .
4900	FetchNext is part of the session .
4901	CloseResultsetID sets the resultset ID associated with the specified ID .
4902	Commit commits the transaction .
4903	NewReader returns a new Reader .
4904	NewReaderSize creates a new Reader .
4905	GetError returns the error .
4906	Skip implements the Reader interface .
4907	ReadB returns the next byte .
4908	ReadFull implements io . Reader interface .
4909	ReadBool returns true if the reader is read .
4910	ReadInt16 reads an int16 from the Reader .
4911	ReadUint16 reads a uint16 .
4912	ReadInt32 reads an int32 from the Reader .
4913	ReadUint32 reads a uint32 .
4914	ReadInt64 reads an int64 from the Reader .
4915	ReadUint64 reads a uint64 .
4916	ReadFloat32 reads a float32 from the Reader .
4917	ReadFloat64 reads a float64 from the Reader .
4918	ReadCes8 returns a slice of bytes .
4919	NewWriter returns a new Writer .
4920	NewWriterSize creates a new Writer .
4921	Flush flushes the writer .
4922	Write zeros to the writer .
4923	Write writes p to the writer .
4924	WriteB writes a byte to the writer .
4925	WriteBool writes a boolean value to the writer .
4926	WriteInt8 writes an int8 to the writer .
4927	WriteInt16 writes an int16 to the writer .
4928	WriteUint32 writes a uint32 to the writer .
4929	WriteInt64 writes an int64 to the writer .
4930	WriteFloat32 writes a float32 to the writer .
4931	WriteFloat64 writes a float64 to the writer .
4932	WriteString writes a string to the writer .
4933	WriteCes8 writes a byte slice to the Writer .
4934	WriteStringCes8 writes a string to w .
4935	DataType returns the type of the type .
4936	Name returns the field name .
4937	NewBasicAuthConnector creates a new Connector .
4938	Locale returns the local locale .
4939	FetchSize returns the size of the connection .
4940	Timeout returns the timeout .
4941	TLSConfig returns the TLS configuration .
4942	SetTLSConfig sets the TLS configuration .
4943	SessionVariables returns the session variables .
4944	SetSessionVariables sets the session variables .
4945	BasicAuthDSN returns the DSN for the connection .
4946	Row returns the row at the given index .
4947	readShortUTF8 reads bytes from bufio .
4948	NewLob creates a new Lob .
4949	TokenString returns a string representation of the given rune .
4950	NewScanner returns a new Scanner .
4951	Next implements the Scanner interface .
4952	RandomIdentifier returns a random identifier .
4953	String returns the string representation of the identifier .
4954	Parse parses a string into a slice of bytes .
4955	Serialize returns a string representation of a base64 encoded string .
4956	Align returns a slice of bytes aligned to the given bit size .
4957	XOR returns a copy of the left and right
4958	Slice returns a slice of bytes .
4959	Random returns a random byte slice .
4960	Concat concatenates arrays of arrays .
4961	Unwrap returns a slice of arrays .
4962	UInt64ToBytes converts uint64 to bytes .
4963	UInt32ToBytes converts uint32 to bytes .
4964	Dump returns a string representation of an array .
4965	Decode decodes a string .
4966	Encode encodes data into base64 encoded string .
4967	Decode decodes a token from a string .
4968	DecodeBytes decodes a string and decodes it into a map .
4969	DerivePBKKDF2 derives a PKKDF2 .
4970	ReadPrivate reads a private key from raw bytes .
4971	ReadPublic reads a public key from raw bytes .
4972	AddPkcs7 adds padding to a block .
4973	RemovePkcs7 removes padding from a block .
4974	ContainerMetrics returns a list of container metrics .
4975	SortRecent sorts log messages .
4976	SortContainerMetrics sorts container metrics .
4977	New creates a new Consumer .
4978	TailingLogs returns a channel of logs .
4979	TailingLogsWithoutReconnects returns a channel s tailing logs .
4980	Stream implements the Consumer interface .
4981	StreamWithoutReconnect returns a channel with the given auth token .
4982	Firehose sends a subscription to the consumer .
4983	Firehose without reconnect
4984	FilteredFirehose returns a channel for a given subscription .
4985	SetOnConnect callback
4986	Close closes the consumer .
4987	zpool runs zpool command
4988	GetZpool returns a Zpool
4989	Destroy destroys the pool
4990	ListZpools returns a list of zpools
4991	Error returns the error message .
4992	zfs runs zfs command
4993	GetDataset returns a Dataset
4994	Clone returns a copy of the dataset .
4995	Unmount unmounts a Dataset
4996	Mount mocks base method
4997	ReceiveSnapshot reads a snapshot from an input stream .
4998	SendSnapshot sends a snapshot to the dataset .
4999	Destroy destroys a dataset
5000	Rename renames a dataset .
5001	Snapshot returns a snapshot of the dataset .
5002	Rollback is part of the dataset .
5003	Children returns a list of all datasets .
5004	Diff implements Dataset .
5005	msb32 returns the number of bytes in the given x .
5006	msb64 returns the number of bytes in the given number .
5007	EncodeAll encodes a slice of uint32 .
5008	DecodeAll decodes all elements from src .
5009	canPack returns true if the given slice can be packed .
5010	pack28 packs a slice into a uint32 .
5011	pack14 packs a uint32 into a uint32 .
5012	pack9 packs a byte slice into a uint32 .
5013	pack7 packs a byte slice into a uint32 .
5014	DecodeAll decodes a slice of bytes into dst .
5015	Out returns the output of the client .
5016	Step implements the Client interface .
5017	DialWithTimeout attempts to connect to a given URL .
5018	ParseURL parses a URL and returns a DialInfo object .
5019	LiveServers returns the list of live servers .
5020	DB returns a Database .
5021	Cursor creates a collection of collections .
5022	With adds a new session to the database .
5023	With adds a new collection to the collection .
5024	Logout removes the credentials from the database .
5025	LogoutAll removes all credentials from the session .
5026	RemoveUser removes a user from the database .
5027	New returns a new session
5028	Copy returns a copy of the session .
5029	Clone returns a copy of the session .
5030	Close closes the session .
5031	Refresh refreshes the connection .
5032	SetSyncTimeout sets the sync timeout .
5033	SetSocketTimeout sets the timeout .
5034	SetCursorTimeout sets the cursor timeout .
5035	SetPoolLimit sets the pool limit .
5036	Safe returns the current session .
5037	Fsync is part of the session .
5038	FsyncUnlock unlocks the lock .
5039	Repository returns a new Iterator .
5040	Iter returns a new Iterator .
5041	One returns the first item in the pipeline
5042	Batch sets the batch size .
5043	IsDup returns true if the error is a duplicate .
5044	DropCollection deletes the collection .
5045	Skip sets the number of rows .
5046	Limit sets the limit .
5047	SetMaxScan sets the MaxScan field s value .
5048	LogReplay is part of the query .
5049	CollectionNames returns a list of collection names .
5050	DatabaseNames returns a list of all databases .
5051	Timeout returns true if the iterator is timed out .
5052	Count returns the number of records in the query .
5053	Count returns the number of records in the collection .
5054	VersionAtast returns true if the version is at least one of the given version .
5055	BuildInfo returns information about the build .
5056	setSocket sets the mongo socket .
5057	writeQuery writes a query to the database .
5058	Acquire acquires a new MongoCluster .
5059	Release releases all servers
5060	syncServersLoop runs the synchronous loop .
5061	Close closes the mongo server .
5062	RecycleSocket allocates a new socket .
5063	AbendSocket implements the mongo server .
5064	BestFit returns the best available mongo servers .
5065	Add adds a template to the Render .
5066	Instance implements the Render interface .
5067	loadTemplate loads a template .
5068	New returns a new Render
5069	Create creates a new Render .
5070	Validate validates the template
5071	tokenFor returns a token for a transaction .
5072	NewRunner returns a new Runner .
5073	Run runs the given operations .
5074	ResumeAll is used to resume all tasks .
5075	Resume implements the Runner interface .
5076	SetChaos sets the Chaos setting .
5077	Connect connects to the session .
5078	ErrorHandler handles errors .
5079	assert asserts that the given transaction has been created .
5080	Server returns the mongo server .
5081	ServerInfo returns the mongo server info
5082	InitialAcquire initializes a new connection .
5083	Acquire a new mongo server .
5084	Release releases a connection
5085	SetTimeout sets the timeout .
5086	Error implements the Error interface .
5087	Error returns a string representation of the struct .
5088	New creates a new Validate
5089	Field implements the Validate interface .
5090	FieldWithValue adds a field with the given value .
5091	Create a new article
5092	Edit the article
5093	List lists all articles
5094	Update updates an article .
5095	Delete deletes an article .
5096	ObjectIdHex converts a string to an ObjectId .
5097	IsObjectIdHex returns true if the string is an object id .
5098	NewObjectId returns a new ObjectId .
5099	NewObjectIdWithTime returns a new ObjectId with the given time .
5100	MarshalJSON serializes an ObjectId .
5101	byteSlice returns a byte slice of an ObjectId .
5102	Time returns the time of the object .
5103	Counter returns the counter .
5104	Insert inserts a document into the bulk .
5105	Run executes the bulk .
5106	hasLengthOf returns true if the field has length of the given field .
5107	hasMinOf returns true if the current value is greater than the given parameter .
5108	hasMaxOf returns true if the current value is less than the given parameter .
5109	Connect connects to MongoDB
5110	SetDebug sets the debug flag .
5111	Remove removes a file .
5112	SetChunkSize sets the chunk size .
5113	SetId sets the id of the file .
5114	SetName sets the file name .
5115	SetContentType sets the content type of the file .
5116	Size returns the size of the file .
5117	SetUploadDate sets the UploadDate field s value .
5118	Abort implements the GridFile interface .
5119	Write writes data to file .
5120	Read reads bytes from the file .
5121	Set cursor position
5122	collectAnsiIntoIntoAttributes computes the flags for the given ANSI mode .
5123	invertAttributes returns the set of flags for the given windows mode .
5124	simulateLF returns true if the current window has changed .
5125	executeLF executes the LF command .
5126	effectiveSr returns the effective scroll region .
5127	Scroll the screen to the screen .
5128	ScrollLine will scroll the screen to the screen .
5129	bytesToHex converts a byte slice into a hexadecimal string .
5130	Reads the contents of the file cache entry .
5131	New returns a new cached downloader .
5132	populateCache is used to populate the cache .
5133	Log logs a message
5134	Output implements the Color interface
5135	Success logs a success message
5136	Info logs a message
5137	Error logs an error message
5138	Warn logs a warning
5139	Running sets the running color
5140	Log logs a message
5141	Output writes a message to the UI .
5142	Error prints the error message .
5143	Log logs a message
5144	Output prints a message .
5145	Success creates a success message
5146	Info logs a message
5147	Error logs an error message
5148	Warn logs a warning message
5149	Running implements the Prefix interface .
5150	New returns a new BasicUI instance
5151	AddColor returns a new ColorUI
5152	Log logs a message
5153	NewMongoStore creates a new MongoStore .
5154	New creates a new session
5155	Push adds a new segment to the stack .
5156	Pop removes the current segment from the stack .
5157	Peek returns the next segment .
5158	RecordMetricsWithRecorder is used to record metrics .
5159	Init initializes the embedded mode .
5160	errNo returns the error code for the given error .
5161	call caller
5162	doInit initializes the library
5163	RequestShutdown sends a request to the server .
5164	NewTx creates a new transaction .
5165	NewRequestTx creates a new transaction .
5166	NewBackground creates a new transaction .
5167	Start starts a transaction .
5168	End terminates the transaction .
5169	StartGeneric starts a new segment .
5170	StartDatastore starts a new datastore .
5171	Start an external segment .
5172	EndSegment implements the Tracer interface .
5173	ReportError reports an error .
5174	WithTx adds a transaction to the context .
5175	FromContext returns a transaction from a context .
5176	TraceExternal creates a new Trace .
5177	TraceGeneric creates a new Trace .
5178	TraceDatastore starts a datastore .
5179	trace returns a Trace with the given fn .
5180	Serve returns a HandlerFunc that serves files .
5181	Purge removes all items from the cache .
5182	RemoveOld removes the oldest item from the cache .
5183	Keys returns the list of keys .
5184	removeElement removes an entry from the cache .
5185	DefaultCluster returns a new Cluster .
5186	NewClusterWithHost creates a new cluster with the given hosts .
5187	AddHost adds a host to the cluster .
5188	Host returns the host .
5189	RemoveHost removes a host from the cluster .
5190	Hosts returns the list of hosts .
5191	Less returns true if the column is less than the given record .
5192	Less returns true if the field value is less than the given record .
5193	Index creates a new index .
5194	Indexes returns a copy of the schema .
5195	HasIndex returns true if the given index exists .
5196	NewPQLBaseQuery creates a PQLBaseQuery .
5197	Add adds a query to the batch .
5198	NewPQLRowQuery creates a PQLRowQuery .
5199	String returns a string representation of the index options .
5200	OptIndexKeys sets the keys for the index .
5201	OptIndexTrackExistence sets the trackExistence field s value .
5202	NewIndex creates a new Index .
5203	Field returns a copy of the fields .
5204	HasField returns true if the given field name exists .
5205	Field returns a new Field .
5206	BatchQuery creates a new PQL query .
5207	RawQuery returns a PQLBaseQuery .
5208	Intersect returns a PQLRowQuery .
5209	Not returns a new PQLRowQuery
5210	Count returns the query for the given row .
5211	Options adds options to the query .
5212	GroupBy returns a PQL query with the given rows .
5213	GroupByLimit returns a PQL query with the specified limit .
5214	GroupByFilter adds a filter to the database .
5215	OptFieldTypeSet sets the field type for the field type .
5216	OptFieldTypeInt sets the field type for the field type .
5217	OptFieldTypeTime sets the TimeType field s value .
5218	OptFieldTypeMutex sets the field type for field type .
5219	Row returns a new PQLRowQuery query .
5220	Set sets the field s value .
5221	SetTimestamp sets the timestamp for a field .
5222	ClearRow removes a row from the field .
5223	RowTopN selects the row at the given row .
5224	FilterAttrTopN adds the top - level attribute to the query .
5225	Store creates a new PQL query .
5226	NotNull returns a PQLRowQuery .
5227	Between queries between two fields .
5228	SetIntValue sets the int value for the field .
5229	NewPQLRowsQuery creates a PQLRowsQuery .
5230	Rows returns a PQLRowsQuery .
5231	RowsLimit returns a PQL query for a field .
5232	Result returns the query result .
5233	MarshalJSON returns the JSON representation of the RowResult .
5234	NewURIFromHostPort creates a new URI from a host port .
5235	NewURIFromAddress returns a new URI .
5236	SetScheme sets the scheme .
5237	SetHost sets the host .
5238	Normalize returns a normalized URI .
5239	Equals returns true if two URI values are equal .
5240	ValidLabel returns true if the label is valid .
5241	ValidKey returns true if the key is valid .
5242	NewClient creates a new client with the given address and options .
5243	Query performs a query .
5244	CreateIndex creates a new index .
5245	CreateField creates a new field .
5246	EnsureIndex creates a new index
5247	EnsureField creates a new field
5248	DeleteIndex deletes an index
5249	DeleteField deletes a field .
5250	SyncSchema updates the schema
5251	Schema returns the schema .
5252	ImportField is used to import a field iterator .
5253	ExportField returns a reader for the given field .
5254	Status returns the status of the service .
5255	httpRequest sends a HTTP request to the client
5256	doRequest sends a request to the client
5257	statusToNodeShardsForIndex returns a map of nodes for a given index .
5258	ExperimentalReplayImport reads the contents of the given io . Reader .
5259	View by time
5260	OptClientSocketTimeout sets the socket timeout .
5261	OptClientConnectTimeout sets the connection timeout .
5262	OptClientPoolSizePerRoute sets the pool size per route .
5263	OptClientTotalPoolSize sets the total pool size .
5264	OptClientTLSConfig sets the TLS configuration .
5265	OptClientManualServerAddress sets the manual server address .
5266	ExperimentalOptClientLogImports returns a ClientOptImports that can be used to configure the client .
5267	OptQueryColumnAttrs sets the ColumnAttrs field s value .
5268	OptQueryShards adds shards to the query .
5269	OptQueryExcludeRowAttrs sets the ExcludeRowAttrs field s value .
5270	OptQueryExcludeColumns sets the ExcludeColumns field s value .
5271	OptImportThreadCount sets the number of threads to use .
5272	OptImportBatchSize sets the batch size .
5273	OptImportStatusChannel sets the import status channel .
5274	OptImportClear returns a new import option .
5275	OptImportRoaring sets the AllowRoaring option .
5276	OptImportSort sets the sorting option .
5277	Read reads the data from the export .
5278	ColumnUnmarshallerWithTimestamp returns a RecordUnmarshaller with the given format .
5279	NewIterator returns a new Iterator .
5280	NewColumnIterator returns a new Iterator .
5281	NewColumnIteratorWithTimestampFormat creates a new Iterator with the given format .
5282	NewValueIterator returns a new Iterator .
5283	NextRecord returns the next record .
5284	FieldValueUnmarshaller returns an instance of FieldValueUnmarshaller
5285	MergeConfig merges two Config into a Config .
5286	stringFormat returns a string representation of the config
5287	elementFromLine returns a slice of elements from a line .
5288	WidthsFromLines returns the width of the given lines .
5289	Format formats the given lines into a string .
5290	Build builds a URL based on the given values .
5291	Build builds the path to the URL .
5292	braceIndices returns the indices of a brace .
5293	Extract extracts the values from the request .
5294	mergeValues merges two values .
5295	redirectPath returns the redirect handler for the given path .
5296	CompileRegexp compiles a regular expression .
5297	MatchString returns true if the given string matches the regular expression .
5298	Values returns the values of the regexp .
5299	Revert returns a string representation of the regexp .
5300	RevertValid returns a string representation of the regexp .
5301	write writes a regular expression to the template .
5302	NewMultiple creates a new cmp .
5303	New creates a new Cmp .
5304	CompareFile compares two files
5305	readPartial reads a part of a cmp .
5306	postEOFheck checks if the reader is valid .
5307	Stats returns a list of stats
5308	Info returns information about the HAProxy
5309	RunCommand implements the HAProxyClient interface .
5310	IsExist returns true if the given error is an error .
5311	check returns true if file exists
5312	Contain returns true if the file contains a given byte slice .
5313	ContainString returns true if the file contains the given string .
5314	init initializes the log .
5315	StartLogger starts the logger
5316	openDBFile opens a database file .
5317	backup backup file
5318	New returns a new Packager .
5319	RegisterCrypt registers a crypt .
5320	New returns a new Crypter instance .
5321	NewFromHash creates a new Crypter from a hash .
5322	Text implements Scanner .
5323	Exec executes a command .
5324	ExecSudo executes a command and returns an error .
5325	nextUID returns the uid of the user
5326	nextGUID returns the next group in the database .
5327	NextSystemUID returns the next system UID .
5328	NextSystemGID returns the next GUID .
5329	NextUID returns the next UUID .
5330	NextGID returns the next GUID .
5331	NewShadow returns a new shadow
5332	parseShadow parses a shadow row
5333	LookupShadow returns a shadow by name .
5334	Add adds a shadow to the shadow .
5335	Copy copies the source file to dest .
5336	Create creates a new file .
5337	loadConfig loads the config
5338	NewEdit creates a new edit .
5339	AppendString appends a string to the edit .
5340	Comment adds comments to the file .
5341	CommentOut adds comments to the edit line .
5342	CommentM comment
5343	CommentOut writes a comment to a file .
5344	ReplaceN replaces the given Replacer with n .
5345	ReplaceAtLine implements the Edit interface .
5346	ReplaceAtLineN replaces the given replacer at the given position .
5347	init initializes the settings
5348	getSettingsForUid returns the settings for a user .
5349	Set the value of a file .
5350	Makes a set of values to a file .
5351	Set adds a key to the user
5352	Makes a set of keys and values
5353	SetForUid sets the key for a user .
5354	MSetForUid gets a set of keys for a user .
5355	Sets the value of the given key .
5356	Mets a set of values to the global settings .
5357	SetSysForUid sets the value for the given UID .
5358	MSSetsForUid sets the values for the given UID .
5359	NewGShadow returns a new GShadow instance
5360	parseGShadow parses a GShadow .
5361	lookup looks for a field and returns it .
5362	LookupGShadow returns a GShadow .
5363	Add adds a new group to the group .
5364	NewUser returns a new user .
5365	NewSystemUser returns a new User .
5366	IsOfSystem returns true if user is in system
5367	parseUser parses a user from a string .
5368	lookup looks up the user for the given line
5369	LookupUID looks up a user for a given uid .
5370	LookupUser returns a user by name
5371	GetUsername returns the username of the user .
5372	GetUsernameFromEnv returns the username from the environment variable .
5373	AddUser creates a new user .
5374	AddSystemUser creates a system user .
5375	Add adds a new user to the database .
5376	DelUser deletes a user
5377	ParseFile parses a configuration file .
5378	Print prints the configuration .
5379	Getbool returns a bool indicating if the key exists .
5380	GetInt returns the value at key .
5381	Get uint value
5382	GetFloat gets a float value from the config .
5383	Set implements the Config interface .
5384	Run runs a command .
5385	NewInfo returns a new info object
5386	OwnerHasHas returns true if the user has owner permissions .
5387	GroupHas returns true if the group has the given permissions .
5388	OthersHave returns true if the current user has the given permissions .
5389	OwnerHas returns true if the user has a permission .
5390	lookupCrypter looks up the shadow password and returns it .
5391	Passwd sets the password of the shadow .
5392	Passwd sets the password for the given key .
5393	ChPasswd adds a password to the user .
5394	ChPasswd adds a key to the group
5395	LockUser locks a user .
5396	NewGroup creates a new Group .
5397	NewSystemGroup creates a new Group .
5398	IsOfSystem returns true if the group belongs to .
5399	parseGroup parses a group .
5400	lookup looks for a group in a group
5401	LookupGID returns the group associated with the given group .
5402	LookupGroup returns a group by name .
5403	Get groups
5404	GetgroupsName returns the name of the group .
5405	AddGroup adds a group to the group .
5406	AddSystemGroup adds a new group to the system .
5407	Add adds a new group to the database .
5408	DelGroup deletes a group
5409	AddUsersToGroup adds members to a group
5410	DeleteUsersInGroup deletes all members in a group
5411	checkGroup checks if the group contains the given value
5412	Detect returns the distribution .
5413	AddSystem adds a system to the world .
5414	AddSystemInterface adds a system interface to the world .
5415	AddEntity adds an entity to the world .
5416	Update updates the current world .
5417	RemoveEntity removes the given entity from the system .
5418	NewBasics returns a slice of basic entities .
5419	AppendChild appends a new child entity .
5420	Less returns true if i is less than j .
5421	Swap swaps two identifiers .
5422	NewGroup creates a new Group .
5423	Members returns the members of the group .
5424	Leave is part of the group .
5425	Add adds a new member to the group .
5426	Broadcast sends a message to the group .
5427	Send sends a message to the group .
5428	Send sends a message to the group .
5429	update updates the item with the given priority .
5430	NewBot creates a new Bot .
5431	Uptime returns the timestamp of the bot .
5432	Handle incoming messages .
5433	Handle outgoing messages .
5434	WaitFor returns true if the message is a filter .
5435	Standard registration .
5436	send user command
5437	SetNick sets the nick
5438	Run starts the bot .
5439	ChMode sends a channel
5440	Close closes the bot .
5441	AddTrigger adds a trigger to the bot .
5442	Handle returns true if the trigger is a trigger
5443	StartUnixListener starts the Unix listener .
5444	 hijack session .
5445	End returns true if the call is ended .
5446	EndUnsuccessful returns true if the call was completed .
5447	Cancel cancels a call
5448	Hup implements the CallService interface .
5449	Redirect redirects to a given URL .
5450	Create a new Call
5451	MakeCall mocks base method
5452	GetCallsInRange returns a list of call dates in range .
5453	GetNextCallsInRange returns the next call to the next page .
5454	GetRecordings returns a list of recording records .
5455	GetRecordingsIterator returns a new RecordingPageIterator .
5456	Get returns a voice price .
5457	Get returns a voice number .
5458	GetPage returns the current country price page .
5459	Get returns a message price .
5460	GetPage returns a page of CountryMessages .
5461	Delete deletes a key .
5462	GetAlertsInRange retrieves all alerts in the given range .
5463	GetNextAlertsInRange returns a list of alerts in the specified range .
5464	Description returns the description of the alert .
5465	StatusCode returns the status code .
5466	Friend returns the human readable representation of the direction .
5467	SendMessage sends a message to a message .
5468	GetPage returns the next page .
5469	GetMessagesInRange retrieves all messages in the given range .
5470	GetNextMessagesInRange returns the next messages in the given range .
5471	Get returns a new Queue
5472	Create creates a new queue .
5473	Delete deletes a queue .
5474	GetConferencesInRange returns a list of Conference objects in a range .
5475	GetNextConferencesInRange returns the next conference dates in the specified range .
5476	NewPhoneNumber returns a phone number .
5477	Pretty formats a phone number .
5478	NewTwilioTime returns a new TwilioTime instance
5479	price returns the price for the given unit .
5480	Capitalizes the given string .
5481	Delete deletes the specified ID .
5482	NewPricingClient creates a new API client
5483	NewClient creates a new client
5484	CreateResource creates a new resource .
5485	MakeRequest mocks base method
5486	Delete deletes an application .
5487	URL returns the URL for Recording .
5488	Delete deletes a recording .
5489	Get returns a media .
5490	Buy a phone number
5491	Get gets a phone number .
5492	Release releases a number .
5493	GetPage returns the next phone number .
5494	Get returns a Transcription .
5495	Delete deletes a transcription .
5496	Get returns a number of NumberPricePrice prices for a country .
5497	GetPage returns the page price page
5498	Next returns a pointer to the next page
5499	NewNextPageIterator returns a new PageIterator .
5500	containsResultsInRange returns true if the given range is in range .
5501	indexOutsideRange returns the indexes of the results in the given range .
5502	NewDefaultLogger returns a new FileLogger
5503	initLoggerBySize initializes logger by size
5504	initLoggerByDaily creates a new logger based on the date .
5505	fileMonitor starts the log monitor
5506	fileCheck checks if the file is a file log .
5507	Close closes the log file .
5508	logWriter creates a new log writer .
5509	Printf prints a message to the log .
5510	Print implements the Logger interface .
5511	Println implements the Logger interface .
5512	SetMaxFileCount sets the max file count .
5513	SetMaxFileSize sets the maximum size of the file .
5514	fileSize returns the size of the file .
5515	GetProfile returns a profile
5516	Handler implements the Messenger interface .
5517	Delete get started button
5518	NewWebURLButton creates a new Button .
5519	NewPostbackButton creates a new Button
5520	NewPhoneNumberButton creates a new Button
5521	concaten concatenates a string into a string .
5522	commonKind returns the common kind of v1 .
5523	pushNumberValue pushes a number value to the stack .
5524	unsizedKind returns the kind of the given value .
5525	LuaToString converts a string to a string .
5526	mark marks a value .
5527	push pushes a value to the visitor .
5528	copySliceToTable converts a slice into a Lua table .
5529	GoToLua converts a Lua object to a Lua struct .
5530	NewLuaObject creates a new LuaObject .
5531	NewLuaObjectFromName returns a new Lua object from the given name .
5532	NewLuaObjectFromValue creates a new Lua object from the given value .
5533	Close closes the object .
5534	Get gets a value from a Lua object .
5535	GetObject returns the value of a Lua object .
5536	Push registers a new Lua object .
5537	Setv sets the value of a Lua object .
5538	Iter returns a Lua table iterator .
5539	NewClient creates a new client with the given credentials .
5540	NewClientWithServerInfo creates a new client with server info .
5541	Status sets status
5542	Join a room
5543	Part part of a room .
5544	Say message to room
5545	PrivSay sends a message to the chat .
5546	KeepAlive implements the Client interface .
5547	RequestRooms requests for all clients
5548	Request users .
5549	Copy copies the contents of src into dst .
5550	ToTable converts a string to a table
5551	NumRows returns the number of rows in the table .
5552	LongestLine returns the longest line of the scenario .
5553	LongestLine returns the longest line of the feature .
5554	BuildAndRunDirWithGoTags runs the given directory with the given filters and returns an error .
5555	assembleImportPath returns the path to the import path .
5556	Sum computes the digest of the digest .
5557	Decode decodes an io . Reader .
5558	retryPutPart tries to retry a multipart upload .
5559	putPart is part of the large object .
5560	Aborts the large object .
5561	WaitInstanceUntilReady waits for a given VM until it is ready to be ready .
5562	FindPerformancePrice returns the price of a product .
5563	FindPerformanceSpacePrice returns the price of the product .
5564	FindPerformanceIOPICE returns the price of the product .
5565	WithTimeout adds the timeout to the query params
5566	WithContext adds the context to the findVmsByState params
5567	WithStates adds the states to the findVmsByState params
5568	WithPayload sets the Payload field s value .
5569	WithTimeout adds the timeout to the order VMByFilter params
5570	WithContext adds the context to the OrderVMByFilter params
5571	WithBody adds the body to the OrderByFilter params
5572	Delete deletes an instance
5573	Fetch returns the settings for the given instanceID .
5574	Update implements the Interface interface .
5575	NewHTTPClient returns a new SoftLayerClient
5576	New returns a new SoftLayerVool instance
5577	SetTransport sets the transport transport .
5578	Validate validates this VmsResponse .
5579	WithTimeout adds the timeout to the findVmsByDeployment params
5580	WithContext adds the context to the findVmsByDeployment params
5581	WithDeployment sets the deployment params
5582	WithTimeout adds the timeout to the update VMPAR params
5583	WithContext adds the context to the update VMParams
5584	WithBody adds the body to the update vm params
5585	NewAgentSettings returns a new AgentSettings .
5586	ConfigureNetworks sets the NetworkSettings field s value .
5587	DetachPersistentDisk deletes a persistent disk .
5588	Validate validates the client TLS options .
5589	WithTimeout adds the timeout to the query params
5590	WithContext adds the context to the findVmsByContext params
5591	WithBody adds the body to the findVmsByFilter params
5592	WithTimeout adds the timeout to the delete vmars params
5593	WithContext adds the context to the delete vpc params
5594	WithCid sets the cid params
5595	WithPayload sets the Payload field s value .
5596	Validate validates this state .
5597	WithTimeout adds the timeout to the update VM with the specified timeout .
5598	WithContext adds the context to the update VMWithState params
5599	WithBody adds the body to the update vm state params
5600	WithCid sets the cid params
5601	WithTimeout adds the timeout to the addVMPParams instance
5602	WithContext adds the context to the addvars params
5603	WithBody adds the body to the addVMParams instance
5604	Validate validates the agent options .
5605	WithTimeout adds the timeout to the ListVMPParams instance
5606	WithContext adds the context to the list vars params
5607	Validate validates the error
5608	WithPayload sets the Payload field s value .
5609	Validate validates the error type
5610	WithTimeout adds the timeout to the get VMByCid params
5611	WithContext adds the context to the get VMByCid params
5612	WithCid sets the cid params
5613	Validate validates this VMResponse .
5614	LoadCodec returns a new WordCodec instance .
5615	MustLoadCodec returns a new WordCodec .
5616	loadBank loads a list of words from a bank .
5617	bytesFromWordsFromWords returns the length of the given number of bytes .
5618	GetIndex returns the index of the given word .
5619	Sum returns the SHA256 of the given byte slice .
5620	Equals returns true if the given PrivKey is equal to other .
5621	Generate generates a new private key for the given index .
5622	Set adds a key to the map .
5623	NewPrivKeyP256k1k1k1k1k1k1k1k1k1k1k1k1k1k1k1k1
5624	ValidateKey checks if the key is valid .
5625	Sign returns a signature for the given message .
5626	getPubKey returns the pubkey associated with the given PrivKey .
5627	Equals returns true if the given PrivKey is equal to the same key .
5628	SimpleHashFromHashers returns a hash of hashes .
5629	Verify returns true if the given hash matches the given hash .
5630	computeHashFromAunts computes the hash from the given index and returns the hash .
5631	ComputePrivateKey computes the private key for the given path .
5632	ComputeBTCAddressForPrivKey returns the BTC address for the given private key .
5633	SignBTCMessage signs a message with the given private key .
5634	ComputeMastersFromSeed generates a hash from a seed .
5635	ComputeWIF computes a WIF from a private key .
5636	DerivePublicKeyForPath returns the public key for the given path .
5637	DerivePrivateKey derives a private key from a private key .
5638	DerivePublicKey extracts a public key from the given chaincode .
5639	addPoints adds a point to the given b .
5640	addScalars adds a scalar to b .
5641	HexDecode decodes a hex string .
5642	I64 computes a 64 - bit hash of data .
5643	BTCAddrFromPubKeyBytes returns a base58 encoded string from the given public key .
5644	BTCAddrAddrBytesFromPubKeyBytes returns the hash of the given public key .
5645	WIFFromPrivKeyBytes returns a WIF from a private key .
5646	PubKeyBytesFromPrivKeyBytes converts a private key to a public key .
5647	ReverseBytes returns a slice of bytes .
5648	getLedger returns the ledger .
5649	CreateLedger creates a new ledger
5650	CreateOffline creates a new key .
5651	Recover implements the Keybase interface .
5652	List lists all keys in the database .
5653	Get returns information about a keybase .
5654	Sign implements the Keybase interface .
5655	ExportPubKey implements the Keybase interface .
5656	ImportPubKey imports a public key .
5657	Update implements the Keybase interface .
5658	randBytes returns a random byte slice .
5659	GenerateFromPassword generates a hash from a password .
5660	CompareHashAndPassword compares two hashes .
5661	Cost returns the cost of the given password .
5662	decodeCost decodes the cost from a string .
5663	ASTToString converts AST to string .
5664	writeByte writes a byte .
5665	writeString writes a string .
5666	Print an AST node .
5667	printInner implements the interface .
5668	printBase prints a base AST .
5669	Prints the dimension of an array .
5670	Prints the arguments of the function type .
5671	parenthesize parses an AST node .
5672	printInner prints a list of AST nodes .
5673	printOneInner implements the interface .
5674	isEmpty returns true if the AST is empty .
5675	Filter converts a string to a string .
5676	ToString converts a string to a string .
5677	ToAST converts a name into an AST .
5678	doDemangle returns the AST of the given name .
5679	copy returns a copy of this state .
5680	fail panics .
5681	failEarlier attempts to fail the error .
5682	Advances the current state .
5683	checkChar checks if the given character is a character .
5684	Error returns the error message .
5685	adjustErr returns an error if the error occurred .
5686	hasReturnType returns true if the AST is a direct type .
5687	isCDtorConversion returns true if the AST isCDtorConversion .
5688	Java resource .
5689	mergeQualifiers merges two Qualifiers .
5690	setTemplate sets the template for the given AST .
5691	clearTemplateArgs clears the template arguments .
5692	exprList returns a list of expressions .
5693	cloneSuffix clones the suffix of the AST .
5694	compile returns a copy of AST .
5695	findArgumentPack finds an ArgumentPack from an AST .
5696	doDemangle prints the name of the given name .
5697	options returns a slice of options
5698	MultipartForm mocks base method
5699	Json creates a new martini handler
5700	validateStruct validates the given object .
5701	ErrorHandler handles errors .
5702	Get returns the value of a locale
5703	SetMessage sets the message for the given language .
5704	Starts the idle server .
5705	 IdleWithFallback implements the Client interface .
5706	putToBottom adds the given address to the bottom of the Sentinel
5707	defaultPool returns a new redis pool .
5708	close closes the pool .
5709	MasterAddr returns the master address .
5710	 slave addresses
5711	Addr returns the address of the slave .
5712	Available returns true if the slave is available .
5713	Slaves returns the list of slaves .
5714	inelAddrs returns a list of all Sentinel addresses .
5715	Close closes the Sentinel .
5716	NewServerList creates a new server list .
5717	NewFromServers creates a new Client .
5718	Close closes the client .
5719	Get retrieves a item from the cache .
5720	GetMulti retrieves all items from the given list of keys .
5721	Set sets a single item .
5722	Add adds a new item to the server .
5723	CompareAndSwap swaps the given item and casid .
5724	Delete deletes a key
5725	Increment increments the value of a key .
5726	Flush flushes the server .
5727	ChildClosing closes the child process .
5728	OnClosingContext returns a context for the given process .
5729	OnClosedContext returns a context for the process .
5730	LimitChan returns a channel for a given limit .
5731	WithParent adds a child process to the parent process .
5732	WithContextAndTeard returns a process with the given context .
5733	SetTeardown sets the teardown function .
5734	close closes the process .
5735	CloseAfterChildren closes the process .
5736	Ticker creates a new process .
5737	TickerGo go through a goroutine
5738	Identify attempts to identify a customer
5739	Track tracks an event
5740	TrackAnonymous tracks an anonymous event
5741	Delete deletes a customer
5742	AddDevice adds a device to the customer .
5743	DeleteDevice deletes a device .
5744	initLocales initializes the locale for the given options .
5745	I18n creates a new macaron .
5746	FetchCheck fetches a check .
5747	FetchChecks returns a list of checks
5748	New creates a new API API .
5749	Get returns the contents of a file
5750	Post performs a POST request
5751	apiRequest sends a request to the API
5752	FetchGraph fetches a graph from a CIDType .
5753	Fetch graphs
5754	UpdateGraph updates a graph
5755	Create a Graph
5756	DeleteGraph deletes a graph
5757	DeleteGraphByCID deletes a graph by cID
5758	FetchCheckBundle fetches a CheckBundle
5759	FetchCheckBundles returns a list of checkBundles .
5760	UpdateCheckBundle updates a CheckBundle .
5761	DeleteCheckBundle deletes a CheckBundle
5762	DeleteCheckBIDByCID deletes a check bundle by cid
5763	Gauge sets the value of a metric
5764	SetGauge sets a gauge value
5765	AddGauge adds a gauge to the metric .
5766	RemoveGauge removes a gauge .
5767	RemoveGaugeFunc removes a gauge function .
5768	Get gauge type
5769	FetchCheckBundleMetrics fetches a CheckBundleMetrics .
5770	UpdateCheckBundleMetrics updates a CheckBundleMetrics .
5771	Get broker
5772	getBrokerCN returns the CN of the broker
5773	Select broker
5774	checkerSupportsCheckType returns true if the given check type is supported .
5775	FetchMetricCluster returns a MetricCluster
5776	FetchMetricClusters returns a list of MetricClusters with the specified extras .
5777	UpdateMetricCluster updates a metric
5778	CreateMetricCluster creates a new MetricCluster
5779	DeleteMetricCluster deletes a metric
5780	DeleteMetricClusterByCID deletes a metric by cID
5781	loadCACert loads the CAC cert from the cache .
5782	fetchCert retrieves the certificate from the cache .
5783	Fetch accounts
5784	UpdateAccount updates an account
5785	FetchAnnotation fetches an annotation from a CIDType .
5786	FetchAnnotations retrieves all annotations from the API .
5787	UpdateAnnotation updates an annotation .
5788	Create an annotation
5789	DeleteAnnotation deletes an annotation
5790	DeleteAnnotationByCID deletes an annotation by cID
5791	FetchOutlierReport fetches an outlier report .
5792	FetchOutlierReports returns a list of outlier reports .
5793	UpdateOutlierReport updates the outlier report .
5794	CreateOutlierReport creates a new OutlierReport
5795	DeleteOutlierReport deletes an OutlierReport
5796	DeleteOutlierReportByCID deletes out outlier report by cid
5797	FetchUsers returns a list of users
5798	UpdateUser updates a user
5799	SetMetricTags adds tags to the metric
5800	AddMetricTags adds tags to the metric
5801	FetchMetric fetches a metric
5802	FetchMetrics retrieves metrics from the API .
5803	Update a metric
5804	FetchAcknowledgement fetches an acknowledgement for a given CID type .
5805	FetchAcknowledgements returns a list of acknowledged messages .
5806	UpdateAcknowledgements updates an acknowledgement .
5807	Create acknowledgement
5808	Reset resets the metrics .
5809	snapshot returns a copy of the metrics
5810	Timing adds a value to the metric
5811	RecordValue sets the value for a given metric .
5812	RecordCountForValue records a value for a given value .
5813	SetHistogramValue sets the value for a given metric .
5814	RemoveHistogram removes a metric .
5815	NewHistogram creates a new histogram
5816	RecordValue implements the Histogram interface .
5817	searchBundle searches for a given criteria
5818	createNewCheck creates a new check
5819	makeSecret returns a random secret
5820	fetchCheckBySubmissionURL fetches a check by submission URL .
5821	Initialize initializes the check manager .
5822	IsReady returns true if the check manager is ready .
5823	GetSubmissionURL returns the URL for the submission .
5824	ResetTrap is used to reset a trap .
5825	RefreshTrap is used to refresh a trap
5826	FetchRuleGroup retrieves a rule set by cid
5827	FetchRuleSetGroups retrieves the list of rule sets .
5828	UpdateRuleSetGroup updates a RuleSetGroup .
5829	CreateRuleSetGroup creates a new RuleSetGroup .
5830	DeleteRuleSetGroup deletes a rule set .
5831	DeleteRuleSetGroupByCID deletes a group by cID .
5832	FetchDashboard fetches a dashboard .
5833	FetchDashboards retrieves all dashboards .
5834	UpdateDashboard updates a dashboard .
5835	CreateDashboard creates a dashboard
5836	DeleteDashboard deletes a dashboard .
5837	DeleteDashboardByCID deletes a dashboard .
5838	SetText sets a text value .
5839	SetTextValue sets the text value for the given metric .
5840	RemoveText removes the text for the given metric .
5841	Remove text function
5842	FetchAlert fetches an alert
5843	Fetch alerts
5844	FetchRule returns a rule set .
5845	FetchRuleSets retrieves the list of rules from the API .
5846	UpdateRule updates a rule set .
5847	CreateRuleSet creates a new RuleSet .
5848	DeleteRuleSet deletes a rule set .
5849	DeleteRuleSetByCID deletes a rule set by cID
5850	IncrementByValue adds a value to the metric .
5851	Set sets the value for a metric .
5852	RemoveCounter removes a counter .
5853	Remove counter function
5854	PromOutput returns the prometheus output .
5855	Flush writes metrics to the collector .
5856	FetchWorksheet fetches a worksheet .
5857	FetchWorksheets returns a list of worksheets .
5858	UpdateWorksheet updates a workspace .
5859	CreateWorksheet creates a new worksheet .
5860	DeleteWorksheet deletes a workspace
5861	DeleteWorksheetByCID deletes a worksheet .
5862	FetchContactGroup fetches a contact group
5863	Fetch contact groups
5864	UpdateContactGroup updates a contact group .
5865	CreateContactGroup creates a contact group .
5866	DeleteContactGroup deletes a contact group
5867	Fetch broker
5868	FetchBrokers returns a list of all Brokers
5869	ActivateMetric implements the CheckManager interface .
5870	AddMetricTags adds tags to the check .
5871	addNewMetrics adds new metrics to the checkBundle
5872	inventory metrics
5873	countNewTags returns the number of tags in the current tag .
5874	Pluralize returns the plural form of the given word .
5875	Singularize returns the singular form of the given word .
5876	Capitalize capitalizes a word .
5877	amelize converts a string to camelcase
5878	getSuitableAlgorithm from curve
5879	getAlgorithmFromKeyData returns the algorithm for the given key .
5880	buildEncArgs builds a JSON encoded JSON encoded string .
5881	doDecode decodes a JSON string .
5882	doEnc encodes a JSON string into a byte slice .
5883	Transport sets the transport .
5884	Proxy adds a proxy to the service account
5885	Expiration sets the expiration time .
5886	Encode encodes an object into a byte slice .
5887	PeekHeaderField reads a header field from buf .
5888	PeekAlgorithm returns the algorithm s algorithm .
5889	PeekAlgorithmAndIssuer returns an Algorithm and issuer .
5890	NewEllipticSigner returns a new Signer .
5891	NewTokenSource creates a new token source
5892	Client returns a new http client
5893	Sign implements the RSA method .
5894	Verify verifies that the given hash is valid .
5895	NewRSASigner returns a new Signer .
5896	getFieldWithTag returns the field with the given tag
5897	decodeToObjOrFieldWithTagWithTag is a helper function to decode an object with the given tag .
5898	grabEncodeTargets takes an object and returns the payload and payload .
5899	encodeTargets encodes the given object into the target .
5900	peekField returns the value of a field from buf .
5901	ExpiresIn sets the expiration in seconds .
5902	Claim sets a claim .
5903	Transport sets the http transport
5904	NewHMACSigner returns a new HMACSigner .
5905	FromJSON constructs a GServiceAccount from a JSON string .
5906	FromReader creates a GServiceAccount from an io . Reader .
5907	FromFile returns a GServiceAccount from a file .
5908	Signer returns the signer .
5909	Encode encodes an object .
5910	UnmarshalText implements the Unmarshaler interface .
5911	DecodeUnverifiedToken decodes unverified token from buf .
5912	PublicKey returns the public key .
5913	PrivateKey returns the private key .
5914	RegisterLocation registers a location for a location .
5915	NewArena returns a new Arena .
5916	NewSkiplist creates a new Skipsist .
5917	Init initializes the Iterator .
5918	Value returns the value of the iterator .
5919	Set implements the Iterator interface .
5920	SetMeta sets the meta value .
5921	Delete deletes the item from the list .
5922	isSameArray returns true if two arrays are equal .
5923	New creates a new client .
5924	WriteIndentedN writes the given text to w .
5925	WriteIndented writes a string to w .
5926	NewReporter creates a new reporter .
5927	PostCount adds a count count to the report .
5928	PostCountTime adds a timestamp to the report .
5929	PostValue adds a value to the report .
5930	PostValueTime adds a timestamp to the report .
5931	PostEZCount adds a count count to the metric
5932	PostEZCountTime adds a count time to the report .
5933	PostEZValue adds a value to the metric .
5934	PostEZValueTime adds the given value to the metric .
5935	PostCount adds a count to the reporter .
5936	PostCountTime adds a timestamp to the reporter .
5937	PostCountOne creates a post count for a given stat .
5938	PostValue adds a new value to the reporter .
5939	PostValueTime adds a timestamp to the reporter .
5940	PostEZCount adds a single element to the reporter
5941	PostEZCount adds a count to the reporter .
5942	PostEZCountTime adds a timestamp to the reporter .
5943	PostEZValue adds a value to the reporter .
5944	PostEZValueTime adds a timestamp to the reporter .
5945	NewBatchReporter returns a new BatchReporter .
5946	cleanHost cleans the host .
5947	GetHost returns the host for the given host .
5948	Rescan returns a new scan .
5949	Diff returns a copy of the Host .
5950	ToString returns a string representation of the Host .
5951	Init initializes scan .
5952	Add hosts
5953	SetHosts sets the host s configs .
5954	AddPorts adds ports to scan .
5955	SetPorts sets the ports of the scan .
5956	SetTCPPorts sets the ports of the scan .
5957	SetUDPPorts sets the ports of the scan .
5958	AddFlags adds flags to scan .
5959	IntenseAllTCPPorts returns a Scan for all TCP ports .
5960	ToString returns a string representation of the scan .
5961	CreateNmapArgs initializes NmapArgs .
5962	uint16ListToString converts a slice of uint16 to a string .
5963	ToString returns a string representation of the port .
5964	Counter returns the counter s counter .
5965	Increment increments the counter .
5966	NewHOTP creates a new HOTP .
5967	URL returns a URL for the HOTP key .
5968	 QR QR code
5969	truncate truncates a byte slice
5970	FromURL creates a new HOTP from a URL string .
5971	GenerateHOTP generates a new HOTP .
5972	YubiKey extracts the key from the input string .
5973	IntegrityCheck checks the validity of the HOTP .
5974	Check checks if the given code is valid .
5975	Marshal marshals a HOTP .
5976	Unmarshal deserializes a new HOTP .
5977	NewWriterPool creates a new WriterPool .
5978	Get returns a writer for the given writer .
5979	Len returns the number of bytes in the pool .
5980	NewReaderPool returns a new ReaderPool .
5981	Get retrieves a reader from the pool .
5982	SetRate sets the rate of the pool .
5983	Len returns the number of bytes in the pool .
5984	NewMeasuredWriter returns a new MeasuredWriter .
5985	BytesPerSec returns the number of bytes per second .
5986	NewMeasuredReader returns a new MeasuredReader .
5987	BytesPer returns the number of bytes per period
5988	BytesPerSec returns the number of bytes per time .
5989	ThttledReader returns a ThrottlerReader .
5990	ThttledWriter returns a ThrottlerWriter .
5991	NewDNSServer creates a new DNS server .
5992	qualifiedSrv returns the name of the DNS server
5993	qualifiedSrvHosts returns a list of SRVHosts for the given SRV record .
5994	GetA returns the A record associated with the given fqdn .
5995	SetA sets a new IP address
5996	DeleteA deletes a host .
5997	SetSRV sets the SRV record for the given service .
5998	DeleteSRV deletes a SRV record
5999	Json converts a string to a Typed type
6000	Must parses a JSON string into a Typed struct .
6001	JsonReader parses an io . Reader from an io . Reader .
6002	JsonFile parses a JSON file .
6003	JsonArray converts a JSON string to a typed array .
6004	JsonFileArray reads a JSON array from a file .
6005	Bool returns a bool indicating if the key is not present .
6006	BoolOr returns the boolean value if it exists .
6007	BoolMust returns a bool indicating if the key exists .
6008	BoolIf returns true if key is bool or false otherwise .
6009	IntOr returns the value at key .
6010	IntMust panic if key exists .
6011	IntIf returns the value of the given key .
6012	FloatOr returns the float value if it exists .
6013	FloatMust panics if key exists .
6014	FloatIf returns the float64 value if it exists .
6015	StringOr returns a string or string if it exists .
6016	StringMust panic if key exists .
6017	TimeOr returns the value of the given key .
6018	TimeMust returns the value for the given key .
6019	TimeIf returns the value of the given key .
6020	ObjectMust panics if key exists .
6021	InterfaceOr returns the value of the given key .
6022	InterfaceMust panic if key is not present .
6023	InterfaceIf returns the value for the given key .
6024	Bools returns a slice of bool values .
6025	BoolOr returns a slice of bool if it exists .
6026	Ints returns a slice of ints .
6027	Ints6464 returns a slice of ints .
6028	Floats returns a slice of float64 values .
6029	Strings returns a slice of strings .
6030	Objects returns the list of objects associated with the given key .
6031	ObjectIf returns a copy of the given key .
6032	GetSessions returns a list of session sessions .
6033	ObjectChange implements the Handler interface .
6034	AutoOfferingPopup pops a list of jobs
6035	MarshalJSON encodes a base64 number into a byte slice .
6036	Scan implements the Scan interface .
6037	NewWorker creates a new worker
6038	NewLoggerBase creates a new LoggerBase .
6039	Log implements Logger interface .
6040	PreAccountAddBalanceApproveApprove is used to add a new PTC account for the given job .
6041	PreAccountAddBalance adds a new balance to the blockchain .
6042	AfterAccountAddBalance adds a new balance to the worker
6043	AfterAccountReturnBalance is used to update the balance of a job .
6044	AccountUpdateBalances updates the given job balances .
6045	PreAccountReturnBalance returns the balance of the given job .
6046	Get offering usage
6047	GetProductUsage returns the product usage .
6048	AddMapping adds a new port mapping to the network
6049	DeleteMapping deletes a port mapping
6050	PostCheque sends a payload to the given channel .
6051	NewHTTPClient returns a new http client .
6052	NewServer creates a new server .
6053	AddHandler registers a handler for the given namespace .
6054	ListenAndServe starts the HTTPS server .
6055	Recover recovers the service status from the database .
6056	ConnStr returns a string representation of the connection .
6057	NewDBFromConnStr creates a new instance of Reform .
6058	NewDB creates a new database .
6059	GetCountry returns the country for a given URL .
6060	Endpoint returns the endpoint for the given key .
6061	NewServer creates a new server .
6062	NewMonitor creates a new monitor .
6063	initLastProcessedBlock initializes the last processed block
6064	Start starts the monitor .
6065	newClient creates a new client
6066	Loop runs a loop in a goroutine .
6067	Offering returns a base64 encoded string .
6068	Endpoint returns the endpoint for the given channel key .
6069	Ping returns the status of the client .
6070	GetEthTransactions returns a list of ethTransactions .
6071	AgentSeal is part of AgentSeal
6072	ClientOpen opens a client to open a client
6073	PackWithSignature encodes a message with the given key .
6074	UnpackSignature returns the signature of the signature .
6075	VerifySignature returns true if the given message is valid .
6076	sign signature
6077	GetObject retrieves an object from the database .
6078	GetObjectByHash retrieves an object by hash .
6079	ToError converts an error to an error .
6080	SetPassword sets the password .
6081	UpdatePassword updates the password for the given password .
6082	GetToken returns the token for the given password .
6083	NewProcessor creates a new Processor .
6084	NewConfig returns a new Config
6085	NewQueue creates a new queue .
6086	AddWithDataAndDelay adds a job to the queue .
6087	AddWithData adds a job to the queue
6088	AddSimple adds a job to the queue .
6089	AddWithDelay adds a new job to the queue .
6090	Subscribe implements queue .
6091	Unsubscribe unsubscribe from the queue
6092	TopUpChannel adds a new channel to the queue
6093	ChangeChannelStatus changes the status of a channel .
6094	Get agent channels
6095	Get channels usage
6096	GetClientChannels returns a list of client channels .
6097	ReadSetting retrieves a setting from the database .
6098	ReadUintSetting retrieves a uint value from the database .
6099	ReadBoolSetting retrieves a boolean value from the database .
6100	SuspendChannel is part of the service .
6101	ActivateChannel activates a channel
6102	TerminateChannel terminates a channel .
6103	ExportPrivateKey returns the private key for the given token .
6104	Get accounts
6105	GenerateAccount creates a new account .
6106	ImportAccountFromHex creates an account from the given token .
6107	ImportAccountFromJSON creates a new account from JSON .
6108	TransferTokens transfers a token to the account .
6109	UpdateBalance updates a balance
6110	UpdateAccount updates an account .
6111	GetLastBlockNumber returns the last block number .
6112	GetEndpoint returns the endpoint for the given product .
6113	SetProductConfig sets the configuration for a product .
6114	NewWriterLogger creates a new logger .
6115	NewFileLogger creates a new Logger .
6116	NewClient returns a new client for the given type .
6117	Parse parses the given configuration .
6118	Map adds a mapping to the map
6119	AddMapping adds a mapping to the discovery .
6120	DeleteMapping deletes a mapping
6121	ReadFile reads a file .
6122	GetUserRole returns the user role for the given token
6123	NewHandler creates a new Handler .
6124	NewBackend creates a new Backend instance
6125	addTimeout adds a timeout to the backend
6126	PendingNonceAt returns the number of pending nonce .
6127	SuggestGasPrice returns the gas price for a transaction .
6128	EstimateGas returns the gas for the given call .
6129	cooperativeClose is used to close a transaction .
6130	GetTransactionByHash returns a transaction by its hash .
6131	RegisterServiceOffering registers a new service offering .
6132	PTCBalanceOf returns the balance of a transaction .
6133	PTCIncreaseApproval is used to create a new transaction .
6134	PSCBalanceOf returns the balance of a peer .
6135	PSCAddERC20 adds the amount of credit to the transaction .
6136	PSCGetOfferingInfo returns the info for the given hash .
6137	PSCGetChannelInfo returns the information about a channel .
6138	EthBalanceAt returns the balance at the given address .
6139	Pettle settles the transaction with the given block number .
6140	PscRemoveServiceOffer removes a service offering .
6141	PscupServiceOffering is used to pop up a pending service offering .
6142	FilterLogs returns a list of logs matching the given filter .
6143	HeaderByNumber returns a header by number .
6144	PTCAddress returns the PTC address .
6145	PSCAddress returns the PSC address .
6146	NewHandler creates a new Handler .
6147	keyFromChannelData returns the key from the channel data .
6148	AgentAfterChannelCreate creates a new agent after the given job .
6149	AgentAfterChannelTopUp is part of the worker .
6150	AgentAfterUncooperativeCloseRequest is part of the worker .
6151	AgentAfterUncooperative close the given job after uncooperative close .
6152	AgentAfterCooperative closes the given job .
6153	AgentPreServiceSuspend is part of the worker .
6154	AgentPreServiceUnsuspend is part of the worker .
6155	AgentPreServiceTerminate terminates the given job .
6156	AgentAfterOfferingMsgPublish publishes an offer after an offer .
6157	AgentAfterOffering deletes an offer after an offer .
6158	AgentPreOfferingDelete deletes an offer .
6159	checkInPeriod checks if the given block is in period .
6160	AgentPreOfferingPopup pops up a single offering .
6161	AgentAfterOffering populates the offer after the given job .
6162	Print prints a message .
6163	Error returns the error message .
6164	Message returns the message for the given error .
6165	Respond to the server
6166	RespondError sends an error to the server .
6167	handlePay handles payment requests .
6168	getOpenBlockNumber returns the open block number for the given job .
6169	Offering returns the offering for the given hash .
6170	HandlersMap returns a handler for the given worker .
6171	Version returns the version of the database .
6172	Migrate migrations
6173	NewMonitor returns a new Monitor
6174	Run runs the monitor .
6175	VerifyBillingLags verifies that the service is valid .
6176	VerifySuspendedChannelsAndUnsuspend implements the Monitor interface .
6177	VerifyChannelsForInactivity checks for all channels in the monitor .
6178	VerifySuspendedChannelsAnd terminates the service and terminates it .
6179	NewLogger creates a new logger .
6180	BalanceClosingHash returns the balance of the wallet .
6181	Run runs the given configuration .
6182	RecoverPubKey attempts to recover a public key from a transaction .
6183	GetTemplates returns a list of templates for the given token .
6184	CreateTemplate creates a new template
6185	CreateProduct creates a new product .
6186	UpdateProduct updates a product .
6187	GetProducts returns a list of products .
6188	NewHandler creates a new Handler .
6189	EncryptedKey returns a base64 encoded key .
6190	ExecuteCommand executes a command .
6191	AddMapping adds a new port mapping to the network .
6192	DeleteMapping deletes a port mapping
6193	NewMonitor returns a new Monitor
6194	GetOfferedIncome returns the amount of balances for the given offering .
6195	GetProductIncome returns the price for the given product .
6196	GetTotalIncome returns the total amount of channels in the channel .
6197	Up00001 migrates the database .
6198	GetSettings returns the settings for the given token .
6199	UpdateSettings updates a set of settings .
6200	IsIPv4 returns true if the string is a IPv4 address .
6201	IsHostname returns true if the given string is a hostname .
6202	IsNetPort returns true if the string is a net port .
6203	IsTLSCert returns true if the certificate is a TLS certificate .
6204	ValidateJSON validates a JSON schema .
6205	NewConfig returns a new Config instance
6206	ReadJSONFile reads a JSON file .
6207	WriteJSONFile writes data to a file .
6208	IsUUID returns true if the string is a UUID .
6209	ExeDirJoin returns the path to the executable directory
6210	RootPath returns the root path .
6211	Caller returns the caller s caller .
6212	CheckConnection returns true if the connection is a connection .
6213	ClientAfterChannelCreate creates a new client after the given job .
6214	ClientEndpointCreate creates a new client endpoint .
6215	ClientAfterUncooperativeClose closes a channel after uncooperative close .
6216	ClientAfterCooperative closes a channel after the given job .
6217	ClientPreServiceTerminate sends a client to the queue .
6218	ClientPreServiceSuspend sends a client to the queue .
6219	ClientPreServiceUnsuspend implements the Worker interface .
6220	ClientPreUncooperativeClose implements the Worker interface .
6221	ClientPreChannelTopUp sets the top - level top - level top of the given job .
6222	ClientAfterChannelTopUp updates the job after the given job .
6223	ClientUncooperativeCloseRequest is called when a client is uncooperative .
6224	ClientAfterUncooperativeCloseRequest is called when a client is uncooperative .
6225	ClientAfterOfferingMsgPublish publishes an offer to the client .
6226	ClientAfterOffering populates the offer after the given job .
6227	ClientAfterOfferingDelete deletes the offer after the given job .
6228	DecrementCurrentSupply drops the current offer .
6229	GetEndpoints returns a list of Endpoints for the given channel .
6230	GetGUISettings gets the GUI settings for the given token .
6231	SetGUISettings sets the settings for the given token .
6232	HandleFunc registers a handler for a given pattern .
6233	RequireHTTPMethods wraps http . HandlerFunc . HandlerFunc .
6234	RequireBasicAuth is part of the http . Handler interface .
6235	New returns a new Service
6236	EndpointMessage implements Service interface .
6237	ConnChange sends a connection to the server .
6238	FromBase64ToHex converts a base64 string to a hexadecimal string .
6239	HexToBytes converts hex string to bytes .
6240	ToBytes converts a base64 string to bytes .
6241	ToHash converts a base64 string to a hash .
6242	HHToHash converts a hex string to a hash .
6243	HexToAddress converts a hex string to an address .
6244	BytesToUint32 converts a byte slice to a uint32 .
6245	Uint32ToBytes converts uint32 to bytes .
6246	Uint64ToBytes converts uint64 to bytes .
6247	Uint192ToBytes converts a big integer to a byte slice .
6248	HashPassword returns a base64 encoded string .
6249	ValidatePassword checks if the given hash is valid .
6250	GetUint64Setting returns the value of the given key .
6251	ChannelKey returns the channel key for the given address .
6252	MinDeposit returns the minimum price for the given offering .
6253	AcceptOffering is used to accept an offer .
6254	ChangeOfferingStatus changes the offer status of an offering .
6255	GetClientOfferings returns a list of client offers .
6256	GetAgentOfferings returns a list of offered offerings .
6257	setOfferingHash sets the offering hash for an offering .
6258	fillOffering fills the offering for the given offering .
6259	UpdateOffering updates an offering .
6260	CreateOffering creates a new offering .
6261	GetClientOfferingsFilter params
6262	PingOffers returns a map of offered offerings .
6263	NewServer creates a new server .
6264	Mux returns a new http . Handler
6265	NewLogger creates a new Logger .
6266	Printf prints a formatted log message .
6267	GetURL returns the URL for the given path .
6268	NewHTTPRequest creates a new http request
6269	NewHTTPRequestWithURL creates a new http request with the given URL .
6270	Send sends a request to the client
6271	Check checks if the token is valid .
6272	Make creates a random token
6273	GetLogs returns a list of logs for a given token .
6274	AuthClient is used to authenticate client
6275	Start session
6276	UpdateSession updates a session
6277	OfferingMessage creates a new instance of offering
6278	ValidMsg returns true if the given schema is valid .
6279	NewClient creates a new client .
6280	Panic panics if there is a panic .
6281	ParseRequest parses the request and returns true if the request fails .
6282	Save saves the IPVS to disk .
6283	NewClient creates a new client
6284	ParseRate parses a RateLimit response .
6285	SetOutputPath sets the path to the output path .
6286	UpdateConfig updates the global config .
6287	SetTracerPath sets the path to the given path .
6288	SetOutputPath sets the path to the output directory .
6289	SetPipes sets the stdin and stderr .
6290	AppendOptionWithPrefix adds a prefix to the list of options .
6291	MarshalRaw implements the Marshaler interface .
6292	MarshalString implements marshaler . Marshaler interface .
6293	MarshalBytes implements the Marshaler interface .
6294	MarshalBool implements the Marshaler interface .
6295	MarshalUint32 marshals a uint32 .
6296	MarshalUint64 marshals a uint64 .
6297	ElementSizeExceeded returns an error if the field is exceeded .
6298	nextSpecialChar returns the next character in p .
6299	nextSpecialChar returns the next character in p .
6300	NewDecoder creates a new decoder .
6301	Register registers a new dependency .
6302	MustRegister registers a new dependency .
6303	Create creates an instance of the dependency injector .
6304	cacheCreateFromType creates a new instance from the given type .
6305	NewDependencyInjector returns a new dependency injector .
6306	NewServiceContainer returns a new ServiceContainer
6307	AssetUrl returns the URL of the asset .
6308	Prefix creates a new AssetPipeline .
6309	ServeHTTP implements the http . Handler interface .
6310	getResponse gets the response from the request
6311	isValid checks if the controller is valid
6312	NewHandler creates a new ControllerHandler
6313	Handler creates a new http . HandlerFunc with the given gf .
6314	SetRequest sets the request
6315	Session returns the session .
6316	RenderView renders a view .
6317	RenderTemplate renders a template .
6318	RedirectRoute returns a new RedirectResponse
6319	UrlFor returns a URL for a route
6320	 cookie value
6321	BodyData returns the body of the request .
6322	QueryValue returns the query value for the given key .
6323	FormValueOrDefault returns the value of a form value or default if not found .
6324	UrlValue returns the value for the given key .
6325	Contains returns true if the string contains a substring .
6326	RemoveStringsFromString removes all strings from a string .
6327	Map maps a string to a slice of strings .
6328	Equal returns true if two strings are equal .
6329	Uniq returns a slice of unique items
6330	NewCookieSigner creates a new cookie signer .
6331	EncodeCookie encodes a cookie
6332	DecodeCookie decodes a cookie
6333	DecodeValue decodes a cookie from a string .
6334	EncodeValue encodes a cookie .
6335	ServeHTTP implements the Handler interface .
6336	NewSpretsServer returns a SprocketsServer instance
6337	normaliseKey normalizes key
6338	Stop and log a section
6339	MonitorFunc mocks base method
6340	MonitorReflectedFunc implements the Monitor interface .
6341	LogRequest logs a request .
6342	CommonLogHandler creates a common log handler .
6343	ServeHTTP implements the Handler interface .
6344	UrlUsername returns the username of the request .
6345	UrlFor returns a URL for the given name .
6346	AbsoluteUrlFor returns the absolute URL for the given name .
6347	Parse parses JSON data and panics .
6348	LoadFromEnv loads environment variables from environment variable .
6349	RegexPath returns a Handler that matches the given regexp .
6350	CacheControl creates a new http . Handler for the given request .
6351	transform transforms a value into a map
6352	DiscoverWalk walks the app and returns an error .
6353	DiscoverEndpoints attempts to discover an endpoint .
6354	JSONFieldsFromStruct returns a list of fields from a struct .
6355	StructFieldFromJSONName returns the field s value .
6356	Enumerate implements the Dictionary interface .
6357	Release releases the message
6358	Wrap wraps an error with the given text .
6359	causer creates a new CAuser .
6360	From converts a context to a Context
6361	With returns a new context with the given keyvals .
6362	Format implements the Format interface .
6363	NewWriter returns a new Writer .
6364	Level returns a map of level levels .
6365	SetLevel sets the effect for the given level .
6366	Suppress adds a set of levels to the writer .
6367	IsSuppressed returns true if the given level is suppressed .
6368	Handle adds a handler to the writer .
6369	SetOutput sets the output of the writer .
6370	Enumerate implements the Directory interface .
6371	All returns true if the subject matches the given predicate .
6372	All returns true if the iterator matches the given predicate .
6373	Any returns true if the iterator is an iterable .
6374	Anyp returns true if the iterator matches the given predicate .
6375	AsEnumerable returns an Enumerable .
6376	First returns the first element in the enumeration .
6377	Merge merges another Enumerator .
6378	ParallelSelect returns a new enumerable with the given transformations .
6379	ParallelSelect implements Iterator .
6380	Reverse returns an iterator over the elements in the iterator .
6381	Select returns a new Enumerable with the given transform .
6382	Select implements the Iterator interface .
6383	SelectMany returns a copy of the given subject .
6384	SelectMany selects all elements in the iterator .
6385	Single returns the first element in the iterable .
6386	Singlep returns the first element in the iterable .
6387	Skip skips the given number of elements .
6388	splitN returns a copy of the iterator .
6389	Take returns a new enumerable from the given subject .
6390	Take returns an iterator over the elements of the iterator .
6391	TakeUntil returns a new Enumerable with the given criteria .
6392	TakeUntil returns a channel that matches the given criteria .
6393	 Tee returns a channel of the elements in the iterator .
6394	ToSlice converts an enumerator to a slice .
6395	Where returns a new Enumerable .
6396	Where returns a channel that matches the given predicate .
6397	ReleaseBuffer releases a buffer .
6398	NewStack creates a new Stack .
6399	Enumerate implements the Stack interface .
6400	IsEmpty returns true if the stack is empty .
6401	Push adds an entry to the stack .
6402	Pop removes the element from the stack .
6403	Peek returns the first element in the stack .
6404	Size returns the size of the stack .
6405	NewLinkedList creates a new LinkedList .
6406	AddBack adds an entry to the list .
6407	Enumerate returns a list of items in the list .
6408	Get returns the item at the given position .
6409	IsEmpty returns true if the list is empty .
6410	Length returns the length of the list .
6411	PeekBack returns the next item in the list .
6412	PeekFront returns the first item in the list .
6413	RemoveFront removes the first element from the list .
6414	RemoveBack removes the last element from the list .
6415	Sort sorts the list .
6416	Sorta sorts the elements in the list .
6417	Sorti sorts the elements in the list .
6418	String returns a string representation of the list .
6419	Swap swaps two lists .
6420	merge merges two lists
6421	split splits the head and returns the left .
6422	Add adds an entry to the queue .
6423	Enumerate implements the Queue interface .
6424	IsEmpty returns true if the queue is empty .
6425	Length returns the length of the queue .
6426	Next returns the next element in the queue .
6427	Peek returns the next element in the queue .
6428	ToSlice implements the Queue interface .
6429	EnableVirtualTerminalProcessing enables virtual terminal processing .
6430	unquote unquoted string
6431	countScalars returns the number of keys in the input slice .
6432	IsTerminal returns true if the writer is a terminal .
6433	Add adds entries to the list .
6434	AddAt adds an entry to the list .
6435	Enumerate implements the Lister interface .
6436	Get returns the item at the given position .
6437	IsEmpty returns true if the list is empty .
6438	Length returns the length of the list .
6439	Remove removes the element from the list .
6440	Set implements the List interface .
6441	String returns a string representation of the list .
6442	Swap implements the List interface .
6443	MarshalText returns the contents of the list .
6444	UnmarshalText deserializes a List .
6445	replacement returns the string representation of the given time .
6446	Format returns a string representation of the given time .
6447	logName returns the name of the log .
6448	Monotonic returns a time duration .
6449	set sets the Severity field s value .
6450	Set sets the severity value .
6451	set sets the current level .
6452	match returns true if the file matches the pattern .
6453	match returns true if the filepath matches the regexp
6454	match returns true if the file matches the given line .
6455	NewLogger creates a new Logger .
6456	SetLogDir sets the log directory .
6457	SetLogToStderr sets the log to stderr .
6458	SetToLogToStderr sets whether or not the log to stderr .
6459	setVState sets the current log level .
6460	getBuffer returns a new buffer .
6461	putBuffer adds a buffer to the log .
6462	output writes the output to the log file .
6463	timeoutFlush flushes the log .
6464	stack returns a slice of stack traces .
6465	Exit logs the given error .
6466	Rotate the file at the given time .
6467	createFiles creates a new log file .
6468	flushDaemon will flush all log messages .
6469	lockAndFlushAll implements the Logger interface .
6470	Flush all log files .
6471	Add adds a function to the Bundle .
6472	Join implements the Bundle interface .
6473	NewBundle creates a new Bundle .
6474	Expand returns the expanded tokens .
6475	CacheFunc returns a new http . HandlerFunc for the given body .
6476	CacheFASsthttp creates a new http . Handler for the request handler .
6477	CacheFASsthttpFunc returns a FASsthttpFunc for the given body .
6478	ContentType returns the content type of the response .
6479	ServeHTTP implements the Handler interface .
6480	New returns a new http server
6481	AcquireResponseRecorder creates a new ResponseRecorder
6482	ReleaseResponseRecorder releases a ResponseRecorder
6483	Claim returns true if the request is valid .
6484	Rule sets the rule .
6485	Reset resets the response .
6486	NoCache sets the no cache header
6487	clientOAuth creates a new clientOAuthAuthentication .
6488	authenticate is used to authenticate the request .
6489	apiKeyAuth returns a new apiKeyAuthentication
6490	authenticate is used to authenticate the request .
6491	serviceOAuth returns a service OAuthAuthentication .
6492	authenticate is used to authenticate the request .
6493	OAuthService creates an OAuth service .
6494	CreateAuthorizeUrl returns the URL for the authorization
6495	RefreshTokens refresh tokens
6496	NewTokens returns a new OAuth tokens
6497	NewTokensFromRequest creates a new OAuth tokens from the request .
6498	Request mocks base method
6499	Create a new http request
6500	executeRequest executes a request .
6501	simulateRequest is used to simulate a request
6502	ApiKeyClient creates a client with the given key .
6503	OAuthClient creates a new client .
6504	Get implements the Client interface .
6505	GetBalance returns the balance of the account .
6506	GetAllAddresses returns a list of addresses .
6507	GenerateReceiveAddress generates a new ReceiveAddress .
6508	Send money
6509	RequestMoney returns a transaction confirmation
6510	ResendRequest resends a request .
6511	CancelRequest cancels a request .
6512	CompleteRequest is part of the transaction .
6513	Create a new button
6514	CreateOrderFromButton creates a new order from a button
6515	CreateUser creates a new user
6516	Buy a transfer
6517	Get contacts
6518	Get currencies
6519	GetExchangeRates returns the exchange rates .
6520	GetExchangeRate returns the exchange rate .
6521	Get transactions .
6522	GetOrders returns a list of orders
6523	GetTransfers returns a list of Transfers
6524	GetBuy price
6525	GetSellPrice returns price for given quantity .
6526	Get a transaction .
6527	GetOrder returns an order by id
6528	GetUser returns the current user
6529	NewSerialDispatcher returns a new instance of SerialDispatcher
6530	AppendHandlers appends handlers to SerialDispatcher .
6531	DispatchOptional implements SerialDispatcher .
6532	NewParallelDispatcher returns a new Dispatcher .
6533	ReleaseMsg releases a message .
6534	ReleaseBuffer releases a byte slice .
6535	Close closes the connection .
6536	Write implements the Conn interface .
6537	Accept accepts a connection and returns an error .
6538	AddDialer adds a Dialer to the Dialer .
6539	subDialerForAddr returns the subDialer for the given address .
6540	rawConnDial attempts to connect to a remote peer .
6541	MultiaddrProtocolsMatch returns true if b is a Multiaddr .
6542	MultiaddrNetMatch returns a multiaddr that matches the given srcs .
6543	get gets the value from the map
6544	getArray gets an array of values from a map
6545	build params
6546	unsetGPGAgentInfo unset environment variables
6547	AssuanSend sends an Assuan transaction .
6548	NewData returns a new data object .
6549	NewDataFile creates a new data file .
6550	NewDataBytes creates a new data structure .
6551	NewDataReader returns a new DataReader .
6552	NewDataWriter creates a new data writer .
6553	NewDataReadWriter creates a new data read writer .
6554	NewDataReadWriteSeeker creates a new ReadWriteSeeker .
6555	Close closes the data .
6556	Name returns the file name .
6557	NewCommand returns a new Command .
6558	Arg adds a command to the command .
6559	String returns a string representation of the command .
6560	Columns returns a slice of column names .
6561	Get returns the value of a column
6562	GetBool returns true if the column is a float .
6563	GetInt returns the int value for the given column .
6564	GetSlice gets a slice from the record .
6565	GetString returns the string value as string .
6566	GetTime returns the time at the given column .
6567	ChangeContactModattr changes the value of a contact .
6568	ChangeContactModify modifies the presence of a contact
6569	ChangeContactMods mocks base method
6570	ChangeCustomContactVar adds a custom contact variable to the server .
6571	ChangeCustomHostVar changes a custom host variable .
6572	ChangeCustomSvcVar changes a custom service variable .
6573	ChangeHostCheckTimeperiod changes the timeperiod of the given host_name .
6574	ChangeHostModattr returns a command that changes the given value .
6575	ChangeSvcModattr adds a new service modattr to the service .
6576	DelAllAllSvcComments deletes all services from a service .
6577	DisablePassiveSvcChecks is used to disable a service .
6578	DisableServiceFlapDetection will disable service flap detection .
6579	DisableSvcCheck is used to disable a service
6580	DisableSvcEventHandler is used to disable a service .
6581	DisableSvcFlapDetection returns a new ServiceFlapDetection .
6582	DisableSvcNotifications disable service notifications .
6583	EnablePassiveSvcChecks is used to enable a passive service .
6584	EnableSvcCheck is used to enable a service .
6585	EnableSvcEventHandler returns a command handler for a service .
6586	EnableSvcFlapDetection returns a new ServiceFlapDetection .
6587	EnableSvcNotifications returns a command to enable service notifications .
6588	RemoveSvcAcknowledgement removes a service acknowledgement .
6589	StartObsessingOverSvc starts observing the given service .
6590	StopObsessingOverSvc is a convenience function for StopObserver .
6591	NewQuery creates a new Query .
6592	Columns adds columns to the query .
6593	Filter adds a rule to the query .
6594	And adds a condition to the query .
6595	Negate negates the query .
6596	WaitObject specifies the name of the query .
6597	WaitCondition adds a rule to the query .
6598	WaitConditionNegate sets the WaitConditionNegate field s value .
6599	WaitTrigger adds an event to the query .
6600	WaitTimeout sets the timeout for the query .
6601	KeepAlive sets the KeepAlive field .
6602	ReadTimeout sets the read timeout .
6603	String returns a string representation of the query .
6604	NewClient creates a new client .
6605	NewClientWithDialer creates a new client .
6606	Exec executes a request .
6607	extoi222 converts a string to an integer .
6608	Mask mocks base method
6609	New creates a new OUI database .
6610	Lookup returns the address for the given address .
6611	 VendorLookup returns the vendor name for the given mac address .
6612	Contains returns true if the address contains the given address .
6613	ThttledReader returns a new io . Reader .
6614	NewThrottledBucket creates a new bucket .
6615	NewCmdWithRunner creates a new CmdWithRunner .
6616	MustNewCmdWithRunner creates a new CmdWithRunner .
6617	importBreakPaths returns a list of imports from a file .
6618	SelfProxyCmderSupplier returns a CmdderSupplier that returns a CmderrSupplier that returns a CmdderSupplier .
6619	SupplierWithPrependedArgs returns a CmdderSupplier with the given arguments .
6620	SelfCmder returns a Cmdder instance .
6621	CmderWithPrependedArgs returns a Cmdder with prepended arguments .
6622	NewSeeforRouter returns a new Seefor instance
6623	ServeHTTP implements the Seefor interface .
6624	Before adds middleware to the chain .
6625	After adds middleware to the chain .
6626	UseTimer is used to set a timer .
6627	NewRouter creates a new router
6628	ServeHTTP implements the Router interface .
6629	Group adds a function to the router
6630	findChild returns the child of the route node
6631	insertChild inserts a new route node .
6632	Get returns a counter .
6633	ServeHTTP implements the http . Handler interface .
6634	main main function
6635	NewGroupRouter returns a new GroupRouter instance
6636	RouteMiddleware returns a new route middleware for the route .
6637	RouteHandlerFunc returns a HandlerFunc that wraps http . HandlerFunc .
6638	RectFromSphere returns a Rectangle from a sphere .
6639	CopyRect returns a new Rectangle .
6640	Size returns the size of the rectangle .
6641	Overlaps returns true if the Rectangle contains the given Rectangle .
6642	String returns a string representation of the rectangle .
6643	Dx returns the distance of the rectangle .
6644	YY returns the height of the rectangle .
6645	In returns true if the rectangle is in the range .
6646	Approx returns true if x is equal .
6647	ApproxEpsilon returns true if x is equal .
6648	SetXYZ sets the coordinates of the vector .
6649	V3DistrDistr returns the distance between two vectors .
6650	Copy copies the vector to dst .
6651	Assign assigns the vector to the vector .
6652	Dist2D returns the distance between two vectors .
6653	Dist2DSq returns the distance between two vectors .
6654	Cross returns a Vec3
6655	dot2D returns the dot product of the vector .
6656	NewRay returns a new Ray .
6657	IntersectRect returns true if the rectangle intersects the rectangle .
6658	SupportedFunc returns an error if the request is supported .
6659	NewSigner creates a new Signer .
6660	NewVerifier creates a new Verifier .
6661	Request performs a request .
6662	Status returns a status response
6663	Cancel cancelation
6664	Discovery returns a DiscoveryResponse
6665	NewClient returns a new client
6666	Push adds a value to the stack .
6667	Pop removes the value from the stack .
6668	PopLast removes the last element from the stack .
6669	Peek returns the value in the stack .
6670	PeekN returns the next item in the stack .
6671	Vecf32 returns a new Vec .
6672	Vi returns a new Vec .
6673	Add adds v2 to v2 .
6674	Sub returns a copy of v2 .
6675	In returns true if v is in the rectangle .
6676	Len returns the length of the vector .
6677	ApproxFuncEqual returns true if v2 is equal .
6678	Merge merges two handlers .
6679	respCode returns the status of the request .
6680	NewServer returns a new Server
6681	Calls the Callback API .
6682	ErrNotFound returns an error .
6683	ErrUnsupportedRequestType returns an error with the given SubjectType .
6684	ErrUnsupportedIdentity returns an error .
6685	ErrMissingField returns an error with the required field .
6686	ErrInvalidRequestSignature returns an error with the given signature .
6687	Database servers
6688	SnapshotDatabaseServer returns a database snapshot .
6689	ResetPasswordForDatabaseServer sets the password for the given identifier .
6690	Servers returns a list of servers
6691	Server returns a new server .
6692	DestroyServer removes a server
6693	LockServer locks a server .
6694	UnlockServer unlocks a server
6695	SnapshotServer returns a snapshot of the specified identifier .
6696	FullConsoleUrl returns the full URL for the server .
6697	Firewall rule
6698	ServerGroups returns a list of server groups .
6699	ServerGroup returns a server group .
6700	AddServersToServerGroup adds servers to a server group .
6701	MoveServersToServerGroup mocks base method
6702	LoadBalancers returns a list of LoadBalancers
6703	LoadBalancer returns a LoadBalancer .
6704	Add nodes to load balancer
6705	Remove listeners from LoadBalancer
6706	LockResource locks a resource .
6707	FirewallPolicies returns all the firewall policies .
6708	Fires a firewall policy .
6709	Applies a firewall policy .
6710	Extract extracts the AuthResult from the GetAuthResult
6711	ApiClients retrieves all API clients .
6712	ApiClient returns a new ApiClient
6713	ResetSecretForApiClient resets the secret for the given identifier .
6714	Images returns the list of images .
6715	Image returns an image .
6716	List all accounts
6717	Account returns an account .
6718	CloudIPs returns a list of CloudIPs
6719	CloudIP returns a CloudIP
6720	MapCloudIPToServer adds a new IP to a server
6721	setAuthHeader sets the Authorization header .
6722	Auth is used to authenticate a user
6723	List collaborations .
6724	Gets a Collaboration .
6725	DatabaseSnapshots returns a list of database snapshots .
6726	DatabaseSnapshot returns a database snapshot .
6727	Scan returns a slice of alive IP addresses .
6728	ToFile converts a URL to a file .
6729	ToWriter converts a string to a writer .
6730	FromURL reads a file from a URL .
6731	ForPeriod returns the code for the given period .
6732	QRCodeData returns the QR code for the given label .
6733	RandomSecret returns a random secret
6734	DefaultPeerConfig returns a default peer config
6735	PubKey returns the public key of the peer .
6736	OnStart starts the connection
6737	Send sends message to peer
6738	WriteTo implements io . WriterTo interface .
6739	Equals returns true if two peers are equal .
6740	FuzzConnAfter returns a new connection after a given time .
6741	NewMConnectionWithConfig creates a new MConnection with the given configuration .
6742	recover the connection to the connection
6743	Send sends a message to the channel .
6744	TrySend sends a message to the channel .
6745	CanSend returns true if the channel is available .
6746	sendRoutine sends a message to the network .
6747	sendSomeMsgPackets sends a message to the client .
6748	sendMsgPacket sends a message to the buffer .
6749	nextMsgPacket returns the next message packet
6750	writeMsgPacketTo writes a message to the writer .
6751	recvMsgPacket receives a message from the channel .
6752	hash24 computes the hash of the input bytes .
6753	incrNonce increments the nonce of a nonce
6754	List returns the list of peers .
6755	ListenRoutine starts listening for the listener .
6756	NewAddrBook creates a new AddrBook .
6757	OnStart implements the Addr interface .
6758	RemoveAddress removes an address from the map .
6759	load from file
6760	Save saves the AddrBook .
6761	addToOldBucket adds a new address to the old address .
6762	expireNew removes new addresses from the bucket .
6763	DialSeeds connects seeds to the given addresses .
6764	NewNetAddressStrings returns a slice of netAddress strings .
6765	NewNetAddressIPPort creates a new NetAddress .
6766	Equals returns true if the given network address is equal .
6767	Dial mocks base method
6768	Valid returns true if the network is valid .
6769	reachabilityTo implements NetAddressTo interface .
6770	NewPEXReactor creates a new PEXReactor .
6771	OnStart starts the reactor .
6772	Receive receives a message from the peer .
6773	RequestPEX sends PEX request to peer
6774	SendAddrs sends a list of addresses to the peer .
6775	IncrementMsgCountForPeer adds a message count for a peer .
6776	DecodeMessage decodes a PEX message .
6777	NewReader returns a new reader .
6778	LogOnPanic logs an error .
6779	Wrap wraps a Handler with a panic handler .
6780	Start starts the logger .
6781	New creates a new service .
6782	Wrap wraps http . HandlerFunc . HandlerFunc
6783	GetString returns a string with the given key .
6784	GetInt returns the value of the given key .
6785	RegisterDriver registers a driver .
6786	Open opens a redis hub .
6787	SendEvents sends events to the given channel .
6788	Unmarshal unmarshals data into a map
6789	Publish publishes a message to the hub .
6790	Subscribe sends a channel to the hub .
6791	getChannel returns a channel
6792	remove removes a channel from the hub .
6793	Open opens a new hub .
6794	Publish publishes a message to the hub .
6795	Subscribe sends a channel to the hub
6796	MakeHub creates a new Hub .
6797	Fib returns a Fibon function that returns a Fibon .
6798	roundIndex returns a slice of ints .
6799	Dir returns the home directory .
6800	Ask asks the user to ask a question .
6801	InteractionCount returns the number of interactions in the session .
6802	TimeElapsed returns the duration of the session .
6803	History returns the history of the session .
6804	Bool returns the value of a flag .
6805	String returns the value of the flag .
6806	Fail attempts to fail .
6807	Fail returns true if t is failed .
6808	Logf logs a message with the given arguments .
6809	Error logs an error .
6810	Errorf logs a formatted error message .
6811	Init initializes the client
6812	Value returns the value of the client .
6813	Child implements the Client interface .
6814	Push adds a value to the client
6815	Update updates a value
6816	Remove removes a file .
6817	Rules returns a list of rules that match the given params
6818	SetRules sets the rules for the given rules .
6819	Call the given method with the given parameters .
6820	SetTraceInfo implements the Trace interface .
6821	Finish the trace .
6822	ServeMetrics is used to serve metrics .
6823	DumpMetrics dumps the metrics for the given task .
6824	NewEventLog creates a new EventLog .
6825	Printf writes an event to the log .
6826	Errorf logs an error .
6827	SetLogger sets the logger with the given prefix .
6828	ServeHTTP implements the http . Handler interface .
6829	TitleFromContext returns the title from the context .
6830	NewContext creates a new context with the given family .
6831	New returns a new Client
6832	NewWithClient creates a new Client
6833	Devices returns all available devices .
6834	Device returns a device with the given nickname .
6835	PushNote adds a note to the device .
6836	PushLink sends a link to the device .
6837	PushSMS sends a message to the device
6838	Mean returns the current user
6839	Push sends an endpoint to the client
6840	Push a note
6841	PushToChannel sends a note to a channel .
6842	PushLink adds a link to a link .
6843	PushLinkToChannel sends a link to a channel .
6844	PushSMS sends a message to the chat .
6845	Subscription returns a subscription .
6846	PushNote adds a note to the channel .
6847	PushLink adds a link to the channel .
6848	NewCachedLoader returns a loader for a given namespace .
6849	Import imports data from the cache .
6850	Initialize initializes the cache .
6851	Get retrieves data from cache .
6852	MustGetString retrieves a string from the cache .
6853	MustGetBool retrieves a boolean value from the cache .
6854	MustGetInt returns the value for the given key .
6855	MustGetDuration retrieves a duration from the cache .
6856	NewRandomDNSBalancer returns a new DNSBalancer .
6857	writeServiceToCache writes a service to the cache .
6858	StringToLabels converts a string to labels .
6859	SetClockSequence sets the clock sequence .
6860	Trace logs a message .
6861	Debug logs a message .
6862	Info logs a message .
6863	Warn logs a message .
6864	Error logs a message .
6865	Critical log message
6866	Send a paste
6867	GetPasteTextById retrieves the contents of a given paste .
6868	ExecAndWait waits for the Executor to wait for the process to be run .
6869	ExecutorName sets the ExecutorName field s value .
6870	Exe sets the Exece builder
6871	Args adds the args to the ExecStreamerBuilder .
6872	Dir sets the directory for the exec .
6873	Env sets the environment variables
6874	Writes the writer to the ExecutorBuilder .
6875	StdoutWriter sets the StdoutWriter interface .
6876	StdoutPrefix sets the stdout prefix .
6877	StderrWriter sets the StderrWriter .
6878	StderrPrefix sets the StderrPrefix prefix .
6879	Build builds the Executor .
6880	MakeWidget creates a new Widget .
6881	SetText sets the text of the label .
6882	AddLabel adds a label to the window .
6883	printf is a helper function for printing a color .
6884	setCell sets the cell at the given position .
6885	resize resizes the window .
6886	Renders the window .
6887	focusWidget focuses the widget .
6888	focusPrevious focuses the current window .
6889	keyHandler implements the Window interface .
6890	Color returns a string representation of an attribute .
6891	EscapedLen returns the length of a string .
6892	Unescape unescapes a string
6893	init initializes the window
6894	initKeyHandler initializes the event handler .
6895	Init initializes the terminal .
6896	Deinit initializes the terminal .
6897	NewWindow creates a new Window
6898	Flush all cells in the tab .
6899	focusWindow focuses the window .
6900	resizeAndRender is used to render the window .
6901	Panic panics .
6902	Exit prints the terminal with the given format .
6903	AddList creates a new List .
6904	Append appends a string to the list .
6905	Focus sets the cursor position .
6906	SetText sets the text .
6907	AddEdit creates a new edit .
6908	makeAuthorizationHeaders returns the authorization header .
6909	Start starts the session .
6910	FetchEntity fetches an entity from the session .
6911	SaveEntity saves an entity to the session .
6912	DeleteEntity deletes an entity .
6913	FetchChildren fetches the children of a given parent .
6914	CreateChild creates a new child in the session .
6915	AssignChildren sets the children of the given parent .
6916	NextEvent implements Session .
6917	String returns a string representation of the identity .
6918	NewPushCenter creates a new PushCenter
6919	RegisterHandlerForIdentity registers a handler for the given identity .
6920	UnregisterHandlerForIdentity removes the handler for the given identity .
6921	HasHandlerForIdentity returns true if the given identity matches the given identity .
6922	Start starts the push event
6923	Stop stops the PushCenter .
6924	Logger returns the default logger
6925	String returns a string representation of the FetchInfo .
6926	NewClient returns a new Client instance
6927	Post sends metrics to the client
6928	MetricID returns a metric id .
6929	SplitMetricID returns the name and tags of a metric .
6930	NewRateScale returns a RateScale instance .
6931	Snapshot returns the snapshot of the rate .
6932	NewDeriveScale creates a new Derive .
6933	Update implements the Derive interface .
6934	Snapshot returns the histogram .
6935	Update implements the Gauge interface .
6936	Snapshot returns the value of the Gauge .
6937	NewUnstarted returns a new registry
6938	Subscribe adds a reporter to the registry .
6939	Get retrieves a metric from the registry .
6940	Register registers a new instrument .
6941	Fetch implements the Registry interface .
6942	Size returns the number of instruments in the registry .
6943	Tags returns the tags of the registry .
6944	SetTags sets the tags .
6945	AddTags adds tags to the registry .
6946	Close closes the registry .
6947	New returns a new Reporter instance
6948	Metric adds a metric to the reporter .
6949	FilterBefore returns a list of objects that match the given filter .
6950	Set sets the value for the given key .
6951	SetStr implements the EnvVar interface .
6952	Get returns the value for the given key .
6953	String returns a string representation of the environment variable .
6954	Add adds a value to the set .
6955	AddAll adds multiple values to the set .
6956	Remove removes a value from the set .
6957	RemoveAll removes all values from the set .
6958	Contains returns true if the set contains the given value .
6959	ContainsAll returns true if the set contains all values in the set .
6960	ContainsFunc returns true if f is in the set .
6961	Clear clears the set .
6962	Iterator returns a new Iterator .
6963	Items returns the items in the set .
6964	ItemsFunc returns all items in the set .
6965	fixWeekend is used to fix a week .
6966	GetHolidays returns a list of holidays for a given country .
6967	GetInt returns the value of the given key .
6968	GetFloat returns the float value at the given key .
6969	GetBool returns the value of the given key .
6970	Exists returns true if the given key exists .
6971	getValue returns the value for the given key
6972	Load loads the configuration file .
6973	loadPath returns the path to the path
6974	New returns a new Reader .
6975	readMimeTypes reads mime types from file .
6976	Get returns the mime type .
6977	SetHeader sets the mimetype header .
6978	GetFileSize returns the size of a file .
6979	ListenAndServe starts the websocket server .
6980	SendRequest sends a request to the server
6981	SendRequestArr sends a request to the server
6982	Close closes the server .
6983	ws a websocket connection handler
6984	SafeCreateS3Bucket creates a S3Bucket .
6985	NewWriter creates a new io . Writer .
6986	NewReader returns an io . Reader .
6987	Delete deletes a path
6988	CertAtHashes returns an error if the certificate is not present .
6989	Params set params
6990	Next returns a pointer to the next request .
6991	Result returns the result of the result
6992	ErrorData extracts the error data from the response
6993	MiddlewareList adds a list of middleware to the middleware list
6994	LogFactory creates a logger with the given name and writer .
6995	NewRouter creates a new router
6996	Request registers a new route
6997	Middleware implements Router . Router interface .
6998	NotFound is a helper function for NotFound .
6999	NewMysqlDump creates a new MysqlDump .
7000	NewRemoteMysqlDump creates a new MysqlDump .
7001	Import import file
7002	Dump writes data to dest .
7003	NewRemoteExecutor returns a new Executor
7004	Execute sends a command to the given destination .
7005	World implements the http . Handler interface .
7006	Name implements the Hello interface .
7007	NewPgDump returns a PgDump instance
7008	NewPgRemoteDump creates a new PgRemoteDump .
7009	Import imports a file .
7010	New returns a new IrcText
7011	SetFg sets the foreground color .
7012	SetBg sets the background color
7013	HandlerBuilder builds a scaffold handler .
7014	LoggerWithPrefix creates a logger with the given prefix
7015	NewEncoder creates a new encoder .
7016	Parse returns the parser for the given content type .
7017	Responder returns a Responder based on the Accept header .
7018	NewErrorStatus returns an error .
7019	ConvertErrorStatus converts an error to an error .
7020	Read implements the FileEntry interface .
7021	EntrySize returns the size of the file extension .
7022	NewLager creates a new logger
7023	URLParts returns the parts of the request .
7024	URLPart returns the URL part of the request .
7025	StoreParam adds a parameter to the context .
7026	GetParam returns a Param with the given name .
7027	Int32 returns the int32 value .
7028	UInt returns the value of the parameter .
7029	UInt32 returns the uint32 value as uint32 .
7030	Float32 returns the float32 value as float32 .
7031	UploadFile uploads a file
7032	RemoveRemoteFile removes the remote file .
7033	GetRemoteFile returns the remote file .
7034	NewConn creates a new connection
7035	RemoteAddr returns the remote address .
7036	SendRequest sends a request to the server
7037	SendRequestArr sends a request to the server
7038	Close closes the connection .
7039	sendResponse sends a response .
7040	send sends a message to the websocket .
7041	Receive receives a message from the connection .
7042	Set the connection to the websocket .
7043	startReceive starts a new connection
7044	NewPBO creates a PBO from a file .
7045	NewReadWriteCloser creates a new mock instance
7046	Read mocks base method
7047	Write implements io . WriteCloser interface .
7048	SafeRemoveSSH removes a file from the filesystem .
7049	SafeCreateSSH creates a new SFTP file .
7050	SafeCreate creates a new file .
7051	HMAC returns a function that is used to authenticate a user .
7052	Scaffold returns a handler for the given platform .
7053	Route adds a pattern to the router .
7054	Group adds a group to the router .
7055	Platform adds a platform to the router .
7056	Handle implements router .
7057	Options adds a route to the router .
7058	Use adds a middleware to the router .
7059	NotFound adds a 404 handler to the router .
7060	AddHandlerBuilder adds a builder to the router .
7061	ServeErrorPage implements the ErrorHandler interface .
7062	GetErrorHandler returns the error handler for the given status code .
7063	SetErrorHandler set error handler
7064	SetErrorHandlerFunc sets the error handler for the given status code .
7065	Echo implements the Echo interface .
7066	UnmarshalBinary deserializes a ConfigArg .
7067	atAsIdentify returns an ATAArg from the given io . Reader .
7068	ATA read from the given io . Reader .
7069	atWrite implements io . Reader interface .
7070	calculateLBA calculates the lba of rba
7071	MarshalBinary returns a binary representation of ReserveReleaseArg .
7072	UnmarshalBinary deserializes a ReserveReleaseArg .
7073	MarshalBinary serializes an ATAArg .
7074	New creates a new fixture .
7075	FromYAML creates a fixture from yaml .
7076	FromJSON creates a fixture from a JSON string .
7077	MarshalBinary marshals the directive into a byte slice .
7078	MarshalBinary encodes the MACMaskArg .
7079	NewSendToLogger creates a new LogToLogger .
7080	NewMultiLog returns a new LogBackend .
7081	OutLog implements the Writer interface .
7082	PublishPort adds a port to the run config .
7083	Name sets the name of the RunConfig .
7084	AddArgs adds args to the RunConfig .
7085	NewCORSHANDLER returns a new CORSHANDLER
7086	CreatePreflight creates a list of routes for the given routes .
7087	ServeHTTP implements the http . Handler interface .
7088	Handle implements the http . Handler interface .
7089	NewRandomSourceListSecure returns a new random source list .
7090	Handle implements SyslogHandler .
7091	Close implements SyslogHandler .
7092	hasDatePrefix returns true if the string contains a date prefix .
7093	Match returns the first rune in the string .
7094	Match matches the given string .
7095	MatchRune returns true if the given rune matches the given rune .
7096	Match matches the length of the string .
7097	Alloc allocates a new DB .
7098	Free frees the pool .
7099	Infof logs a message
7100	Warningf logs a warning message .
7101	Errorf logs an error message .
7102	Fatalf logs a message to the logger .
7103	ToPhone converts a string to a phone number .
7104	ToURL converts a string to a URL
7105	ToSSN converts a string to SSN .
7106	ToMorseCode converts a string to a MorseCode
7107	ToPirateSpeak converts a string to a string .
7108	ToIRSA converts a string to a string .
7109	newDefaultLogger returns a new Logger
7110	Logf logs a message to the default logger .
7111	Section returns the list of sections .
7112	Options returns the options for the given section .
7113	OptionMap returns a map of option names .
7114	Comments returns the comments for the given section .
7115	AddComment adds a comment to the config .
7116	Parse parses an io . Config from a stream .
7117	Write implements io . Writer
7118	Get returns the value for a given section .
7119	Set sets the value of a section
7120	Delete deletes a section
7121	Convert converts a value to a target type .
7122	Postpone updates the cache .
7123	Filter returns a new LogBackend
7124	Op creates a new operator .
7125	ApplyRuleIf applies a rule to the given rule .
7126	ApplyRuleIfElse applies a rule to the given rule .
7127	AuthHandler returns a Handler that can be used to authenticate the request .
7128	HasBin returns true if the docker container exists .
7129	Run runs the given command .
7130	GetReader gets the header value from the header .
7131	SetName sets the Name field s value .
7132	SetValue sets the Value field s value .
7133	SetWriter sets the HttpHeader field s value .
7134	encryptionKey returns the key for the entity .
7135	NewContentNegotiator returns a new ContentNegotiator
7136	NewJsonXmlContentNegotiator returns a new ContentNegotiator .
7137	Negotiate returns the content type of the given request .
7138	AddEncoder adds an encoder to the given content type .
7139	getEncoder returns the encoder for the given request .
7140	CanSign returns true if the public key is valid .
7141	ByWinnings returns a sorted list of players .
7142	WaitFunc returns true if the given interval is true .
7143	FormatDialAddress returns a string representation of NetworkNode .
7144	SetFromDocker sets the port from Docker .
7145	Read returns the number of bytes in bytes .
7146	readByte reads a random byte .
7147	RecoverHandlerJson returns a JSON handler that panics on the next request .
7148	DefaultServiceConfig returns a default service configuration .
7149	NewService creates a new Service .
7150	RunLight runs the image .
7151	initConfig initializes the stack
7152	HasExposedPorts returns true if the container has been exposed .
7153	Inspect inspects the container
7154	Kill the container
7155	NetworkNodes returns a list of network nodes .
7156	Remove removes the container .
7157	WaitStartup waits for the container to start the container .
7158	NewHandler creates a new Handler .
7159	Handle implements the Handler interface .
7160	NewCounter creates a new Counter .
7161	Metrics returns the metrics for the counter .
7162	Retrieve retrieves all files from the given sources .
7163	Compile compiles a VFS source file .
7164	readBlockAt reads a file at the given offset .
7165	writeTo implements io . WriterTo interface .
7166	Push adds data to the stack .
7167	Pop removes the data from the stack .
7168	Peek returns the next block from the stack .
7169	PeekHeader returns the header of the stack .
7170	IterateBackward iterates over the stack and returns an error .
7171	Iterate forward over the stack .
7172	Close closes the stack .
7173	OpenStack opens a stack .
7174	NewStack creates a new stack .
7175	NewSessionCache creates a new session cache .
7176	getInvalidTokenError returns an error if the token is invalid .
7177	Get retrieves a session from the cache .
7178	Add adds a new session to the cache
7179	Delete deletes a session .
7180	Set sets a value to the session cache .
7181	NewClient returns a new client
7182	connect connects to the server
7183	Write a message to the IRC server .
7184	readMessage reads a message from the IRC server .
7185	Stop stops the client .
7186	GetChannels returns the list of channels .
7187	JsonWrite writes a JSON response to w .
7188	JsonRead reads an object from the given body .
7189	VerifyKeySignature implements the PublicKey interface .
7190	NewUser creates a new user .
7191	Next sets the next route
7192	ServeHTTP implements the http . Handler interface .
7193	UseHandler sets the next route .
7194	HandleMethod adds a handler to the route .
7195	Handle implements the Route interface .
7196	Get registers a route for a given pattern .
7197	Post registers a post handler for a given pattern .
7198	Put adds a handler to the route .
7199	Patch adds a handler to the route .
7200	Delete adds a handler to the route .
7201	Options adds a route to the route .
7202	NewSalter creates a new salt .
7203	Boken generates a random salt
7204	Token returns a base64 encoded string
7205	getRandomBytes returns a slice of random bytes .
7206	NewNewsItem creates a new news item .
7207	Write implements LogWriter .
7208	Write implements io . Writer .
7209	Write writes a warning to the log .
7210	Write writes a message to the error log .
7211	GetLogger returns a logger with the given name .
7212	RemoveLogger removes a logger from the logger .
7213	WaitForAllUnprocessedRecords waits for unprocessed records .
7214	run starts the logger
7215	WaitForUnprocessedRecords waits for unprocessed records .
7216	SetBufferLength sets the buffer length .
7217	AddHandler adds a handler to the logger .
7218	ClearHandlers clears all handlers .
7219	SetLevel sets the level of the logger .
7220	Log a message to the logger .
7221	Logf implements the Logger interface .
7222	Log implements Logger .
7223	Emergencyf logs an emergency log message .
7224	Alertf logs an alert
7225	Criticalf logs a message to the logger .
7226	Errorf logs an error .
7227	Warningf logs a warning .
7228	Noticef logs a message with the given format .
7229	Infof logs a message to the logger .
7230	Debugf logs a message to the logger .
7231	SetHandler sets the handler for the entry .
7232	SetMethodHandler sets the handler for the given method .
7233	GetHandler returns the handler for the given method .
7234	getChildEntry returns the entry for the given pattern .
7235	MergePatterns merges patterns into entries .
7236	AddEntry adds a new entry to the list .
7237	addPatterns adds patterns to the entry .
7238	execPrefix returns the route for the given URL
7239	traverse traverses the route and returns the route .
7240	getExecMatch returns a function that matches the given matcher .
7241	MergeRoutes merges a list of Routes .
7242	Debugln implements Logger interface .
7243	Debugf logs a message to the logger .
7244	verbosef logs a message with vals
7245	Infoln implements Logger interface .
7246	Infof logs a message .
7247	OKln implements the Logger interface .
7248	OKf sends a message to the logger .
7249	Fatalln prints a fatal error message .
7250	Fatalf logs a formatted error message .
7251	ShouldDebug returns true if the given facility is enabled .
7252	SetDebug sets the debug flag .
7253	Gather returns a list of enabled loggers .
7254	NewFacility creates a new logger .
7255	removeNonDigits removes non - digits .
7256	removeNonWordChars removes non - word characters .
7257	urlEncodeSpaces encodes the string into a string .
7258	randomSelect returns the number of elements in a slice .
7259	NewStdFormatter returns a new StdFormatter .
7260	Get returns a new http . Handler
7261	parseMatcher parses a matcher .
7262	isMatchPattern returns true if the string is a match pattern .
7263	routeSplitFunc returns the route split from the data .
7264	SplitPath returns a slice of routes .
7265	isNextSuffixPattern returns true if the pattern matches the pattern .
7266	PeekNextPattern returns the next pattern .
7267	NewPlayer returns a new Player .
7268	Push adds a reader to the reader .
7269	NewCatering creates a new Catering .
7270	GroupByMonths returns a map of Tournaments that match the given season .
7271	validateTournamentInfo validates a tournament .
7272	NewTournament creates a new tournament .
7273	IndexOf returns the index of the given string .
7274	IndexOfIgnoreCase returns the index of the given string .
7275	NewCache returns a new Cache .
7276	Count returns the number of values in the cache .
7277	Flush the cache .
7278	removeExpired removes expired entries from the cache .
7279	NewImage creates a new Image .
7280	Exists returns true if the image exists .
7281	Pull pulls the image
7282	Run runs the container
7283	Setup initializes the image .
7284	NewLocation creates a new Location .
7285	PortAt returns the port at the given index .
7286	SplitPort returns the port at the given index .
7287	Priority returns the syslog facility .
7288	OK returns true if the system is ok
7289	Format formats a Record .
7290	Open opens a database .
7291	Begin creates a new transaction .
7292	View executes a function on the database .
7293	CopyFile mocks base method
7294	CreateBucketIfNotExists creates a new bucket if it exists .
7295	Delete deletes the given key .
7296	ForEach iterates over all buckets in the bucket .
7297	ForEachGob iterates over all buckets in the given folder .
7298	Put implements the Put interface .
7299	Value retrieves a value from the bucket .
7300	Update updates a value in the bucket .
7301	OpenBucket opens a bucket in the bucket .
7302	CreateBucketIfNotExists creates a new bucket .
7303	Delete deletes the given key .
7304	 GobValue retrieves a value from the bucket .
7305	NextSequence returns the next sequence .
7306	Put implements the Bucket interface .
7307	PutGob stores a value in the bucket .
7308	Drop the database .
7309	HandleError implements the NullHandler interface .
7310	Handle implements Writer .
7311	Handle implements the Handler interface .
7312	WaitPeerListening returns true if the given address is listening on the given address .
7313	NewEvent creates a new event
7314	Subscribe adds a handler to the bus .
7315	Unsubscribe removes a handler from the bus .
7316	Publish publishes an event .
7317	HandleOnly implements HandlerFunc .
7318	ContextWithPublisher adds a Publisher to the given context .
7319	PublisherContext returns the publisher context .
7320	PublishNamedEvent publishes a named event .
7321	PublishEventContext publishes an event with the given context .
7322	PublishNamedEventContext publishes a named event .
7323	String returns the string representation of the log level .
7324	UnmarshalJSON implements json . Unmarshaler interface .
