0	NewSTM creates a new STM .
1	first returns the first revision of the read set .
2	cmp returns a list of all the mps for the given revision .
3	NewSTMRepeatable creates a new STM .
4	NewSTMSerialized creates a new STM .
5	NewStMMReadCommitted returns a new STM read transaction .
6	NewCertPool creates a new certificate pool .
7	NewCert returns a new TLS certificate .
8	Pause pauses the peer .
9	Resume resumes the peer .
10	pick picks a message from the peer .
11	post sends a request to the snapshot .
12	newTxnResp returns a new txn response
13	applyCompare applies a comparison to the read view .
14	OpCompact returns a new CompactOp .
15	NewPriorityQueue creates a new PriorityQueue
16	Enqueue adds a value to the queue .
17	NewLeaderStats returns a new LeaderStats instance
18	Succ returns the total number of times
19	Fail sets the number of followers .
20	delete deletes a watcher .
21	startStreamWriter starts a stream writer .
22	checkStreamSupport returns true if the given stream is supported .
23	MaybeUpdate returns true if the progress is updated .
24	IsPaused returns true if progress is paused .
25	checkSnapshotAbort returns true if the progress is a snapshot of progress .
26	add adds an inflight to the buffer .
27	growBuf adds the buffer to the buffer .
28	freeTo frees the buffer .
29	SaveDBFrom reads a file from the database .
30	DBFilePath returns the file path for the given id .
31	Set sets the value of a string .
32	NewUniqueStringsValue creates a new UniqueStringsValue .
33	UniqueStringsFromFlag returns a slice of unique strings .
34	UniqueStringsMapFromFlag returns a map of unique strings .
35	Percentiles returns the percentiles of the given number .
36	VerifyBootstrap checks if the server is valid .
37	VerifyJoinExisting checks if the configuration already exists .
38	hasLocalMember checks if the server has a local peer
39	advertiseMatchesMatches returns an error if the cluster is equal .
40	ReqTimeout returns the request timeout .
41	getStatus returns the status of the raft .
42	GetDefaultHost returns the default host
43	getIfaceAddr returns the network address for the given ID .
44	getIfaceLink returns the interface for the given id .
45	lsCommandFunc returns the list of keys for the given key .
46	printLs prints a list of nodes .
47	rPrint prints a node .
48	NewLeaseRenewerCommand returns a new cobra command .
49	Read reads a snapshot from a snapshot .
50	GetCipherSuite returns the cipher suite for the given string .
51	post performs a POST request
52	send sends a message to the raft .
53	sendHeartbeat sends a heartbeat to the raft log .
54	BcastAppend appends a batch to the raft .
55	BcastHeartbeat sends a heartbeat to the raft .
56	tickElection implements the election loop .
57	tickHeartbeat is used to start the heartbeat .
58	stepCandidate runs a step proposal .
59	restore restores the state of the raft .
60	Voteable returns true if the raft node is promotable .
61	checkQuorumActive checks if the current state is active .
62	incrementUncommittedSize adds an uncommitted size to the raft .
63	reduceUncommittedSize computes the uncommitted size of the given entry .
64	newPeriodic returns a new Periodic .
65	Pause pauses the period .
66	Resume pauses the periodic period .
67	Lock locks the mutex
68	NewLocker creates a new locker .
69	NewFIFOcheduler creates a new fifo .
70	Schedule adds a job to the queue .
71	Stop stops the queue .
72	NewServer creates a new server .
73	StartServe starts the server .
74	Stop stops the server .
75	Transport implements the Transport interface .
76	RegisterInterruptHandler registers an interrupt handler .
77	HandleInterrupts handles interruptions .
78	OpGet returns a new op .
79	OpDelete performs a delete operation .
80	OpPut creates a new op .
81	OpTxn creates a new opn
82	WithFromKey adds the key to the op .
83	WithTop adds the top order to the given target .
84	Exist returns true if directory exists
85	searchIndex returns the index of the given name .
86	isValidSeq returns true if the given names are valid .
87	NewListener creates a new listener .
88	CAfiles returns the list of CA certificates .
89	ServerConfig returns the server configuration .
90	ClientConfig returns the client configuration .
91	newTLSKeepaliveListener creates a new TCP connection .
92	applyV2Request implements the EtcdServer interface .
93	NewRoleCommand returns a new cobra command .
94	roleAddCommandFunc returns the role add command
95	roleGetCommandFunc returns the role for the given name .
96	roleGrantPermissionCommandFunc returns role grant permission
97	roleRevokePermissionCommandFunc returns roleRevokePermission
98	NewCluster returns a new cluster .
99	NewClusterByConfig returns a new instance of a cluster .
100	HTTPMembers returns all the members of the cluster .
101	waitLeader waits for the leader and returns the leader for the leader
102	waitNoLeader is used to wait for the leader to be leader
103	isMembersEqual returns true if two members are equal .
104	ListenGRPC listens for grpc .
105	NewClientV3 creates a new client .
106	Clone returns a copy of the member
107	Close closes the server .
108	Stop stops the server .
109	checkLeaderTransition returns the leader of the leader .
110	Restart is part of the member
111	Terminate terminates the server
112	Metric returns the metric name of the member
113	InjectPartition is part of the member .
114	RecoverPartition is part of the member
115	NewClusterV3 creates a new cluster .
116	ParseWithDefaults parses the JWT options .
117	Parse parses JWT options .
118	Key returns the key .
119	fill fills the response header .
120	add adds a watcher to the watchBroadcast .
121	Watch implements the Watch interface .
122	newFileEncoder returns a new encoder .
123	purges a directory with the given suffix .
124	Set sets the StringsValue field s value .
125	NewStringsValue creates a new StringsValue .
126	StringsFromFlag returns a slice of strings .
127	Cluster returns cluster name
128	NewPageWriter returns a new PageWriter .
129	watch returns a watcher for the given key .
130	notify a watcher
131	clone returns a new watcher .
132	isHidden returns true if the path is hidden .
133	createEtcdLogFile creates a log file .
134	runEtcd starts the Etcd server
135	stopEtcd shuts down the server
136	handleSigQuit signals and deletes the server
137	LimitListener creates a new limit listener .
138	allowMethod checks if the given method is allowed by the given method .
139	NewWatchServer creates a new watch server .
140	FiltersFromRequest returns a list of filters from a watch request .
141	newPipelineHandler returns a new instance of the pipeline .
142	checkClusterCompatibilityFromHeader checks if the header is valid .
143	KeyExists checks if the key exists .
144	KeyMissing checks if the key is missing .
145	Validate secure endpoint
146	putNewKV creates a new key .
147	newUniqueEphemeralKey creates a unique ephemeral key .
148	NewUpdateDirCommand returns a new command .
149	updatedDirCommandFunc is used to set the keys of a directory
150	handleBackup is used to handle a backup
151	saveDB saves the database to the destination .
152	NewWatchCommand returns a new cobra command .
153	NewV3 returns a new v3 manager
154	Save creates a snapshot of the given config .
155	Status returns the status of the database .
156	Restore restores the given configuration from the cluster .
157	NewAuthStore creates a new auth store .
158	NewTokenProvider creates a new token provider .
159	ResumePeer implements transport .
160	removePeer removes a peer from the peer
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault resolves the given address and returns it .
163	resolveTCPAddrs computes a list of URLs from a list of URLs .
164	urlEqual returns true if two URLs are equal .
165	URLStringsEqual compares two strings .
166	NewLeaseCommand returns a new cobra command .
167	NewLeaseGrantCommand returns a new cobra command .
168	 lease grant command .
169	NewLeaseRevokeCommand returns a new cobra command .
170	revokeRevokeCommandFunc is part of the lease
171	NewLeaseTimeToLiveLiveCmd returns a new cobra command .
172	leaseTimeToLiveLiveCmd returns the lease time for the given command .
173	NewLeaseListCommand returns a new cobra command .
174	 lease list
175	NewLeaseKeepAliveCommand returns a new cobra command .
176	aseKeepAliveCommandFunc returns the lease for the given command .
177	NewAlarmCommand returns a new cobra command .
178	armarmDisarmCommandFunc is used to display the alarm
179	 alarm list
180	Flags returns the flags of the Etcd .
181	EmbedConfig returns an embedding config .
182	PProfiles returns a map of PProfiles
183	NewBackendQuota creates a new backend .
184	NewClusterProxy creates a new cluster proxy
185	NewHandler creates a new http . Handler .
186	TimeToLiveLiveHTTP requests a lease to a given URL .
187	newWatcherBatch creates a new watcher .
188	add adds a watcher to the list .
189	contains returns true if the key matches the given key .
190	delete deletes a watcher .
191	select selects all watchers and returns a new one .
192	watcherSetByKey returns a set of watcher set by key .
193	Compare compares two intervals .
194	 successor .
195	updateMax updates the max value of the interval .
196	visitor is used to visit an interval .
197	Delete removes an interval from the tree .
198	Insert inserts an interval into the tree .
199	RotateLeft rotates the given interval .
200	replaceParent updates the parent node .
201	MaxHeight returns the maximum height of the interval .
202	Visit implements the VisvalTree interface .
203	find finds an interval in the tree .
204	Find returns the value of an IntervalTree .
205	Intersects returns true if the interval contains the given interval .
206	Contains returns true if the interval contains the given interval .
207	Visit returns a slice of intervals .
208	Union merges an IntervalTree into an IntervalTreeTree .
209	NewExactReadCloser returns a new io . ReadCloser .
210	NewElection creates a new election .
211	ResumeElection returns a new election .
212	Proclaim is part of the election .
213	Resign the leader to the leader .
214	Leader returns the leader
215	Observe returns a channel for the election
216	check checks if the quota is available .
217	NewExecWatchCommand returns a new cli command .
218	execWatchCommandFunc executes a watch command .
219	NewListener creates a new TCP connection .
220	NewRoundTripper creates a new http . RoundTripper .
221	createPostRequest creates a new http request
222	checkPostResponse checks if the given body is valid .
223	serverVersion returns the server version .
224	checkVersionCompatibility checks if the server is valid .
225	setPeerURLsHeader sets the PeerURLsHeader field s value .
226	addRemoteFromRequest adds a remote URL to the transport
227	NewKeysAPIWithPrefix returns a new KeysAPI
228	TTLDLDuration returns the TTL of the node .
229	SetPflagsFromEnv sets the flags from environment variables .
230	FlagToEnv converts a name to a string .
231	excerpt returns the excerpt of a string .
232	passConfChange returns true if the given entry is valid .
233	printInternalRaftRequest prints an internal RPC request .
234	listEntriesType lists all entries in the given stream .
235	newLog creates a new raft log .
236	newLogWithSize creates a new raft log .
237	findConflict returns the index of the entry in the raft log .
238	nextEnts returns the next log entries .
239	allEntries returns all the entries in the raft log .
240	slice returns a slice of entries in the raft log .
241	NewSession creates a new session
242	Close closes the session .
243	WithTTL sets the TTL for the session .
244	WithLease sets the lease ID
245	addRequest adds a request to the read index .
246	recvAck is called when a message is received .
247	Advances the next read index .
248	lastPendingRequestCtx returns the last pending request context .
249	Start starts the Etcd server .
250	start starts the server
251	Process processes a raft message .
252	ReportSnapshot implements the EtcdServer interface .
253	MoveLeader implements the EtcdServer interface .
254	TransferLeadership implements the EtcdServer interface .
255	configure implements the EtcdServer interface .
256	sync synchronizes the EtcdServer
257	publish publishes the server to the server .
258	applyEntryNormal implements the EtcdServer interface .
259	applyConfChange implements the EtcdServer interface .
260	monitorVersions monitors the version of the Etcd server
261	goAttach implements the EtcdServer interface .
262	NewRoundrobinBalancer creates a new roundrobin .
263	Pick returns a new subConn .
264	NewTLSListener creates a new TCP listener .
265	acceptLoop is used to accept connections .
266	SetEndpoints sets the endpoint s endpoints .
267	Target returns the target endpoint for the given endpoint .
268	Target returns a string representation of the target endpoint .
269	Build builds a resolver .
270	Handle handles the request .
271	NewElectionCommand returns a new cobra command .
272	nodeToMember converts a node into a member .
273	NewTmpBackend creates a new backend .
274	newRevision creates a new revision .
275	Run starts a new revision .
276	Pause pauses the revision .
277	Resume resumes the current revision .
278	VoteRespMsgType returns the vote response type .
279	DescribeMessage returns a human readable representation of a message .
280	DescribeEntry returns a string representation of the entry .
281	DescribeEntries returns a string describing the entries of the given entries .
282	SetLogger sets logger
283	GetLogger returns the logger .
284	maybeFirstIndex returns the index of the latest index .
285	maybeLastIndex returns the index of the last index .
286	getTerm returns the term for the given index .
287	shrinkEntriesArray allocates the list of entries .
288	SaveSnap saves the snapshot to the storage .
289	New creates a new client
290	NewCtxClient creates a new client .
291	NewFromURL creates a new instance of Client
292	Close closes the client .
293	Endpoints returns a slice of Endpoints .
294	SetEndpoints sets the Endpoints for the server
295	Sync synchronizes the cluster
296	dialSetupSetupOpts returns a dials for the given credentials .
297	Dial connects to the given endpoint
298	dialWithBalancer dials the given endpoint
299	dial dials the client
300	WithRequireLeader returns a context with the given context .
301	roundRobinQuorumBackoff returns the backoff backoff for the given endpoint .
302	isHaltErr returns true if the given error is alive .
303	NewLease creates a new lease
304	IsCreate returns true if the event was created .
305	Err implements the WatchResponse interface .
306	IsProgressNotify returns true if the watch response is progress .
307	RequestProgress implements the watcher interface .
308	nextResume returns the next resuming stream .
309	dispatchEvent dispatches a watch response .
310	Broadcast a watch response .
311	unicastResponse is called when a watch is received .
312	joinSubstreams join all substreams .
313	toPB creates a new watch request .
314	toPB returns a copy of the progress request .
315	Contains returns true if the given value exists .
316	ContainsAll returns true if all values are contained in the set .
317	Equals returns true if two sets are equal .
318	Values returns a slice of values .
319	Copy returns a copy of the set .
320	Sub removes all values from another set .
321	v2MembersURL returns the v2 members of the endpoint .
322	NewMigrateCommand returns a new cobra command .
323	publishEntries is used to publish entries in the raft node .
324	openWAL creates a new WAL .
325	replayWAL creates a new WAL .
326	stop stops the raft node .
327	NewWatchCommand returns a new cobra command .
328	InitialState returns the initial state of the storage .
329	SetHardState sets the hard state of the storage .
330	Entries returns all the entries in the memory store .
331	Term returns the term for the given index .
332	LastIndex returns the last index .
333	FirstIndex returns the index of the first index .
334	Snapshot returns the snapshot .
335	ApplySnapshot updates the snapshot .
336	Compact computes the given compact index .
337	unachable removes a url from the list of urls .
338	NewEndpointCommand returns a new cobra command .
339	EpHealthCommandFunc is used to run the epoll command .
340	NewElectCommand returns a new cobra command .
341	NewDefragCommand returns a new command .
342	RegisterBuilder registers a builder .
343	Build builds a balancer .
344	recordTransition returns the state of the given state .
345	doSerialize implements the EtcdServer interface .
346	send sends an event to the watcher .
347	post sends a watch response to the watcher .
348	OriginAllowed returns true if the origin is allowed
349	IsHostWhitelisted checks if a host is whitelist
350	Valids returns a slice of all the valids .
351	NewSelectiveStringsValue returns a new SelectiveStringsValue
352	NewKV creates a new KV3 .
353	NewURLsValue creates a new URL value .
354	URLFromFlag returns a slice of URLs from the flagSet .
355	servePeers starts the server
356	NewStore creates a new store .
357	appendMarkTombstone appends a markTombstone .
358	IsDirWriteable checks if a directory is writable
359	TouchDirAll writes a directory to a directory .
360	CreateDirAll creates a new directory for the given directory .
361	ZeroToEnd implements io . Reader .
362	Open opens a file .
363	NewRaftLoggerFromZap core constructor
364	NewConfig returns a Config object from a file .
365	RegisterElectionHandler registers the RPC handler for the given client .
366	UpdateCapability updates capabilities .
367	NewLockCommand returns a new cobra command .
368	tick implements the raft interface .
369	advanceTicks increments the number of ticks .
370	NewAuthCommand returns a new cobra command .
371	authEnableCommandFunc executes the auth command .
372	authDisableCommandFunc returns the auth disable command
373	RetryKVClient returns a new KVClient .
374	RetryLeaseClient returns a new LeaseClient .
375	RetryClusterClient returns a new cluster client .
376	RetryMaintenanceClient returns a new MaintenanceClient
377	RetryAuthClient returns a new auth client .
378	NewSetDirCommand returns a new command .
379	Enter enters the double barrier .
380	Leave deletes the barrier .
381	HandleBasic implements the http . Handler interface .
382	WriteError writes an error to the server .
383	MemberByName returns the member by name .
384	PeerURLs returns the list of peers in the cluster .
385	ValidateConfigurationChange implements the RaftCluster interface .
386	AddMember adds a member to the cluster .
387	RemoveMember removes a member from the cluster .
388	ValidateClusterAndAssignIDs validates the RaftCluster .
389	Keep returns a map with the given revision .
390	closeRequireLeader closes the leader .
391	resetRecv is used to reset the lease .
392	recvKeepAlive is used to receive a lease .
393	deadlineLoop loops until the deadline is closed .
394	sendKeepAliveLoop sends a lease to the server .
395	NewKV creates a new KV client .
396	Delete deletes a lease .
397	LeaseValue computes a Lease value .
398	ValueBytes returns the value of the comparison .
399	WithRange adds the range to the end of the query .
400	WithPrefix adds the prefix to the query .
401	MustInt64 returns an int64 .
402	MustInt64OrLeaseID returns the value of the given value .
403	Next implements gRPCWatcher .
404	getJournalWriteSyncer creates a write syncer .
405	newKV creates a new node .
406	newDir creates a new node .
407	Read returns the value of the node .
408	Write writes the value to the node .
409	List returns a list of all children .
410	GetChild returns the child of the node .
411	Add adds a child node to the node .
412	Remove removes a node from the store
413	Compare returns true if the given node is equal .
414	Clone returns a copy of the node .
415	isConnectedToQuorumSince returns true if the given member is connected to the server .
416	isConnectedSince returns true if the remote transport is connected .
417	numConnectedSince returns the number of connected peers that have been connected to this member .
418	bestConnected returns the longest connection for the given membs .
419	isTornEntry returns true if the data is TensorEntry .
420	StartMockServersOnNetwork starts a new mock instance
421	StartAt starts the server at the given index .
422	StopAt stops the server .
423	Stop stops the server
424	NewCheckCommand returns a new cobra command .
425	NewCheckPerfCommand returns a new cobra command .
426	NewCheckDatascaleCommand returns a new cobra command .
427	NewGetCommand returns a new cobra command .
428	NewGetCommand returns a new command .
429	PickPeerURL returns a random peer URL
430	HandleMetricsHealth is used to handle metrics health metrics .
431	NewRemoveCommand returns a new command .
432	removeCommandFunc is used to execute a command .
433	checkIntervals returns a map of intervals for each request .
434	ReportEventReceived reports the number of events received .
435	RegisterKVHandler registers a kvserver .
436	RegisterWatchHandler registers a watch handler for a watcher .
437	RegisterLeaseHandler registers a new lease handler .
438	RegisterClusterHandler registers a cluster handler .
439	RegisterMaintenanceHandler registers a maintenance handler for a maintenance server .
440	RegisterAuthHandler registers auth handler for authdserver .
441	startEtcd starts an embeddcd .
442	identifyDataDirOrDie returns the directory for the given directory .
443	openLast attempts to open a log file .
444	called when the leader is received
445	lostNotify returns a channel that was lost .
446	newGRPCProxyCommand returns a new cobra command .
447	NewMemberCommand returns a new cobra command .
448	NewMemberAddCommand returns a new cobra command .
449	NewMemberRemoveCommand returns a new cobra command .
450	NewMemberUpdateCommand returns a new cobra command .
451	NewMemberListCommand returns a new cobra command .
452	MemberAddCommandFunc is used to add a member to the cluster
453	memberRemoveCommandFunc returns the member remove command
454	MemberUpdateCommandFunc returns a member of the member .
455	memberListCommandFunc returns the member list of members
456	Open creates a new WAL .
457	OpenForRead opens a new WAL .
458	Verify verifies that the given wal is valid .
459	Close closes the writer .
460	notify sends a watcher to the watcher .
461	Remove stops the watcher .
462	mkPathDepth creates a path for a node
463	mkV2Node creates a new nodeExpr .
464	PrevKeyFromPuts returns the previous key value from the response .
465	NewWeightedReport creates a new WeightedReport .
466	NewURLsMapFromString creates a new URL map from a string .
467	String returns a string representation of the URLs map .
468	URL returns a slice of URLs .
469	parse parses a string into a map
470	NewClientHandler creates a new HTTP client .
471	writeKeyEvent writes the event to the server .
472	writeKeyError writes an error to the server .
473	getUint64 retrieves a uint64 from the form
474	getBool returns the value of the given key .
475	waitDeletes is used to wait for deletion .
476	AddOutputPaths adds output paths to zap .
477	NewConfig returns a new Config instance
478	PeerURLsAndToken returns a map of URL URLs and token names .
479	GetDNSClusterNames returns a list of cluster names
480	checkBindURLs checks if the given URL is valid .
481	GetCluster returns cluster name for given service .
482	GetClient returns a list of SRV clients
483	GetSRVService returns the SRV service
484	ReadDir reads a directory from a directory .
485	compact commits the given revision .
486	defrag is part of the client
487	NewUserCommand returns a new cobra command .
488	userAddCommandFunc returns the user add command
489	userGetCommandFunc returns the user s role
490	userChangePasswordCommandFunc returns the user change password .
491	addEvent adds an event to the queue .
492	scan scans all events in the event history .
493	clone clones the event history .
494	openSnapshotBackend opens a snapshot .
495	openBackend opens a backend .
496	recoverSnapshotBackend attempts to recover a snapshot of the given snapshot .
497	NewUpdateCommand returns a new command .
498	updateCommandFunc is used to update a key
499	FrontAndBack returns the first item in the queue .
500	Insert adds a request to the queue .
501	Rate returns the rate of the stats queue .
502	Clear clears the stats queue .
503	UniqueStrings returns a slice of random strings .
504	RandomStrings returns a slice of random strings .
505	IsKeyNotFound returns true if the error occurred .
506	IsRoleNotFound returns true if the error occurred .
507	IsUserNotFound returns true if the given error is not found .
508	JoinCluster joins a cluster
509	GetCluster returns cluster
510	newProxyFunc creates a new http . ProxyFunc .
511	isSafeRetry returns true if the given error is safe .
512	withRetryPolicy sets the retry policy for retryPolicy .
513	withAuthRetry sets the retry option to use .
514	withMax returns a retryOption with the maximum number of retries .
515	withBackoff returns a retryOption that sets the backoff function .
516	RecvAppendReq sends a request to the server .
517	SendAppendReq sends a request to the server .
518	merge merges two bucket buffers .
519	deleteRevKey deletes the given key .
520	isMemberBootstrapped checks if a member is bootstrapped
521	GetClusterFromRemotePeers returns the RaftCluster cluster from the given URL .
522	getClusterFromRemotePeers retrieves the cluster from the remote server
523	getRemotePeerURLs returns the list of remote peer URLs from the cluster .
524	getVersions returns the versions of the cluster
525	decideClusterVersion determines the cluster version of the cluster .
526	getVersion retrieves the version of the server
527	NewTimeoutDetector returns a new TimeoutDetector .
528	Reset resets the timer .
529	Observe returns whether the given time is observed .
530	NewPeerHandler creates a new http . Handler .
531	put implements the KeyIndex interface .
532	ombstone is used to create a tombstone .
533	get returns the revision for the given revision .
534	version returns the revision of the given revision .
535	keep removes all the keys from the cache .
536	findGeneration finds the generation for the given rev .
537	cancelWatcher cancels a watcher .
538	syncWatchersLoop loops through all watchers .
539	syncVictimsLoop loops through the store .
540	moveVictim moves all victims to the store .
541	vvsToEvents converts vvs to a list of events .
542	notify sends an event to the store .
543	isOpFuncCalled returns true if op is a function call .
544	UnsafePut implements the Put interface .
545	UnsafeSeqPut adds a value to the batch .
546	UnsafeRange returns a slice of bytes in the batch .
547	UnsafeDelete removes a key from the batch .
548	UnsafeForEach iterates over the given bucket .
549	Commit commits the transaction .
550	CommitAndStop stops the transaction .
551	Renew renew a lease
552	Attach attaches a lease .
553	revokeExpiredLeases deletes all expired leases .
554	checkScheduledLeases ensures that the lease is scheduled .
555	expireExists returns the lease for the given lease
556	findExpiredLeases returns a list of leases that are expired .
557	refresh refreshes the lease .
558	 forever .
559	Keys returns the list of keys .
560	Remaining returns the remaining lease .
561	NewCompactionCommand returns a new cobra command .
562	compactCommandFunc is a helper function for compaction commands
563	NewPutCommand creates a new cobra command .
564	putCommandFunc is used to put a command into the command .
565	NewHandler creates a new http . Handler .
566	NewReadonlyHandler creates a new http handler for readonly .
567	NewSetCommand returns a new command .
568	setCommandFunc sets the value of a key .
569	waitOnLastRev returns true if the last key exists .
570	GetDefaultInterfaces returns the default interfaces
571	NewSnapshotCommand returns a new cobra command .
572	NewMoveLeaderCommand returns a new cobra command .
573	transferLeadershipCommandFunc is part of the command .
574	OpenDir opens a file .
575	NewRemoveDirCommand returns a new command .
576	mdmdDirCommandFunc is used to execute a command .
577	NewDelCommand returns a new cobra command .
578	delCommandFunc executes a delete command .
579	NewExpect creates a new Expect process
580	NewExpectWithEnv creates a new ExpectProcess with the given arguments .
581	ExpectFunc returns a string that matches the given function .
582	Expect returns a string that matches the given string .
583	LineCount returns the number of lines .
584	Sign signals the process .
585	keyFunc returns a string representation of the range .
586	Add adds a new range to the cache .
587	Get implements the Cache interface .
588	Invalidate implements the Cache interface .
589	Compact computes the given revision .
590	NewUniqueURLsWithExceptions creates a new UniqueURLs with the given exceptions .
591	UniqueURLsFromFlag returns a list of unique URLs from the flagSet .
592	UniqueURLsMapFromFlag returns a map of unique URLs for the given flag .
593	Hold implements the Barrier interface .
594	Release releases the barrier .
595	Wait waits for the barrier .
596	NewLockRacerCommand returns a new cobra command .
597	 ElectionTimeout returns the number of seconds .
598	DialEtcdServer creates a grpc server .
599	CreateEtcdClientConfig creates a new Etcd client configuration .
600	CreateEtcdClient creates a client with the given options .
601	CheckCompact checks if the given revision is valid .
602	Defrag implements the EtcdClient interface .
603	RevHash returns the revision of the member .
604	Rev returns the revision of the member .
605	Compact commits the given rev .
606	IsLeader returns true if the member is leader
607	WriteHealthKey writes the health key .
608	SaveSnapshot writes the snapshot to the snapshot .
609	RestoreSnapshot is used to restore a snapshot
610	NewWatcher creates a new watcher .
611	NewRawNode creates a new raft node
612	Campaign implements the raft interface .
613	Propose is part of the raft node .
614	ProposeConfChange implements the RawNode interface .
615	ApplyConfChange applies the given ConfChange .
616	Step implements the RawNode interface .
617	Ready returns a new ready state .
618	WithProgress adds a visitor to the raft node .
619	ReportUnreachable reports an unreachable node .
620	ReportSnapshot reports the given snapshot status .
621	TransferLeader is part of the raft node .
622	ReadIndex reads an index from the raft node .
623	printcURL prints the cURL for cURL .
624	StartNode starts a new node
625	RestartNode returns a new node .
626	tick runs the ticker .
627	MustSync returns true if the state of the given state was synced .
628	NewGRPC17Health returns a new GRPC17Health .
629	NeedUpdate returns true if the server has been updated .
630	dflSignal sends a signal to a signal .
631	New creates a new Store
632	Index returns the current index .
633	Get returns an event .
634	Create creates a new event .
635	Set sets the value of a node .
636	getCompareFailCause returns a human - readable string for comparison .
637	Delete deletes a node .
638	walk walks the path and returns the root node .
639	Internal method to get a node from the store .
640	DeleteExpiredKeys deletes expired keys .
641	checkDir checks if a directory exists and returns it .
642	Save implements the Store interface .
643	Recovery restores the state of the store .
644	Next returns the next unique identifier .
645	NewMakeMirrorCommand creates a new cobra command .
646	NewZapCoreLoggerBuilder creates a new instance of zap core .
647	NewSyncer creates a new syncer .
648	DropPort drops a port
649	SetLatency sets the latency for the network
650	RemoveLatency removes the latency from the list of interfaces
651	NewTxnCommand returns a new cobra command .
652	txnCommandFunc executes a transaction with the given arguments .
653	New creates a new Compactor .
654	printResponseKey prints the response key
655	RegisterLockHandler registers a new lock handler .
656	grpcHandlerFunc returns a HandlerFunc that can be used to serve the grpc server .
657	addCORSHeader adds the header to the response header
658	fallback returns a list of operations that can be used to fallback .
659	IDFromString returns a ID from a string .
660	release releases the lock .
661	EncodedSize returns the size of the value .
662	Decode decodes a value into a ValueStruct struct .
663	NewMergeIterator returns a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns true if the iterator is valid .
666	Key returns the key .
667	Value returns the value of the merge iterator .
668	Next implements the MergeIterator interface .
669	Seek implements the MergeIterator interface .
670	Close implements the MergeIterator interface .
671	Encode encodes a pointer to a byte slice .
672	Decode decodes the header .
673	encodeEntry encodes an entry into a buffer .
674	SetEntry sets the entry in the batch .
675	Set implements the WriteBatch interface .
676	SetWithTTL adds a value to the store .
677	Delete deletes a key .
678	commit commits the transaction .
679	Flush implements the WriteBatch interface .
680	Error implements the WriteBatch interface .
681	getMemTables returns the memplist of the memplist .
682	writeRequests writes the request to the database .
683	ensureRoomForWrite writes the table to the database .
684	writeLevel0 writes the table to the table .
685	handleFlushTask handles FlushTask .
686	flushMemtable flushes memtable
687	calculateSize calculates the size of the file .
688	Size returns the size of the storage .
689	Next returns the next value .
690	Release releases the sequence .
691	KeySplits returns a list of keys for the given prefix .
692	Flatten flushes all workers in the database .
693	Mmap mocks base method
694	Madvise mocks base method
695	setDiscardTs sets the discard timestamp .
696	hasConflict returns true if the transaction has a conflict
697	Set adds a value to the transaction .
698	SetWithMeta adds a new entry to the transaction .
699	Delete deletes a key .
700	Get retrieves an item from the database .
701	CommitWith implements the transaction interface .
702	View executes a transaction .
703	Update updates a transaction .
704	Seek implements the SeekIterator interface .
705	SeekToLast returns the previous block iterator .
706	parseKV parses the given header .
707	NewIterator returns a new Iterator .
708	seekFrom implements iterator . SeekFrom interface .
709	seekForPrev implements iterator . SeekForPrev .
710	Value returns the next value .
711	Seek implements Iterator .
712	NewConcatIterator returns a new ConcatIterator .
713	Valid returns true if the iterator is valid .
714	Next implements the NextIterator interface .
715	Close closes the iterator .
716	OpenExistingFile opens a file .
717	Copy returns a copy of the given slice .
718	KeyWithTs adds a timestamp to the given key .
719	ParseTs parses the given key .
720	ParseKey parses a key .
721	SameKey returns true if dst is equal .
722	FixedDuration returns a string representation of a fixed duration .
723	NewCloser returns a new Closer .
724	NewThrottle returns a new Throttle
725	Do implements Throttle .
726	Done implements Throttle .
727	Finish implements Throttle .
728	SetDiscardTs sets the discard timestamp .
729	openReadOnly opens a log file .
730	iterate recursively iterates over the log file .
731	sortFids returns a sorted list of files sorted by their IDs .
732	write writes request to disk log .
733	populateDiscardStats is used to populate log statistics .
734	Backup implements database .
735	ToList converts an iterator into a list of KV objects .
736	produceRanges generates ranges from the stream .
737	produceKVs generates a list of KVVs .
738	Run orchestrates the stream .
739	NewStream creates a new stream .
740	NewStreamAt returns a new stream at the given read timestamp .
741	DecrRef decrements the table .
742	ParseFileID parses a file ID .
743	PrintHistogram prints the histogram .
744	newSizeHistogram creates a new size histogram .
745	buildHistogram builds a histogram for the given key prefix .
746	Print histogram .
747	Init initializes the watermark .
748	Begin implements the Watermark interface .
749	BeginMany implements the Watermark interface .
750	Done implements the Watermark interface .
751	DoneMany implements the Watermark interface .
752	SetDone sets the done value .
753	WaitForMark implements the Watermark interface .
754	Encode encodes the header .
755	Decode decodes the header .
756	NewTableBuilder returns a new builder .
757	keyDiff returns the difference between two keys .
758	Add adds a key to the builder .
759	blockIndex returns the index of the block .
760	Finish finishes the builder .
761	Errorf logs an error message .
762	Infof logs a message .
763	DecrRef decrements the number of references .
764	NewSkiplist creates a new Skiplist .
765	Put implements the skiplist interface .
766	Get returns the value for the given key .
767	Key returns the next key .
768	Value returns the value of the iterator .
769	Next implements Iterator .
770	Prev returns the next element in the list .
771	Seek implements Iterator .
772	SeekForPrev implements Iterator interface .
773	NewUniIterator returns a new ui iterator
774	Next implements the NextIterator interface .
775	Seek implements the iterator interface .
776	AsChanges returns a copy of the manifest .
777	Rewrite the manifest file .
778	validate checks if the table is valid .
779	AcquireDirectoryLock creates a new directory lock .
780	release releases the lock .
781	AssertTruef asserts whether the given bool is true .
782	Wrapf wraps an error .
783	initTables initializes tables .
784	deleteTables deletes all tables .
785	tryAddLevelTable adds a table to the table .
786	getTableForKey returns the table for the given key .
787	get returns the max value for the given key .
788	 overlapping tables
789	String returns a string representation of the item .
790	KeyCopy copies the key to dst .
791	ValueSize returns the size of the item .
792	NewKeyIterator creates a new iterator for the given key .
793	Valid returns true if the item is valid .
794	ValidForPrefix returns true if the iterator is valid .
795	Close closes the iterator .
796	parseItem parses the next item in the iterator .
797	Seek implements Iterator interface .
798	GetMergeOperator returns a new MergeOperator .
799	Get returns the value of the merge operation .
800	compareAndAdd adds a new entry to the compact .
801	newArena returns a new Arena .
802	putNode returns the node at the given height .
803	getNode returns the node at the given offset .
804	getKey returns the key at the given offset .
805	getVal retrieves a value from the buffer .
806	getNodeOffset returns the offset of a node .
807	init initializes the cache
808	revertToManifest removes the manifest from the manifest .
809	dropTree deletes the list of tables .
810	dropPrefix removes the given prefix .
811	isLevelCompactable computes whether or not the current level is compactable .
812	doCompact computes the compact level .
813	get returns the value for the given key .
814	seekTotal returns the total balance of the account .
815	findFirstInvalidTxn returns the first valid transaction that is invalid .
816	Create creates a new snapshot sink .
817	List returns the snapshot meta information .
818	Open returns a snapshot of the given ID .
819	Write writes data to disk .
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore .
821	NewFileSnapshotStore creates a new FileSnapshotStore
822	snapshotName returns the name of the snapshot .
823	Create creates a new snapshot .
824	List returns a list of all snapshots .
825	getSnapshots returns a list of snapshotSnapshotMeta objects .
826	readMeta returns the metadata for the given name .
827	Open implements the FileSnapshotStore interface .
828	ReapSnapshots removes all snapshots from the file .
829	Write writes bytes to the buffer .
830	Close closes the snapshot .
831	Cancel closes the file snapshot .
832	Finalize the state of the snapshot .
833	writeMeta writes meta data to disk .
834	NewNetworkTransportWithConfig returns a new NetworkTransport .
835	setupStreamContext initializes the stream context .
836	getStreamContext returns the stream context .
837	SetHeartbeatHandler sets the heartbeat handler
838	CloseStreams closes the connection pool .
839	Close closes the NetworkTransport .
840	getPooledConn returns a netConn with the given target address .
841	getConnFromAddressProvider returns a netConn from the given address provider .
842	getConn returns a connection to the given target address .
843	return a connection to the pool
844	Listen starts a new TCP connection .
845	handleConn handles a connection .
846	handleCommand handles the RPC command .
847	decodeResponse decodes and decodes the response .
848	sendRPC sends a RPC request to the server .
849	newNetPipeline creates a new network pipeline .
850	decodeResponses processes incoming responses .
851	AppendEntries implements net . AppendEntries .
852	Close closes the network .
853	NewObserver returns a new Observer .
854	RegisterObserver registers a new observer .
855	DeregisterObsister removes an observer from the Raft .
856	Observe implements the Raft interface .
857	NewInmemStore creates a new InmemStore .
858	FirstIndex returns the first index of the index .
859	LastIndex returns the last index of the last index .
860	GetLog returns the log for the given index .
861	StoreLog stores a log into the store .
862	StoreLogs stores the logs in the store .
863	DeleteRange deletes a range of logs .
864	Set sets the value of a key .
865	Get returns the value associated with the given key .
866	SetUint64 sets a uint64 value .
867	GetUint64 returns the uint64 value for the given key .
868	NewLogCache returns a new LogCache .
869	Connect connects to the given peer .
870	Disconnect removes a peer from the pool
871	DisconnectAll deletes all connections .
872	Respond sends an RPC response .
873	Open opens a snapshot .
874	vote is part of the VerifyFuture interface .
875	notifyAll is used to notify all listeners .
876	cleanNotify deletes the notify future .
877	LastContact returns the last contact
878	setLastContact sets the last contact
879	replicate is used to replicate a follower .
880	Pipicate replicates the given follower .
881	pipeSend sends a pipeline to the server .
882	decodeDecode decodes the pipeline from the pipeline .
883	setupAppendEntries is used to setup the appendEntries .
884	setPreviousLog sets the previous log entry .
885	setNewLogs sets the new log entries .
886	appendStats appends stats to the server
887	handleStaleTerm is used to handle stale changes .
888	AppendEntries implements the Transport interface .
889	RequestVote implements the Transport interface .
890	InstallSnapshot implements the Transport interface .
891	EncodePeer implements transport .
892	DecodePeer decodes a peer address .
893	AppendEntries is part of the pipeline .
894	ReadPeersJSON parses a JSON configuration file .
895	ReadConfigJSON parses a JSON configuration file .
896	NewTCPTransport creates a new TCPTransport .
897	NewTCPTransportWithLogger creates a new TCPTransport with the given bind address .
898	NewTCPTransportWithConfig creates a new TCPTransport with the given configuration .
899	Dial connects to a TCP stream .
900	Accept implements the TCPStream interface .
901	Addr returns the address of the TCP stream .
902	RestoreSnapshot restores the snapshot from the Raft snapshot .
903	BootstrapCluster implements the RaftCluster interface .
904	Leader returns the leader .
905	Apply implements the Raft interface .
906	 barrier barrier .
907	VerifyLeader implements the Raft interface .
908	AddVoter adds a new server to the server .
909	RemoveServer removes a server from the Raft server .
910	Shutdown implements the Raft interface .
911	Snapshot returns a snapshot of the Raft .
912	Restore implements the Raft interface .
913	String returns a string representation of Raft .
914	LastContact returns the last contact time .
915	Logf implements Logger interface .
916	containsNode returns true if the raft node contains a raft node .
917	LeaderPlus returns a list of raft nodes .
918	WaitTilUptoDate waits for the current state of the cluster .
919	assertLogEntryEqual returns true if the raft log entry is equal .
920	runFS mocks base method
921	Clone returns a copy of the configuration .
922	Clone returns a copy of the configuration .
923	hasVote returns true if the server has a vote .
924	checkConfiguration checks if the configuration is valid .
925	nextConfiguration returns the next configuration of the current configuration .
926	encodePeers encodes the given configuration .
927	decodePeers parses the peers from the given buffer .
928	encodeConfiguration encodes a configuration .
929	decodeConfiguration decodes a message into a configuration .
930	goFunc is a helper function to run a goroutine .
931	getLastIndex returns the last index of the raft index .
932	getLastEntry returns the last entry in the raft state .
933	checkRPCHCHeader checks if the RPC command is valid .
934	setLeader sets the leader
935	requestConfigChange implements the Raft interface .
936	run starts the Raft .
937	runFollower starts the leader .
938	liveBootstrap is used to start the cluster .
939	runCandidate runs the candidate .
940	runLeader starts the leader .
941	startStopReplication is used to start the leader .
942	ConfigurationChangeChableChable returns a channel change channel change channel change .
943	verifyLeader sets the leader to the leader .
944	checkLeaderLease checks if the leader is alive .
945	restoreUserSnapshot restores a snapshot of the given reader .
946	appendConfigurationEntry adds a new configuration entry to the server .
947	DispatchLogs sends a list of log messages .
948	processLogs processes the given index .
949	processLog implements the Raft interface .
950	processRPC processes the RPC command .
951	processHeartbeat processes a Raft RPC request .
952	setLastContact sets the last contact
953	persistVote is used to persist a vote .
954	setCurrentTerm sets the current state .
955	setState sets the state of the RaftState .
956	getCommitIndex returns the commit index .
957	calculate recalculates the state of the commitment .
958	randomTimeout returns a channel with the given min value .
959	generateUUID generates a random UUID
960	decodeMsgPack decodes a message into an interface .
961	encodeMsgPack encodes a message into a buffer .
962	backoff returns the backoff for the given round .
963	newApplySource creates a new seed source .
964	reset initializes the source .
965	DefaultConfig returns the default configuration
966	ValidateConfig validates the configuration .
967	runSnapshots starts a snapshot of the Raft .
968	shouldSnapshot returns true if the raft log is a snapshot .
969	takeSnapshot returns a snapshot of the Raft .
970	compactLogs removes the log entries from the Raft log .
971	WebpackCheck checks for webpack
972	New creates a genny . Generator .
973	UnixSocket creates a new listening socket .
974	Get returns the error handler
975	PanicHandler registers a panic handler for the application .
976	partialFeeder returns a partial feeder for the given name .
977	New returns a new Engine .
978	WriteTo implements io . Writer interface .
979	Send sends a SMTP message .
980	NewSMTPSender creates a SMTPender .
981	Param returns the value for the given key .
982	Set sets the value of a key .
983	Value returns the value of the given key .
984	Redirect redirects to the given URL .
985	File is part of the request .
986	MarshalJSON marshals the default context .
987	New creates a new Genny group .
988	New creates a new application .
989	DeprecrationsCheck returns a list of warnings that have been found .
990	List lists all resources .
991	Render renders the given data .
992	Save the session
993	GetOnce removes a value from the session
994	Set sets the value in the session
995	Clear removes all values from the session
996	getSession returns the session
997	New creates a new genny . Generator .
998	New creates a new Genny .
999	New creates a new Genny .
1000	NewMessage creates a new Message .
1001	Reset clears the message .
1002	SetHeader sets the header field s value .
1003	SetHeaders sets the headers .
1004	SetAddressHeader sets the address header field .
1005	FormatAddress formats an address .
1006	SetDateHeader sets the date header
1007	FormatDate formats a date
1008	SetBody sets the body of the message .
1009	SetPartEncoding sets the encoding encoding .
1010	SetHeader sets the Header field s value .
1011	SetCopyFunc sets the CopyFunc field s value .
1012	AttachReader implements the Message interface .
1013	Attach adds a file to the message .
1014	EmbedReader adds a reader to the message .
1015	Embed embeds a file .
1016	ValidateTemplates runs the given walker .
1017	PlushValidator parses the given file .
1018	Validate validates the options .
1019	LoadPlugins loads plugins .
1020	WriteHeader writes the status code to the response .
1021	Write writes data to the response .
1022	Flush implements the ResponseWriter interface .
1023	CloseNotify implements the ResponseWriter interface .
1024	Run starts the application .
1025	filterRelevantFiles is a helper function for filtering files .
1026	GoTemplateEngine generates a template engine .
1027	GET adds a route to the router
1028	Redirect redirects to the router
1029	Adds a route to the router .
1030	buildRouteName builds the route name for a route .
1031	New creates a new genny group .
1032	NewDialer creates a new Dialer .
1033	Dial implements the Dialer interface .
1034	DialAndSend sends a message to the given Dialer .
1035	Set implements the Flash interface .
1036	Add adds a value to the flash
1037	save saves the flash data to the session
1038	newFlash returns a new Flash object
1039	Get returns the value of the cookie
1040	Set sets a cookie
1041	SetWithExpirationTime sets the cookie with the given name .
1042	Delete deletes a cookie
1043	NewMessage creates a new message
1044	NewFromData creates a new Message from the given data .
1045	New creates a new message .
1046	CloseNotify closes the event source .
1047	NewEventSource creates a new EventSource
1048	NewSimpleWithContext creates a new Logger .
1049	Register registers a new handler .
1050	Start starts the application .
1051	Stop stops the worker .
1052	Performs the given job .
1053	PerformAt performs a task at the given time .
1054	PerformIn executes a given job in parallel .
1055	String returns a string representation of RouteInfo
1056	Alias adds aliases to the router .
1057	Name sets route name
1058	BuildPathHelper returns a template helper function that builds the path for the route .
1059	New creates a genny . Generator .
1060	New creates a new generator .
1061	RegisterCustomDecoder registers a custom decoder .
1062	Replace adds a new middlewareFunc to the stack .
1063	Route returns the routes .
1064	WrapBuffaloHandler wraps the http . Handler interface .
1065	PackageJSONCheck is used to create a package json file
1066	match matches the given path
1067	Send sends a message to Sender .
1068	Last returns true if the given name matches the given name .
1069	Stop stops the application .
1070	DepEnsure implements the RunEnsure interface .
1071	String returns a string representation of BuildInfo .
1072	New creates a new generator .
1073	AddBody adds a body to the message .
1074	AddBodies adds the given renderer to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds an embedded attachment to the message .
1077	SetHeader sets the header field s value .
1078	New creates a new Genny group .
1079	New creates a new genny . Generator .
1080	New creates a new genny package .
1081	Cleanup cleans up the working directory
1082	MDTemplateEngine renders HTML template
1083	Update updates the config map .
1084	FilterChanges returns a map of config changes to the config map .
1085	getLabelsFromRegex returns a list of labels that match the regex .
1086	getLabelsFromGenericMatches returns a list of labels from a generic match .
1087	Start starts the agent
1088	Subscribe will subscribe to the agent
1089	Config returns the current configuration .
1090	Set sets the state of the agent
1091	IsMember returns true if the user is member of the given organization .
1092	ListIssueComments mocks base method
1093	ListPullRequestComments mocks base method
1094	ListReviews returns a list of reviews .
1095	ListIssueEvents mocks base method
1096	CreateComment creates a new issue comment
1097	CreateReview creates a new review .
1098	CreateCommentReaction creates a comment reaction
1099	CreateIssueReaction creates a new IssueReaction
1100	DeleteComment deletes a comment .
1101	DeleteStaleComments deletes a comment .
1102	GetPullRequest returns the pull request for a given number .
1103	GetPullRequestChanges returns the pull request changes for a given number .
1104	GetRef returns a reference to a reference
1105	DeleteRef deletes a ref
1106	GetSingleCommit returns a single Commit .
1107	CreateStatus creates a new GitHub status
1108	ListStatuses returns a list of statuses .
1109	GetCombinedStatus returns the combined status of a repository .
1110	GetRepoLabels returns a list of repo labels .
1111	Get issue labels
1112	AddLabel adds a label to the repo
1113	RemoveLabel removes a label .
1114	FindIssues mocks base method
1115	AssignIssue adds an issue to the github repo .
1116	GetFile returns the contents of a file .
1117	ListTeams returns a list of team names .
1118	ListTeamMembers returns a list of team members .
1119	IsCollaborator returns true if the user belongs to .
1120	ListCollaborators lists all collaborators .
1121	ClearMilestone clears a milestone .
1122	SetMilestone sets the milestone
1123	ListMilestones mocks base method
1124	ListPRCommits returns a list of repository commits .
1125	GetRepoProjects returns a list of repo projects .
1126	GetOrgProjects returns a list of project projects
1127	GetProjectColumns returns the project columns for the given project ID .
1128	CreateProjectCard creates a new project card .
1129	DeleteProjectCard deletes a project card .
1130	MoveProjectCard mocks base method
1131	CreateDatabaseClient creates a new InfluxDB client .
1132	Push adds a metric to the database .
1133	NewProwJobWithAnnotation creates a new ProwJob with the given labels .
1134	NewProwJob creates a new ProwJob .
1135	NewPresubmit creates a new Prow .
1136	PresubmitSpec creates a PresubmitSpec from the given config .
1137	PostsubmitSpec creates a ProwJobSpec from the config
1138	periodicSpec returns a ProwJobSpec .
1139	BatchSpec returns a PATCH job spec .
1140	PartitionActive returns a list of Prow jobs .
1141	ProwJobFields returns the fields of a Prow job .
1142	ClusterToCtx returns the name of the cluster .
1143	AddCommand adds a command to the plugin .
1144	Get returns a ProwJob
1145	Watch returns a watch
1146	Delete deletes a ProwJob
1147	Patch implements the ProwJob interface .
1148	MergeMethod returns the merge method for the given repository .
1149	Query returns the query string .
1150	ForRepo returns true if the repository matches the given repository .
1151	OrgExceptionsAndRepos returns the list of repositories and repos .
1152	QueryMap returns a new QueryMap
1153	ForRepo returns a list of queries for the given repository .
1154	Validate validates the policy policy .
1155	GetTideContextPolicy returns the latest context policy for the given branch .
1156	IsOptional checks if the given context is optional .
1157	MissingRequiredContexts returns a list of missing contexts .
1158	ValidateWebhook validates webhook request .
1159	HelpProvider returns a plugin help .
1160	HandleEvent handles a pull request .
1161	HandleAll handles all external repositories .
1162	NewDryRunProwClient returns a new PryProwClient
1163	Create creates a new ProwJob
1164	Update updates a ProwJob
1165	UpdateStatus updates a ProwJob .
1166	Delete deletes a pod
1167	DeleteCollection deletes collection .
1168	Get returns a ProwJob
1169	List lists all Prow jobs
1170	Watch returns a watch for the dry run .
1171	Patch returns a ProwJob .
1172	hasSynced returns true if the controller is synced .
1173	Run starts the controller .
1174	runWorker is used to run a worker .
1175	fromKey converts a key to a string .
1176	enqueueKey adds a key to the queue
1177	finalState returns true if the given status is valid .
1178	description returns the description of the condition .
1179	rowJobStatus returns the prow job status for the pipeline .
1180	pipeMeta returns the metadata for a job .
1181	sourceURL returns the source URL for the given ProwJob .
1182	makePipelineGitResource creates a pipeline resource .
1183	makePipelineRun creates a PipelineRun .
1184	matchConfigs returns a list of all configs matching the given labels .
1185	SuggestCodeChange returns the suggestion for the given problem .
1186	ServeExternalPluginHelp implements the http . Handler interface .
1187	protect the branch protection
1188	UpdateOrg updates an existing org
1189	UpdateRepo updates a repository
1190	UpdateBranch updates a branch .
1191	LoadConfig loads the options from a string .
1192	Run runs the command .
1193	Start starts the agent .
1194	reloadSecret reloads a secret
1195	GetSecret gets the secret from the agent
1196	setSecret sets the secret for the agent
1197	GetTokenGenerator returns a generator for the given secret path .
1198	New creates a new history .
1199	Record records a pull .
1200	ServeHTTP implements the http . Handler interface .
1201	Flush the history of the history .
1202	AllRecords returns all log records .
1203	MakeCommand returns a cobra command .
1204	CheckFlags checks if the pattern is valid .
1205	ReceiveComment is used to receive a comment
1206	NewController creates a new controller .
1207	Run starts the controller .
1208	runWorker runs the worker .
1209	New creates a new local Git .
1210	MakeFakeRepo creates a new repo
1211	AddCommit adds a file to the local repo .
1212	Check new branch
1213	Checkout implements the local git repository .
1214	RevParse returns the revision of the git repo
1215	CleanAll deletes all regions
1216	optionsForRepo returns the lgtm options for the given repo
1217	get changed files
1218	loadReviewers loads reviewers from the given files .
1219	NewController creates a new Controller .
1220	SaveLastSync saves the last sync time .
1221	Sync is used to sync changes .
1222	AddFlags adds the command to the command line .
1223	CheckFlags sets the flags for the event counter .
1224	ReceiveIssueEvent is used to receive issue events .
1225	Upload uploads to bucket
1226	FileUploadWithMetadata creates a new file upload with metadata .
1227	DataUploadWithMetadata creates a new UploadFunc with metadata
1228	HasLabel returns true if the given label matches the given label .
1229	ImageTooBig returns true if the image is too large .
1230	LevelFromPermissions returns the level of the given permissions .
1231	PermissionsFromLevel returns the permissions for the given permission level .
1232	newProwJobs returns a new ProwJobs instance
1233	GetApplicable returns a list of blocks that are applicable to the given repository .
1234	serve serves the jenkins server
1235	NewCountPlugin creates a new command .
1236	ReceiveComment is used to receive a comment
1237	updateMetrics updates metrics on disk
1238	LogStatus logs the resource
1239	SyncConfig is a helper function to sync the storage
1240	Metric returns a metric for a resource .
1241	FormatURL formats a URL to a URL .
1242	runAndSkipJobs runs the given request and returns an error .
1243	validateContextOverlap returns an error if there are no contexts .
1244	RunRequested runs the given pull request .
1245	skipRequested reports the status of a pull request .
1246	Match returns true if the given label matches the given label .
1247	Match returns true if the event name matches the given label .
1248	AddFlags adds the flags to the GitHubOptions .
1249	AddFlagsWithoutDefaultGitHubPath adds flags to the flagSet .
1250	Validate validates GitHub options .
1251	Get GitHubClientWithLogs returns a GitHub client with the given fields .
1252	GithubClient returns a GitHub client .
1253	Gets the git client
1254	toMap converts the CoverageList to a map
1255	findChanges returns a list of coverage changes .
1256	CreateDatabase creates a new database .
1257	ShouldReport reports whether the given Prow job should be reported .
1258	Report reports a ProwJob .
1259	MarkComplete implements the SetComplete interface .
1260	NewJobAgent creates a new job agent .
1261	Start starts the job agent .
1262	Job returns all jobs .
1263	ProwJobs returns a slice of Prow jobs .
1264	GetProwJob returns a Prow job by id .
1265	GetJobLog returns the log for the given job .
1266	unionStrings returns a slice of strings .
1267	Apply returns a copy of the policy .
1268	GetOrg returns the org . org
1269	GetRepo returns a repository by name
1270	GetBranch returns a branch by name
1271	GetPolicy returns the policy for the given branch .
1272	UpdateIssueEvents updates the issue events for the given issue ID .
1273	enqueueKey adds a key to the queue
1274	rowJobStatus returns the prow job status for the given build status .
1275	buildEnv returns the environment variables for the given job .
1276	defaultArguments applies the default arguments to the template .
1277	defaultEnv adds the environment variables to the container
1278	InjectSource adds the source to the build .
1279	injectSteps injects the steps into the container
1280	Determines the timeout for the build spec .
1281	makeBuild creates a build from a ProwJob .
1282	newLabels returns a slice of labels .
1283	newAssignees creates a new Assignee
1284	NewIssueComment creates a new issue comment .
1285	messageFilter returns a filter that matches the given changes .
1286	IsSuccess returns true if the build is success .
1287	IsFailure returns true if the build is a failure .
1288	IsAborted returns true if the build is aborted .
1289	ProwJobID returns the Prow job ID .
1290	BuildID returns the build ID of the build .
1291	CrumbRequest retrieves the crumb request
1292	Measure metrics for a request .
1293	GetSkipMetrics returns the skip metrics for the given path .
1294	Get returns the content of a path
1295	request performs a request and returns the response
1296	doRequest sends a request to the client
1297	getJobName returns the job name for the job .
1298	getBuildPath returns the path for the build job .
1299	GetJobInfo returns the JobInfo for the given spec .
1300	JobParameterized returns true if the job is parameterized
1301	EnsureBuildableJob ensures that the provisioned job is valid .
1302	LaunchBuild launches a build .
1303	Build builds a ProwJob
1304	BuildFromSpec builds a project from a pod spec
1305	GetEnqueuedBuilds returns a map of BuildBuilds .
1306	Abort aborts a build .
1307	PresubmitToJobSpec returns a job spec .
1308	PostsubmitToJobSpec returns a job spec . JobSpec
1309	PeriodicToJobSpec returns a job spec .
1310	GetBuildID returns the build ID for the given name .
1311	listGCSObjects lists all objects in a bucket .
1312	FindBaseProfile finds the base profile for a project .
1313	sortBuilds sorts a list of builds
1314	GetAll returns all regions in the session
1315	NewEventClient creates a new EventClient
1316	PruneComments deletes the given issue comment .
1317	FormatResponse returns a string representation of the response .
1318	FormatSimpleResponse returns a string representation of a message .
1319	FormatICResponse returns a string representation of an issue comment .
1320	FormatResponseRaw returns a string representation of the response .
1321	Validate validates the options .
1322	Encode returns a string representation of options .
1323	RegisterIssueHandler registers an issue handler .
1324	RegisterIssueCommentHandler registers an issue comment handler .
1325	RegisterPullRequestHandler registers a pull request handler .
1326	RegisterStatusEventHandler registers a status event handler .
1327	RegisterPushEventHandler registers a push event handler .
1328	RegisterReviewEventHandler registers a review event handler .
1329	RegisterReviewCommentEventHandler registers a review comment handler .
1330	RegisterGenericCommentHandler registers a generic comment handler .
1331	NewAgent creates a new Agent
1332	InitializeCommentPruner initializes CommentPruner
1333	CommentPruner returns the comment pruneer .
1334	Load loads a configuration file .
1335	Config returns the current configuration .
1336	Set sets the configuration .
1337	Start starts the agent .
1338	GenericCommentHandlers returns a map of generic comment handlers .
1339	IssueHandlers returns a map of issue handlers .
1340	IssueCommentHandlers returns a map of issue comment handlers .
1341	PullRequestHandlers returns a map of pull request handlers .
1342	ReviewEventHandlers returns a map of ReviewEvent handlers for the given repository .
1343	ReviewCommentEventHandlers returns a map of ReviewCommentEvents for the given repository .
1344	StatusEventHandlers returns a map of registered plugins .
1345	PushEventHandlers returns a map of push event handlers for the given repository .
1346	EventsForPlugin returns a list of events for a plugin .
1347	insertLink inserts a new view to the given view URL
1348	HelpProvider returns a new plugin help .
1349	getPatch returns the patch for the given branch .
1350	releaseNotesFromParent returns the release notes from the parent PR .
1351	ValidatePayload checks if the signature is valid .
1352	PayloadSignature returns the signature of the payload
1353	updateString is used to update a string
1354	updateBool is used to update a boolean value .
1355	configureOrgMeta updates the org metadata for an org .
1356	configureTeamRepos is used to configure a team repo
1357	ShouldReport reports whether the given ProwJob is reporting .
1358	Run runs the given job spec .
1359	Format implements the DefaultFormatter interface .
1360	FindLabels returns a slice of labels matching the regexp .
1361	AddFlags adds flags to the logger .
1362	NewAgent creates a new Agent
1363	HandleLogin is used to handle a login request
1364	HandleLogout handles the login session .
1365	serverError sends an error to the server
1366	FromItem converts an item into a ResourceConfig object .
1367	GetItems returns the items in the collection .
1368	SetItems sets the ItemsConfig field s value .
1369	UnmarshalText unmarshals the given text .
1370	IsAssignee checks if the given login is assignee
1371	IsAuthor checks if the user is authorized
1372	HasLabel returns true if the given label matches the given label .
1373	Branch returns the branch name
1374	truncate will truncate a string
1375	reportStatus reports the status of a job .
1376	parseIssueComments parses the issues of the issue comment .
1377	createComment creates a comment for a report
1378	Config returns a new LensConfig instance
1379	Callback calls the callback function for the lens
1380	FormatRecord formats a record .
1381	Namespace sets the namespace
1382	NewFakeClient creates a new fake client
1383	NewClientInCluster creates a new client in cluster
1384	NewClientFromFile creates a new client from a file .
1385	NewClient creates a new client .
1386	ReplaceConfigMap replaces a config map .
1387	GetDiskUsage returns the total usage of the given path .
1388	GetATime returns the time of the given path .
1389	RegisterLens registers a new lens .
1390	GetLens returns a Lens by name .
1391	LastNLines returns the last n lines of an artifact .
1392	NewClient creates a new client .
1393	WriteMessage sends a message to the chat .
1394	MarkAndSweep deletes a set of NatGateways
1395	ListAll returns a set of all NATGateways
1396	NewClient creates a new client .
1397	Acquire acquires a resource
1398	AcquireWait waits for a resource to be acquired .
1399	AcquireByState returns all resources associated with the given state .
1400	ReleaseAll releases all resources
1401	ReleaseOne releases the given name and dest .
1402	UpdateAll updates all resources .
1403	SyncAll updates all resources .
1404	UpdateOne updates a resource with the given state .
1405	Metric mocks base method
1406	HasResource returns true if the client has a resource
1407	DialContext implements Dialer . Dialer . Dialer
1408	NewDashboardAgent creates a new dashboard agent .
1409	QueryPullRequests returns a list of pull requests .
1410	GetHeadContexts returns a list of contexts for the HEAD request .
1411	Constructs the search query for the given login
1412	NewBundledStates returns a new BundledStates instance
1413	ReceiveEvent implements the BundledStates interface .
1414	ages returns the age of the given time .
1415	Percentile returns the age of the given time .
1416	NewMetrics returns a new Metrics instance
1417	NewDiskCache creates a new http . RoundTripper .
1418	NewMemCache creates a new http . RoundTripper .
1419	NewFromCache creates a new http . RoundTripper .
1420	ProwV1 returns a ProwV1
1421	Prow returns a ProwV1
1422	NewOwners returns a new Ownership instance
1423	GetApprovers returns the set of approvals for the owner .
1424	GetAllPotentialApprovers returns a list of all approvers .
1425	GetReverseMap returns a map of approverses .
1426	TemporarilyUnapprovedFiles returns a list of unapproved files .
1427	KeepCoveringApprovers returns the list of approved files that have been removed .
1428	GetSuggestedApprovers returns a list of available approvers .
1429	GetOwnersSet returns a set of owners for the owner .
1430	GetShuffledApprovers returns a list of all approvers .
1431	String returns a string representation of Approval .
1432	IntersectSetsCase returns the intersection of two strings .
1433	NewApprovers returns a new Approvers .
1434	AddLGT merges the given login .
1435	RemoveApprovers removes a user from the approval .
1436	AddAssignees adds the user to the approval list
1437	GetCurrentApproversSetCased sets the current user s approvals set .
1438	GetFilesApprovers returns the set of files that have been set .
1439	NoIssueApprovers returns a map of all approvers
1440	UnapprovedFiles returns a set of unapproved files .
1441	GetFiles returns all the files that have been approved .
1442	IsApproved returns true if the Approved is enabled .
1443	ListApprovals returns a list of approved approvals .
1444	ListNoIssueApproval returns a list of ApprovalApprovers
1445	GenerateTemplate generates a template from a template
1446	writeTemplate writes a template to a file .
1447	Labels returns a slice of labels .
1448	LabelsForTarget returns a slice of labels for a given target .
1449	LoadConfig loads a configuration file .
1450	loadLabels loads repositories from a repository
1451	kill kills the repository
1452	create creates a new update
1453	classifyLabels takes a list of labels and turns it into a map .
1454	linkify returns the link to the given string .
1455	NewCache creates a new cache .
1456	KeyToPath returns the path to disk .
1457	ensureDir ensures that the directory exists .
1458	Put implements the Cache interface .
1459	Get implements the Cache interface .
1460	Delete removes a key from the cache .
1461	NewGCSArtifact creates a new GCSArtifact .
1462	Size returns the size of the artifact .
1463	ReadAll returns the contents of the artifact .
1464	ReadTail reads the contents of a GCSArtifact .
1465	Gzipped returns true if the artifact is gzipped .
1466	optionsForRepo returns the options for a repository .
1467	List lists all Prow jobs
1468	ProwJobs returns a new ProwJobLobs .
1469	List lists all Prow jobs
1470	RunAgainstAllBranch returns true if the branch has all branches .
1471	Intersects returns true if two branches are equal .
1472	ShouldRun implements the RegexpChange interface .
1473	RunAgainstChanges returns true if the given list matches the given changes .
1474	ShouldRun returns true if the given baseRef is running .
1475	ShouldRun returns true if the given baseRef has been run .
1476	ShouldRun returns true if the given baseRef is running .
1477	ShouldRun returns true if the given baseRef matches the given changes .
1478	GetPresubmit returns the presubmit for the given job .
1479	SetPresubmits sets the Presubmit field s value .
1480	SetPostsubmits sets the Postsubmits field s value .
1481	AllPresubmits all presubmits to the job config
1482	AllPostsubmits all postsubmits
1483	AllPeriodic returns all the periods in the job config .
1484	ClearCompiledRegexes clears the compiled Regexp .
1485	Empty returns true if the configuration is empty .
1486	NewClient creates a new client .
1487	ExpandAlias expands an alias to a set of strings .
1488	ExpandAliases is used to expand aliases .
1489	ParseFullConfig parses a full config .
1490	ParseSimpleConfig parses a simple config file .
1491	decodeOwnersMdConfig reads the metadata from the given file .
1492	findOwnersForFile returns the owner for the given file .
1493	FindApproversForFile returns all approvers for the given file .
1494	FindReviewersForFile returns all reviewers for a given file .
1495	FindLabelsForFile returns all labels for a given file .
1496	IsNoParentOwners returns true if the given path is no parent .
1497	Ratio returns the coverage of the coverage .
1498	FromPayloadEvent creates a PeriodicProwEvent from the payload .
1499	ToMessage implements the PublishProwEvent interface .
1500	UnmarshalText unmarshals the privacy settings .
1501	compileBlockades compiles the given blockades into a list of blocks .
1502	calculateBlocks returns the summary of blocks that have been blocked .
1503	MergeMultipleProfiles merges multiple profiles .
1504	AddFlags adds flags to the command line .
1505	processNextItem is used to process a job .
1506	handleErr is used to handle an error
1507	AggregateFilter returns a filter that can be used to filter results .
1508	FilterPresubmits a set of presubmits to the given filter .
1509	MakeCommand returns a cobra command .
1510	Push adds an event to the queue
1511	Pop removes an event from the heap .
1512	NewFakeOpenPluginWrapper creates a new FakeOpenPluginWrapperWrapper .
1513	ReceiveIssue is used to receive an issue
1514	Validate validates options .
1515	Complete completes the git repository
1516	Set sets the value of the org repository .
1517	ensure ensures that the given executable exists .
1518	output returns the output of the command .
1519	projects returns a list of projects
1520	selectProject selects the current user
1521	createCluster creates a cluster
1522	Create a new context
1523	contextConfig returns the client config
1524	selectContext selects the current context
1525	applyCreate runs a create command
1526	DetermineSkipPresubmit returns a list of PresubmitPresets that should be skipped .
1527	Dispatch dispatches events to the database .
1528	Create an issue
1529	CreateStatus creates a new repository .
1530	ForEachPr returns a list of prunes for a pull request .
1531	GetCollaborators returns a list of collaborators .
1532	GetCombinedStatus returns the combined status of a repository .
1533	GetIssues returns a list of issues .
1534	GetRepoLabels returns a list of labels for a repository .
1535	GetUser retrieves a user by login .
1536	checkConfigValidity checks if config is valid
1537	createSystemd log file
1538	createFullSystemdLogfile creates a full system log file .
1539	createSystemdLogFiles creates the systemd log files for systemd .
1540	prepareLogfiles creates a list of logfiles .
1541	writeSuccess marker file
1542	MakeCommand returns a cobra command .
1543	warnDeprecated warns if the last time is deprecated .
1544	Describe returns the description of the RequireMatchingLabel .
1545	TriggerFor returns the trigger for the given organization
1546	EnabledReposForPlugin returns a list of repositories for a given plugin
1547	EnabledReposForExternalPlugin returns a list of repositories for an external plugin
1548	SetDefaults sets the defaults for the config file .
1549	validate plugins
1550	ShouldReport reports whether the given ProwJob is reporting .
1551	Run runs the git repository .
1552	PathForRefs returns a path for the given refs .
1553	gitCtxForRefs returns a git context for the given refs .
1554	commandForBaseRef returns a list of commands for baseRefs
1555	gitTimestampEnvs returns a list of environment variables for the given timestamp .
1556	gitRevParse returns the git revision of git commit .
1557	commandForPullRefs returns a list of commits for a pull refs .
1558	ProduceCovList returns a list of CoverageList .
1559	popRandom removes random elements from set .
1560	resolve resolves the given kubernetes options .
1561	ProwJobClients returns a new instance of ProwJob .
1562	ProwJobClient returns a ProwJob .
1563	InitiateClusterClient returns the iubernetes client
1564	BuildClusterClients returns a map of BuildClients
1565	Age returns the age of the active state .
1566	ReceiveEvent implements the ActiveState interface .
1567	ReceiveEvent returns the state of the active state .
1568	Active returns true if all states are active .
1569	Age returns the minimum age of the given time .
1570	ReceiveEvent implements MultiState interface .
1571	ProwJobs returns a new ProwJobInformer .
1572	ItemToResourcesConfig converts an item into a ResourceConfig .
1573	Copy returns a copy of TypeToResources
1574	MakeCommand creates a new cobra command .
1575	incrementNumPendingJobs increments the number of pending jobs .
1576	setPreviousReportState sets the previous report state for the given ProwJob .
1577	SyncMetrics is used to sync metrics
1578	DumpProfile writes profiles to a writer .
1579	blocksEqual returns true if two profiles are equal .
1580	NewProwJobInformer returns a new instance of ProwJobInformer .
1581	NewFilteredProwJobInformer returns a new instance of FilterInformer .
1582	New creates a Spyglass instance
1583	Lenses returns a list of lens for a match cache
1584	JobPath returns the path to the job path .
1585	RunPath returns the path for the source .
1586	ExtraLinks returns a list of extra links for the source
1587	needDemux returns a list of plugins that have the given event type
1588	demuxExternal dispatches an external plugin to the server .
1589	dispatch sends a request to the server .
1590	AddFlags adds flags to the command plugin .
1591	CheckFlags checks the state of the state plugin .
1592	ReceiveIssueEvent is used to receive issue events .
1593	Load loads the configuration from the config file .
1594	loadConfig loads the config from the config file
1595	YamlToConfig converts a file to a job config .
1596	ReadFileMaybeGZIP reads a file from the given path .
1597	finalizeJobConfig initializes job config
1598	validateComponentConfig validates component config
1599	ConfigPath returns the default config path
1600	ValidateController validates controller .
1601	defaultJobBase sets the default JobBase field s value .
1602	SetPresubmitRegexes sets the regexes for the given presets .
1603	setBrancheres sets the branches of the branch .
1604	SetPostsubmitRegexes sets the postsubmit regexes
1605	Body returns the body of the image
1606	NewBoskosHandler creates a new http handler for the given r .
1607	ErrorToStatus converts an error to a status code .
1608	DumpProfile writes a profile to a file .
1609	LoadProfile loads a profile from the given origin .
1610	NewClient returns a new client .
1611	SetCredentials sets the credentials for the client
1612	Checkout commits a commit to the repository
1613	Check new branch
1614	Merge merges a commit .
1615	CheckoutPullRequest commits a pull request .
1616	Config adds a config to the repo
1617	retryCmd attempts to retry the given command .
1618	LabelsAndAnnotationsForSpec returns a map of labels for the given spec .
1619	ProwJobToPod converts a ProwJob into a pod
1620	CloneLogPath returns the path to the log file .
1621	cloneEnv returns a list of environment variables
1622	sshVolume returns a volume for the given secret
1623	InjectEntrypoint adds an entrypoint to the container
1624	PlaceEntrypoint creates a container for the given image
1625	kubeEnv returns a slice of kube environment variables .
1626	Client returns a new Kubernetes client
1627	handle handles a github event
1628	SendHook sends a hook to the given address .
1629	 janitor clean up the janitor
1630	 janitor .
1631	Run starts the pull server .
1632	specToStarted builds a GCS job from a job spec
1633	Run runs the command .
1634	hasPRChanged returns true if the pull request was changed .
1635	UpdateIssues updates all issues in the database .
1636	handleReviewEvent handles a review event .
1637	findAssociatedIssue finds the issue associated with an issue .
1638	optionsForRepo returns the options for a repository .
1639	localMainMain serves the main entry for the main server
1640	summary summarizes the coverage list .
1641	Subset returns a new CoverageList .
1642	ListDirectories returns a list of directories in the group .
1643	readRequest reads a request from an io . Reader .
1644	handle handles the request
1645	writeResponse writes the given admission request to w .
1646	onlyUpdateStatus returns the admission status for the given admission request .
1647	convertSuiteMeta converts a suite metadata into a suite .
1648	NewHealth creates a new health monitor
1649	ServeReady is used to serve the health monitor
1650	NewController creates a new controller .
1651	newExpectedContext returns a new context with the given context .
1652	contextToStrings converts contexts to strings .
1653	filterSubpools returns a map of subpools .
1654	filterSubpool is used to filter a subpool
1655	poolPRMap returns a map of pull requests from a subpool .
1656	failedContexts returns a list of contexts that are expected to be returned .
1657	auge accumulates a list of pull requests .
1658	try merge function
1659	prChanges returns a list of changed files .
1660	prune removes all changed changes .
1661	dividePool creates a subpool for a pull request
1662	AggregateProfiles returns a list of profiles .
1663	countToBoolean returns the number of profiles in the profile .
1664	NewStorage creates a new Storage .
1665	AddResource adds a resource to the storage .
1666	DeleteResource deletes a resource
1667	UpdateResource updates a resource
1668	GetResource retrieves a resource by name .
1669	GetResources returns a list of resources .
1670	SyncResources updates all resources in the storage
1671	ParseConfig parses a config file .
1672	errorsInFilesInFiles returns a list of problems in a file .
1673	NewPodLogArtifact creates a pod log artifact .
1674	CanicalLink returns the canonical link to a PodLog artifact .
1675	ReadAt implements the PodLogArtifact interface .
1676	ReadAll returns all the logs in the pod log .
1677	ReadAtMost reads the specified number of bytes from the PodLogArtifact .
1678	ReadTail returns the tail of the pod log
1679	newProblems creates a new list of problems for the given review comment .
1680	problemsInFiles returns a list of problems in a file .
1681	undoPreset undo a preset
1682	undoPresubmitPresets undo a preset
1683	yamlBytesStripStrip strips all non - empty strings from yaml .
1684	monitorDiskAndEvict is a helper function that monitors the given disk .
1685	difference returns the difference between two repositories .
1686	union returns a new orgRepoConfig instance
1687	clearStaleComments deletes stale comments .
1688	DetermineReleaseNoteLabel returns the release note label .
1689	getReleaseNote returns the release notes from the body .
1690	NewClient creates a new client
1691	Acquire acquires a resource
1692	ReleaseOne releases a resource
1693	UpdateAll updates the current state
1694	GetGitHubClient returns a GitHub client .
1695	GetUsername returns the user s username
1696	CreateTokenHandler creates a new token handler .
1697	Create token handlers
1698	String returns a string representation of the job .
1699	TerminatePresubmitPreserveJobs terminates a list of jobs .
1700	PushMetrics pushes metrics to metrics
1701	RateLimiter returns a RateLimitingQueue with the given controller name .
1702	checkExistingStatus returns the status of the git repository .
1703	checkExistingLabels returns true if any of the issue labels exist .
1704	handle processes a pull request
1705	MarkdownSHALList renders a list of commits .
1706	PathForSpec returns the path for a job spec .
1707	AliasForSpec returns the alias for a job spec .
1708	RootForSpec returns the root path for the given job spec .
1709	NewSingleDefaultRepoPathBuilder creates a new repo path builder .
1710	NewExplicitRepoPathBuilder creates a new repository path builder .
1711	RegisterSourceOrDie registers a new IssueSource .
1712	CreateAndSync creates a new IssueCreator
1713	loadCache loads the cache .
1714	setIntersect sets the intersection of two strings
1715	sync synchronizes the issue .
1716	GetAWSCredentials retrieves the credentials from the resource .
1717	Stops a goroutine .
1718	newPipelineConfig returns a new pipeline config
1719	KubeClient returns the kubernetes client
1720	ProwJobClient returns the Prow job client
1721	resolveSymLink resolves a symbolic link to the given bucket .
1722	readJSON reads a JSON object from a bucket .
1723	listSubDirs returns all sub directories in the bucket .
1724	listAll returns all the keys in the bucket .
1725	listBuildIDs returns the list of build IDs for the given root .
1726	FilterProfilePaths returns a list of profiles matching the given paths .
1727	LoadSecrets loads secrets from the given paths .
1728	LoadSingleSecret loads a single secret .
1729	Set sets the boolean value .
1730	NewOpener creates a new instance of Storage .
1731	IsNotExist returns true if an error occurred .
1732	LogClose closes the io . io . io . io
1733	Writer returns an io . Writer for the given path .
1734	InitGitHubConfig initializes GitOAuthConfig
1735	Determines the delta of the coverage change .
1736	makeTable returns a table containing the coverage of the coverage .
1737	ContentForGitHubPost returns the content for the given job .
1738	AddFlags adds flags to the command line
1739	CheckFlags checks if the client is valid .
1740	getGitHub returns the GitHub client
1741	limitAndWaitAndWait waits for a token and waits for it to wait until it is reached .
1742	FetchIssues fetches a list of issues .
1743	hasID returns true if the given ID matches the given ID .
1744	FetchIssueEvents fetches issue events for a given issue ID .
1745	isPRChanged returns true if the pull request was changed .
1746	NewFetcher returns a new Fetcher .
1747	fetch recent issues
1748	fetchRecentEventsAndComments fetches all recent events and comments from the database .
1749	Fetch fetches all recent issues .
1750	Issues returns a list of issues .
1751	Title returns the name of the FlakyJob .
1752	Labels returns a list of all the tests .
1753	ReadHTTP reads a URL from a URL .
1754	String returns a string representation of the log .
1755	NewJobSpec returns a new JobSpec .
1756	ResolveSpecFromEnv returns a JobSpec from the environment variable .
1757	EnvForSpec returns the environment variables for a job spec .
1758	EnvForType returns the environment variables for the given job type .
1759	getRevisionFromRef returns the revision from refs
1760	GetRevisionFromSpec returns the revision from the spec
1761	helpProvider returns the plugin help .
1762	load reads from the io . Reader .
1763	loadPaths loads paths from an io . Reader .
1764	Match returns true if the given path matches the given path .
1765	CreateDatabase creates a new InfluxDB .
1766	mergeTags merges the default tags
1767	TagsToWhere returns a string representation of the query .
1768	Push adds a point to the database .
1769	create a pod log artifact
1770	serve starts the prometheus server
1771	collect collects metrics from the controller
1772	makeRequest creates a new branch protection request .
1773	makeReviews creates a new ReviewRequestReviews .
1774	Header returns the header of the image .
1775	Callback calls the callback function for the given resource
1776	logLinesAll returns all log lines for the given artifact .
1777	executeTemplate executes a template for a resource directory .
1778	DeepCopyObject is an autogenerated deepcopy function copying the receiver creating a new ResourceObject .
1779	FromItem converts an item into a ResourceObject .
1780	SetItems sets the Items field s value .
1781	DeepCopyObject is an autogenerated deepcopy function copying the receiver creating a new ResourceCollection .
1782	useContext uses the context to use for use in the context
1783	currentContext returns the current context
1784	command returns a copy of the command
1785	describeCluster returns information about the cluster
1786	Set adds a string to the slice .
1787	parseXML parses the contents of a GCS directory .
1788	Render renders gcs directory
1789	Render renders a record
1790	Render renders the icon
1791	Printf logs a message .
1792	NewClient creates a new client .
1793	SetReview sets a review .
1794	GetBranchRevision returns the revision of a branch .
1795	queryAllChanges returns a list of changes for all projects .
1796	NewTypeFilterWrapper creates a new TypeFilterWrapper plugin
1797	AddFlags adds the flags for the type filter .
1798	CheckFlags checks if the type is valid .
1799	AddFlags adds flags to the Kubernetes client .
1800	Validate validates the KubernetesClientOptions .
1801	Client returns an instance of ClientInterface
1802	newCRDClient creates a new CRD client .
1803	createRESTConfig creates a REST config from kubeconfig .
1804	registerResource registers a new resource definition
1805	newDummyClient creates a new dummy client .
1806	Update updates an object .
1807	TrustedPullRequest checks if an issue is trusted .
1808	buildAll builds all files in the repository
1809	Run runs the provided options .
1810	AddConfig adds a config to the storage .
1811	DeleteConfig deletes a config .
1812	UpdateConfig updates the configuration
1813	GetConfig returns the configuration for the given name .
1814	GetConfigs returns a list of configs
1815	SyncConfigs updates all configs in the storage
1816	addKnownTypes adds known types to the schema .
1817	NewController returns a new Controller .
1818	Run implements the Controller interface .
1819	addBlockingPresubmit adds a new presubmit to the list of presubmiters .
1820	removeBlockingPresubmits removes all presubmits from the old config .
1821	MigratedBlockingPresub mocks base method
1822	Load loads the options from the given loader .
1823	canExecuteConcurrently returns true if the given ProwJob is concurrent .
1824	getJenkinsJobs builds a list of Jenkins jobs from a list of Jenkins jobs .
1825	cleanupDupes removes duplicates from a list of jobs .
1826	Throttle allows throttled requests to throttled requests .
1827	NewClientWithFields creates a new client with the given fields .
1828	NewClient creates a new client .
1829	NewDryRunClient creates a new DryRunClient
1830	NewFakeClient creates a new client
1831	request sends a request to the server
1832	requestRaw sends a raw request to the server
1833	getUserData gets the user s user data
1834	readPaginatedResultsWithValues retrieves all the results from a given path .
1835	UpdatePullRequest updates a pull request .
1836	GetLabels returns a list of labels for a given path .
1837	stateCannotBeanOrOriginalError returns an error if the error occurred .
1838	IsMergeable returns true if the given SHA is merged .
1839	Token returns an OAuth2 Token .
1840	ListArtifacts returns a list of artifact names .
1841	KeyToJob returns the job name for a job .
1842	rowToGCS returns the URL for the given key .
1843	FetchArtifacts fetches artifacts from a source file .
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImage .
1854	Upload uploads an invocation to the server .
1855	ApplyDefault applies the defaults to the given DecorationConfig .
1856	Validate validates the DecorationConfig .
1857	ApplyDefault applies default values to u .
1858	ApplyDefault applies default configuration to GCSConfiguration .
1859	Validate validates the GCS configuration .
1860	ClusterAlias returns the cluster alias
1861	NewResource creates a new resource .
1862	NewResourcesFromConfig returns a slice of resources from config .
1863	UserDataFromMap creates a UserData from a map
1864	Set sets the comma separated string .
1865	UnmarshalJSON deserializes a UserData from JSON .
1866	Extract extracts the data from the given id .
1867	Set sets the user s value .
1868	Update updates the user data
1869	ToMap converts user data to a map
1870	FromMap creates a new UserData from a map
1871	ItemToResource converts an item into a Resource .
1872	Run runs the given options .
1873	addSSHKeys adds SSH keys to the given paths .
1874	Issues returns a list of issues for the given project .
1875	loadCluster loads the cluster data from a JSON file .
1876	parseTriageData parses the triage data .
1877	topClusters returns a slice of clusters .
1878	topJobsFailedFailed returns a slice of jobsFailed .
1879	Title returns the title of the cluster .
1880	Labels returns the names of the cluster .
1881	New returns a new Cron
1882	QueuedJobs returns a list of queued jobs .
1883	HasJob returns true if the job has a job .
1884	addJob adds a job to the scheduler
1885	removeJob removes a job from the scheduler
1886	UpdateComments updates the comments for an issue .
1887	GatherProwJobMetrics returns the metrics for each job .
1888	OptionOrDefault returns the default value for the given option .
1889	newGCSJobSource creates a new GCSJobSource .
1890	artifacts returns a list of artifacts for the given key .
1891	canonicalLink returns the canonical link for a job .
1892	jobPath returns the full path of the job .
1893	TargetURL returns the target URL for a pull request .
1894	newBuildConfig returns a new BuildConfig
1895	NewClient creates a new GitHub client .
1896	retry attempts to retry an error
1897	depaginate performs a depaginate request .
1898	NewHelpAgent returns a new HelpAgent instance
1899	GeneratePluginHelp generates plugin help .
1900	getPullCommitHash returns the git commit hash of a pull commit .
1901	listJobBuilds returns a list of jobs for a given bucket .
1902	getPRBuildData returns a list of build data for the given jobs .
1903	getGCSDirsForPr returns a map of paths for the given repository .
1904	deleteFromDisk deletes the image from disk
1905	doNetworksCreate creates a new network
1906	networkLoadByName loads a network by name .
1907	Transaction executes a transaction .
1908	ForLocalInspectionWithPreparedStmt returns a Cluster with prepared statements .
1909	SetDefaultTimeout sets the default timeout
1910	Transaction executes a transaction .
1911	EnterExclusive implements Cluster .
1912	ExitExclusive terminates the cluster .
1913	Close closes the cluster .
1914	TxCommit commits a transaction .
1915	ParseRemote parses a remote config string .
1916	GetContainerServer returns a container server server .
1917	GetImageServer returns the image server by name .
1918	initAppArmor initializes AppArmor .
1919	appArmorCanStack returns true if the app can be loaded .
1920	containerDeviceAdd adds a device to the container
1921	profileDeviceAdd adds a device to the container
1922	ensureImageAliases creates a new image aliases .
1923	GetExistingAliases returns an array of image aliases that match the given aliases .
1924	String returns a string representation of the status code .
1925	ImagesGetExpired returns a list of images that have been expired .
1926	ImageSourceInsert inserts a new image source
1927	ImageSourceGet returns the image source
1928	ImageExists returns true if the image exists .
1929	ImageGet returns the image for the given project .
1930	ImageGetFromAnyProject returns the image with the given fingerprint .
1931	imageFill fills the image with the given image .
1932	ImageLocate returns the address of the image .
1933	ImageAssociateNode associates a node with the given fingerprint .
1934	Delete delete image
1935	ImageAliasesGet returns a list of images for a project .
1936	ImageAliasGet returns the image alias for the given project .
1937	ImageAliasRename renames an image .
1938	ImageAliasDelete deletes image alias
1939	ImageAliasesMove mocks base method
1940	ImageAliasAdd adds a new image alias to the cluster .
1941	ImageAliasUpdate updates image alias .
1942	ImageLastAccessUpdate updates the last update time .
1943	ImageLastAccessInit initializes the cache for the given fingerprint
1944	ImageUpdate updates an image .
1945	ImageInsert inserts an image into the cluster .
1946	ImageGetPools returns a list of pool pools
1947	ImageGetPoolNamesFromIDs retrieves all pool names from the pool
1948	ImageUploadedAt updates the image at the given id .
1949	ImagesGetOnCurrentNode returns all images in the cluster
1950	ImagesGetByNodeID returns all images in the cluster
1951	ImageGetNodesWithImage returns all nodes with the given fingerprint
1952	ImageGetNodesWithoutImage returns all nodes with the given fingerprint .
1953	Add adds a function to the group .
1954	Start starts the group .
1955	zfsIsEnabled returns true if zfs is enabled .
1956	zfsToolVersionGet returns the version of zfsTool
1957	zfsModuleGet returns the zfs module version
1958	zfsPoolVolumeCreate creates a volume pool
1959	zfsPoolVolumeExists returns true if the given dataset exists .
1960	NetworkIDsNotPending returns a map of network IDs .
1961	NetworkConfigAdd adds a configuration to the cluster .
1962	NetworkNodeJoin adds a node to the cluster
1963	NetworkCreatePending creates a new network .
1964	NetworkCreated mocks base method
1965	NetworkErrored implements ClusterTx .
1966	NetworkGet returns a network .
1967	networkNodes returns all nodes in the cluster .
1968	NetworkGetInterface returns the network interface for the given interface .
1969	NetworkConfigGet returns the configuration for a network .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates a network .
1972	NetworkUpdateDescription updates a network description .
1973	NetworkConfigClear clears the network configuration .
1974	Delete a network
1975	NetworkRename renames a network
1976	GetContainers returns the list of containers
1977	GetContainersFull returns a list of containers full .
1978	GetContainer returns a container by name .
1979	CreateContainerFromBackup creates a new container from the server
1980	CreateContainer creates a new container
1981	CreateContainerFromImage creates a container from the given image server
1982	UpdateContainer updates a container
1983	Renames a container
1984	ExecContainer exec a container
1985	GetContainerFile retrieves the contents of a container .
1986	Create a container file
1987	DeleteContainerFile deletes a container file
1988	GetContainerSnapshotNames returns all the names of a container
1989	GetContainerSnapshots returns a list of container snapshots .
1990	Get container snapshot
1991	CreateContainerSnapshot creates a new container snapshot
1992	MigrateContainerSnapshot mocks base method
1993	UpdateContainerSnapshot updates a container snapshot
1994	GetContainerState returns the container state .
1995	UpdateContainerState updates a container state .
1996	GetContainerLogfiles returns the list of logfiles for a container .
1997	GetContainerLogfile returns a stream of container log file .
1998	GetContainerMetadata returns the image metadata for the given name .
1999	SetContainerMetadata mocks base method
2000	GetContainerTemplateFiles returns a list of files for a given container .
2001	CreateContainerTemplateFile creates a container template file .
2002	DeleteContainerTemplateFile deletes a container template file .
2003	ConsoleContainer sends a container .
2004	GetContainerConsoleLog returns an io . Reader for a container .
2005	DeleteContainerConsoleLog deletes a container .
2006	GetContainerBackups returns a list of container backups
2007	GetContainerBackup returns a container backup
2008	CreateContainerBackup creates a new container backup
2009	Renames a container
2010	DeleteContainerBackup deletes a container backup
2011	GetContainerBackupFile returns a backup file
2012	RsyncSend sends a rsync command to rsync
2013	patchNamesGetNames returns the names of patches .
2014	patchRenameCustomVolumeLVs creates a new volumeLVs with the given name .
2015	patchLvmNodeSpecificConfigKeys is used to patch the lvm node s storage config keys .
2016	GetHTTPClient returns the HTTP client
2017	do performs the HTTP request
2018	RawQuery performs a raw HTTP query .
2019	RawWebsocket returns a raw websocket connection .
2020	RawOperation mocks base method
2021	ProfileToAPI converts a profile to an API .
2022	Profiles returns a list of profiles .
2023	ProfileGet returns a profile by name .
2024	Profiles retrieves a list of profiles from the cluster .
2025	ProfileConfig returns the profile configuration for a given project .
2026	ProfileConfigClear removes profiles from the database .
2027	ProfileConfigAdd adds a profile to the database .
2028	ProfileContainersGet returns a list of containers for a given profile .
2029	ProfileCleanupLeft removes all profiles from the cluster .
2030	ProfilesConfig takes a list of profiles and returns a map of configs .
2031	ProfilesDevices expands a list of devices into a list of devices .
2032	GetServer returns the server s server .
2033	UpdateServer updates a server
2034	HasExtension returns true if the server has a given extension .
2035	GetServerResources returns the server resources .
2036	UseProject adds a project to the server
2037	SQLiteOpen opens a database connection .
2038	Rebalance balances the current state of the current cluster .
2039	Promote promotes the given nodes to the given node .
2040	Purge removes a node from the database
2041	List returns a list of cluster members
2042	Count returns the number of nodes in the cluster .
2043	Enabled returns true if the node is enabled .
2044	memberNodeStateStateForBootstrapNodeStateForBootstrap returns an error if the Raft node is not set .
2045	memberCheckClusterStateForBootstrapStateForBootstrapOrJoin returns an error if the cluster state is not set .
2046	memberCheckClusterStateForAccept returns an error if the cluster state is valid .
2047	memberCheckClusterStateForLeave returns an error if the node is empty .
2048	memberCheckNoLeftClusterCert returns an error if the directory is not present .
2049	ConfigLoad loads a config from the database .
2050	Replace replaces existing values with the given values .
2051	Patch applies a patch .
2052	HTAddress returns the HTTPS address for the given node .
2053	CertificatesGet returns all certificates in the cluster
2054	CertGet retrieves a certificate by fingerprint
2055	CertSave saves a certificate
2056	CertDelete deletes a certificate
2057	CertUpdate updates a certificate
2058	createDevLxdLxdLists creates a new socket .
2059	Servers returns a list of servers .
2060	Shutdown shuts down the server .
2061	aftNetworkTransport creates a new raft transport .
2062	configConfig returns a new raft configuration .
2063	aftMaybeBootstrap is used to bootstrap a raft cluster .
2064	CPURESource returns the current resources .
2065	MemoryResource returns a memory resource .
2066	GetOperationUUIDs returns a list of UUIDs
2067	GetOperations returns the list of operations .
2068	GetOperation returns the operation for the given UUID .
2069	GetOperationWebsocket returns a websocket connection
2070	tryMount attempts to mount a filesystem on the given filesystem .
2071	lxdUsesPool returns true if the given storage pool exists in the database
2072	ProjectURIs returns a list of URIs matching the given filter .
2073	ProjectList lists all projects in the cluster .
2074	ProjectGet returns a project by name .
2075	ProjectExists returns true if the cluster exists .
2076	ProjectCreate creates a new project .
2077	ProjectUsedByRef returns a map of projects used by a project
2078	ProjectRename renames a project .
2079	ProjectDelete deletes a project .
2080	PasswordCheck checks if secret is valid .
2081	LoadCert loads a certificate
2082	WriteCert writes a certificate to a directory .
2083	NewDaemon returns a new Daemon instance
2084	DefaultDaemon returns a new Daemon instance
2085	AllowProjectPermission allows permission to allow permission to be granted to a user .
2086	checkTrustedClient checks if the request is trusted
2087	Authenticate authenticates the HTTP request .
2088	State returns the state of the daemon .
2089	UnixSocket returns the Unix socket
2090	Stop stops the daemon .
2091	setupExternalAuthentication is used to setup external authentication
2092	initializeDbObject initializes the database .
2093	WriteJSON writes the body to w .
2094	EtagHash returns a hash of data .
2095	EtagCheck returns an error if the request is valid .
2096	HTTPClient returns a new http client .
2097	IsRecursionRequest returns true if the request is a recursion request .
2098	GetListeners returns a list of listeners for the given start .
2099	Internal method to handle SQL GET request
2100	internalSQLPost executes the internal SQL query .
2101	PublicKey returns the public key .
2102	PrivateKey returns the private key .
2103	Fingerprint returns the fingerprint of the certificate .
2104	GenerateCert generates a new certificate
2105	PrintServerInfo prints information about a container .
2106	LaunchContainers starts a container .
2107	CreateContainers creates a container .
2108	GetContainers returns a list of container containers .
2109	StartContainers starts a container .
2110	setQueryParam sets the query parameter .
2111	GetImages returns the list of images
2112	GetImageFile gets a private image file .
2113	GetImageSecret returns the image secret
2114	GetPrivateImage returns the private image for the given fingerprint .
2115	GetPrivateImageFile gets a private image file .
2116	GetImageAliases returns the list of image aliases
2117	tryCopyImage attempts to create a remote operation .
2118	CopyImage copies an image to the remote server .
2119	UpdateImage updates an image
2120	DeleteImage deletes an image
2121	RefreshImage refreshes the image
2122	CreateImageAlias creates a new image alias
2123	UpdateImageAlias updates an image alias .
2124	Renames an image alias
2125	DeleteImageAlias deletes an image alias
2126	Open opens a database .
2127	EnsureSchema creates a new database .
2128	FilesystemDetect returns the filesystem for the given path .
2129	Schema returns a new schema .
2130	updateFromV37 updates the configuration from the database .
2131	HardwareGetLocal returns the current machine .
2132	NewController creates a new controller
2133	CreateContainer creates a container
2134	DefinedContainer returns true if the container is defined .
2135	UpdateContainer updates a container
2136	Rename container
2137	DeleteContainer deletes a container .
2138	Add adds a new update to the schema .
2139	ensureSchemaTableExists ensures that the database exists .
2140	queryCurrentVersion returns the current version of the current version .
2141	ensureUpdatesAreApplied ensures that the updates are applied .
2142	checkSchemaVersionsHasNoHolesChecks checks if the given list is valid .
2143	checkAllUpdatesAreApplied checks if all updates are applied .
2144	formatSQL formats a SQL statement
2145	GetAllXattr returns all the xattr for the given path
2146	GetErrno returns the error of the given error .
2147	Uname returns a Utsname .
2148	RegisterStmt registers a SQL statement .
2149	PrepareStmts returns a map of prepared statements .
2150	NewGateway creates a new gateway .
2151	DialFunc returns a connection to the gateway .
2152	Shutdown shuts down the gateway .
2153	Sync syncs the server .
2154	Reset is used to reset the server .
2155	LeaderAddress returns the address of the leader .
2156	waitLeadership waits until the leader is reached .
2157	currentRaftNodes returns a list of the current Raft nodes .
2158	cacheRaftNodes returns a list of all the Raft nodes in the database .
2159	dqliteMemoryDial returns a connection to dqlite .
2160	DqliteLog writes a log level to the database .
2161	MetadataAsMap mocks base method
2162	MetadataAsOperation returns the metadata for the response .
2163	MetadataAsStringSlice returns a slice of strings .
2164	MetadataAsStruct unmarshals the response .
2165	Load reads a CSV report from the file .
2166	Write writes the CSV file to the file .
2167	AddRecord adds a record to the report
2168	LoadConfig loads a config file .
2169	SaveConfig writes the configuration to a file .
2170	Get implements ChrootLoader .
2171	ConfigPath returns the path to the path .
2172	ServerCertPath returns the path for a remote server
2173	NewConfig returns a new Config instance
2174	checkForPreDumpSupport checks if the migration is valid .
2175	preDumpLoop runs the preDump loop .
2176	newRoot returns a new cobra command
2177	API extensions count
2178	SelectURIs returns a list of uri from stmt .
2179	SelectStrings returns a slice of strings .
2180	scanSingleColumn scans a single column .
2181	LazyHandler returns a FuncHandler that can be used to create a function .
2182	Callers returns a slice of callers
2183	name returns the name of the call .
2184	TrimBelow implements the Trace interface .
2185	TrimAbove implements the Trace interface .
2186	TrimBelowName returns the trace with the given name .
2187	TrimAboveName removes the given name from the trace .
2188	TrimRuntime returns the trace of the trace
2189	GetCaps returns the contents of the given path .
2190	SetCaps sets the capabilities of a file .
2191	Read implements io . Reader .
2192	Supported returns true if quota is supported .
2193	GetProject returns the quota for a given path .
2194	SetProject sets the quota for a project .
2195	DeleteProject deletes a project .
2196	GetProjectUsage returns the quota usage of a quota .
2197	SetProjectQuota sets quota quota
2198	backupLoadByName returns a backup by name .
2199	createCreate creates a new container backup .
2200	Rename renames a backup .
2201	Delete deletes the backup .
2202	FixStoragePool fix storage pool
2203	Count returns the number of rows in the table .
2204	CountAll returns a map of all tables .
2205	InitTLSConfig initializes TLS configuration .
2206	copyContainerThinPool copies the contents of a container into a container .
2207	copyContainerLV copies the given container to the given source .
2208	copyContainer copies the container to the container .
2209	copyVolume copies the volume to the specified pool .
2210	GetPrivateImage returns the image for the given fingerprint
2211	GetPrivateImageFile gets a private image file
2212	GetImageAliasNames returns the names of the image aliases .
2213	ProvRecv reads a message from the websocket .
2214	ProtoSend sends a message to websocket .
2215	ProtoSendControl sends a migration control message .
2216	Read implements the stdin interface .
2217	doContainersGetFromNode returns a list of containers in the cluster
2218	Retry attempts to retry an error
2219	IsRetriableError returns true if the given error is retryable .
2220	AppArmorProfile returns the application profile .
2221	StoragePoolVolumeCreate creates a storage pool
2222	ContainerStorageReady returns true if the container is ready to be ready for storage .
2223	ContainerCreateFromImage creates a container from the storage .
2224	ContainerSnapshotRenameRename renames a new container
2225	ContainerSnapshotCreateEmpty creates a container snapshot
2226	btrfsSubVolumesDelete deletes the given subvolumes
2227	isBtrfsSubvolfs returns true if the subvolfs path is btrfs .
2228	SelectConfig reads a configuration from a table .
2229	UpdateConfig updates config values .
2230	deleteConfig deletes a config from a table
2231	FormatSection formats a section into a string .
2232	GetProjects returns a list of projects
2233	GetProject returns a project by name
2234	CreateProject creates a new project
2235	UpdateProject updates a project
2236	RenameProject renames a project
2237	Read implements io . Reader
2238	Write implements io . Writer interface .
2239	NewCanceler creates a new Canceler
2240	Cancelable returns true if the request is canceled .
2241	Cancel cancels the request .
2242	CancelableDownload attempts to cancel a request .
2243	nodeGet returns a response from the cluster
2244	clusterMemberConfig returns a list of cluster members
2245	ClusterDisable disable a cluster
2246	tryClusterRebal returns the cluster rebalance
2247	internalClusterPostRebal creates a new Raft node .
2248	internal_ClusterPostPromote is a helper function that is used to promote a Raft node .
2249	Filters returns a list of filters for the given entity .
2250	Parse parses a struct .
2251	findStruct finds a struct with the given name .
2252	parseStruct parses a struct .
2253	Get profile names
2254	GetProfiles returns a list of profiles
2255	GetProfile returns a profile by name .
2256	CreateProfile creates a new profile
2257	UpdateProfile updates a profile .
2258	Renames a profile
2259	Load loads a map from the given schema .
2260	Dump returns a map of values .
2261	GetRaw returns the value of the given name .
2262	GetString returns the value as a string .
2263	GetBool returns true if the given name exists .
2264	GetInt64 returns the value of an int64 .
2265	update updates the values of the map
2266	set sets a value in the map
2267	HasSchemaTableExist returns true if the table exists .
2268	selectSchemaVersions fetches the schema versions from the database .
2269	selectTablesSQL returns a list of SQLite tables from the database .
2270	createSchemaTable creates a new schema table .
2271	insertSchemaVersion inserts a new version .
2272	NewState returns a new State
2273	containerLXCUnload removes the container LXCXC .
2274	containerLXCXCInstantiate a new containerLXCXCX .
2275	initStorage initializes the storage pool
2276	OnNetworkUp is called when a device is up .
2277	setupHostVethDevice sets the hostVeth device
2278	getLxcState returns the state of the container .
2279	StorageStartSensitive returns true if the container is sensitive .
2280	deviceExistsInDevices returns true if the given path exists in the container
2281	createDiskDevice creates a disk device .
2282	setNetworkRoutes sets the network routes
2283	Path returns the path of the container .
2284	MaasInterfaces returns a list of interfaces for the container .
2285	getSystemHandler returns the system handler for the given syslog
2286	findNvidiaMinor finds the minor minor version of the pci .
2287	GetLogger returns a logger .
2288	SetLogger sets the logger .
2289	WaitRecord returns the given log record .
2290	AddContext adds a context to the logger .
2291	NewDottedVersion creates a new DottedVersion from a string .
2292	Parse parses a string into a DottedVersion .
2293	String returns a string representation of the Dotted version .
2294	Compare implements the DottedVersion interface .
2295	projectDefaultProfile creates a new profile .
2296	projectChange is used to update a project
2297	projectEmpty returns true if the project is empty
2298	Get certificate fingerprints
2299	GetCertificates returns a list of certificates
2300	GetCertificate returns the certificate for the given fingerprint .
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates a certificate
2303	DeleteCertificate deletes a certificate
2304	containerMetadataGet returns the template metadata for a container
2305	ContainerMetadataPostTemplatesPostTemplatesPostPplatesPostFormats a template for a container .
2306	containerMetadataDeleteTemplatesDelete deletes a container template
2307	getContainerTemplatePath returns the path for a container .
2308	Error returns the error message .
2309	Error returns the error message .
2310	add adds an error to the list
2311	UpdateSchema updates the schema .
2312	doProfileUpdateCluster updates the profile in the cluster
2313	doProfileUpdateContainer updates a container .
2314	getProfileContainersInfo returns a list of container containers .
2315	GetNetworkNames returns the names of the network .
2316	GetNetworks returns a list of network networks
2317	GetNetwork returns a network by name
2318	GetNetworkLeases returns a list of network leases for a given name .
2319	GetNetworkState returns the network state
2320	CreateNetwork creates a new network .
2321	UpdateNetwork updates a network .
2322	RenameNetwork renames a network .
2323	Open opens a database connection .
2324	URLEn encodes a path into a URL .
2325	IsUnixSocket returns true if path is a Unix socket .
2326	HostPath returns the host path .
2327	FileMove moves a file to a new path
2328	DirCopy is the same as DirCopy function .
2329	StringMapMapHasString returns true if the map contains a string key .
2330	TextEditor creates a text editor with the given content .
2331	WriteTempFile writes a string to a temporary file .
2332	RenderTemplate renders a template
2333	Every returns a schedule with the given interval .
2334	StoragePoolMount mocks base method
2335	Dump dumps the given schema .
2336	dumpTable dump table
2337	ProjectHasProfiles returns true if the given name exists .
2338	ProjectNames returns the names of the cluster .
2339	ProjectMap returns a map of project IDs .
2340	ProjectHasImages returns true if the project has images .
2341	ProjectUpdate updates a project .
2342	GetCluster returns the cluster
2343	UpdateCluster updates the cluster
2344	GetClusterMemberNames returns list of cluster members
2345	GetClusterMembers returns cluster members
2346	GetClusterMember returns the cluster member
2347	RenameClusterMember creates a new cluster member
2348	Disconnect closes the event listener .
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if the certificate is valid .
2351	Generates client certificate
2352	LoadModule loads a module
2353	Parse parses a package .
2354	PprofAddress returns the pprof address of pprof
2355	PprofUpdateAddress updates the given address .
2356	NewMethod returns a new Method
2357	Generate generates a new method .
2358	fillSliceReferenceField fills the reference field for the given field .
2359	StoragePoolID returns the storage pool ID for the given name .
2360	StoragePoolIDsNotPending returns a map of storage pools .
2361	StoragePoolNodeJoin adds a node to the cluster
2362	StoragePoolNodeJoinNodeJoin is part of the cluster .
2363	StoragePoolConfigAdd adds a configuration to the cluster
2364	StoragePoolCreatePending creates a new storage pool .
2365	StoragePoolCreated mocks base method
2366	StoragePoolErrored returns the state of the given storage pool .
2367	StoragePoolNodeConfigs returns a list of storage nodes for the given poolID .
2368	StoragePoolsGetDrivers retrieves the list of driver pools
2369	StoragePoolGetID retrieves a storage pool by name .
2370	StoragePoolGet returns the storage pool
2371	storagePoolNodes returns a list of nodes in the cluster .
2372	StoragePoolConfigGet returns the configuration for a storage pool .
2373	StoragePoolCreate creates a new storage pool .
2374	storagePoolConfigAdd adds a configuration to the database .
2375	StoragePoolUpdate updates a storage pool .
2376	StoragePoolConfigClear clears a storage pool .
2377	StoragePoolDelete deletes a storage pool
2378	StoragePoolVolumesGetNames retrieves all the names of the given pool .
2379	StoragePoolVolumes retrieves all storage volumes for a given pool .
2380	StoragePoolNodeVolumes returns a list of storage volumes for a given pool .
2381	storagePoolVolumesGet returns all storage volumes for a given pool .
2382	StoragePoolVolumesGetType returns a list of storage volumes for a given node .
2383	StoragePoolVolumeSnapshotsGet returns a list of snapshots for a given volume .
2384	StoragePoolNodeVolumesGetType returns a list of storage volumes for a given pool .
2385	StoragePoolVolumeGetType returns the storage volume for the given pool .
2386	StoragePoolNodeGetType returns the storage volume for a given volume .
2387	StoragePoolNodeGetTypeByProjectType returns the storage volume for the given project .
2388	StoragePoolVolumeUpdate updates a storage pool
2389	StoragePoolVolumeDelete deletes a storage pool .
2390	StoragePoolVolumeRename deletes a storage pool .
2391	storagePoolVolumeReplicateIfCeph is a helper function for creating a volume pool .
2392	StoragePoolVolumeCreate creates a new storage pool
2393	StoragePoolVolumeGetType gets the type of a storage pool
2394	StoragePoolNodeTypeGetTypeID returns the storage type of a storage pool .
2395	StoragePoolVolumeTypeToName returns the name of the storage pool .
2396	DevicesAdd adds a new device to the database .
2397	Devices returns a list of devices .
2398	Patches returns a list of patches in the database .
2399	PatchesMarkApplied adds a patch to the database .
2400	EntityType returns the type of the entity .
2401	EntityPost returns the post form for the given entity .
2402	stmtCodeVar returns a string representation of a statement .
2403	destFunc returns a string representation of a slice .
2404	CompareConfigs compares two configs
2405	CopyConfig returns a copy of the configuration
2406	NewNotifier creates a new Notifier .
2407	Events returns a function that updates events for the given endpoint .
2408	eventsConnect connects to the Lxd server
2409	StoragePoolInit initializes storage pool
2410	getAAProfileContent returns the SAM profile content
2411	AALoadProfile is used to create a new apparmor profile
2412	AADestroy removes the container from the container .
2413	AParseProfileProfile is part of the container .
2414	getSystemHandler returns the system handler for the system .
2415	NotifyUpgradeCompleted creates a new instance of UpgradeCompleted .
2416	KeepUpdated ensures that the state is updated .
2417	MaybeUpdate is used to update the node state .
2418	NewServer creates a new server
2419	StartStatusCheck starts the server .
2420	SyncProjects synchronously sync resources
2421	AddProject adds a project to the server .
2422	DeleteProject deletes a project
2423	RenameProject renames a project .
2424	IsAdmin returns true if the user is admin .
2425	HasPermission returns true if the user has permission .
2426	rsyncSend sends rsync command to rsync
2427	rsyncSendSetupSetup creates a new exec command .
2428	tlsClientConfig returns the TLS client configuration .
2429	tlsCheckCert checks if the request is valid .
2430	internalClusterContainerMovedPost mocks base method
2431	containerPostCreateContainerMountPoint creates a container mount point for a container
2432	Contains returns true if the given device contains the given device .
2433	Update updates the list of devices
2434	DeviceNames returns the names of the devices .
2435	Infof logs a message .
2436	Debugf logs a message .
2437	Warnf logs a message .
2438	Errorf logs an error message .
2439	Critf logs a message .
2440	eventForward forwards an event to the log
2441	StorageProgressReader returns an io . Reader for the given operation .
2442	StorageProgressWriter creates a new writer for the given operation .
2443	GetLSBRelease returns the version of the OSB release
2444	Reset the package
2445	Append appends a snippet to a file .
2446	ContainerToArgs converts a Container to a ContainerArgs .
2447	ContainerNames returns a list of containers .
2448	ContainerNodeAddress returns the address of a container .
2449	ContainersListByNodeAddress returns a list of containers in the cluster .
2450	ContainerListExpanded returns a list of containers expanded by the cluster .
2451	ContainersByNodeName returns a map of containers by project name .
2452	SnapshotIDsAndNames returns a map of snapshot IDs .
2453	ContainerNodeList returns a list of container nodes .
2454	ContainerNodeProjectList returns a list of containers in the cluster .
2455	ContainerRemove removes a container from the cluster .
2456	ContainerProjectAndName returns the name of a container .
2457	ContainerConfigClear clears the container config .
2458	ContainerConfigGet returns the value of a container config .
2459	ContainerConfigRemove removes a container from the database .
2460	ContainerStateful sets the stateful stateful stateful stateful
2461	ContainerProfilesInsert inserts the profiles into the container .
2462	Container profiles .
2463	ContainerConfig returns the configuration for a container .
2464	ContainerSetState sets the state of a container .
2465	ContainerUpdate updates a container .
2466	ContainerLastUseUpdate updates the last updated time .
2467	ContainerGetSnapshots returns a list of containers for a given name .
2468	ContainerGetSnapshotsFull returns a list of container snapshots .
2469	ContainerNextSnapshot returns the number of snapshots in the cluster .
2470	ContainerPool returns the name of the storage pool .
2471	ContainerGetBackup returns a container backup
2472	ContainerGetBackups returns a list of containers for a given project .
2473	ContainerBackup creates a new container backup
2474	ContainerBackupRemove removes a container from the cluster .
2475	ContainerBackupRenameRename renames a container .
2476	ContainerBackupsGetExpired returns a list of containers that are expired .
2477	DefaultOS returns a new OS .
2478	Init initializes the system .
2479	GetWbsocket returns a websocket connection .
2480	Refresh refreshes the operation .
2481	CancelTarget cancels the target operation .
2482	GetTarget returns the target operation .
2483	upup initializes the endpoint .
2484	Down closes the endpoint .
2485	ServeHTTP is used to serve HTTP requests .
2486	closeListener closes the listener .
2487	ActivateListeners returns a map of registered listeners .
2488	CandidServer returns the candid server
2489	RACServer returns the RBAC server configuration .
2490	Auto update interval
2491	MAASController returns the MAAS controller
2492	OfflineThreshold returns the offline threshold
2493	ConfigGetString retrieves a string from a cluster
2494	ConfigGetBool returns the value of a given key .
2495	ConfigGetInt64 returns the value of a given key .
2496	ClusterAddress returns the address of the endpoint
2497	Debug logs a message .
2498	RestServer creates a REST server .
2499	projectParam returns the project name from the request .
2500	queryParam returns the query parameter from the request .
2501	newDb creates a new cobra command
2502	Description returns the description of the operation type .
2503	Permission returns the permission for the operation .
2504	OperationUUIDs returns a list of operation UUIDs
2505	OperationNodes returns all nodes in the cluster .
2506	OperationByUUID returns the operation by UUID .
2507	OperationAdd adds an operation to the cluster .
2508	OperationRemove removes an operation .
2509	Returns a list of operations .
2510	expireLogsTask returns a function that can be used to expire logs .
2511	absPath returns the absolute path of the given path .
2512	Keys returns a slice of keys .
2513	Defaults returns the default values .
2514	MustGetKey returns the key for the given name .
2515	assertKeyType asserts that the given key is valid .
2516	validate checks if the value is valid
2517	GetStoragePoolVolumes returns a list of storage volumes for a given pool
2518	GetStoragePool volume
2519	CreateStoragePoolVolume creates a storage volume
2520	Create storage pool snapshot
2521	GetStoragePoolSnapshotVolumeSnapshots returns a list of storage volumes for a given pool .
2522	Get storage pool snapshot
2523	UpdateStoragePoolVolumeSnapshot updates a storage pool
2524	MigrateStoragePoolVolume mocks base method
2525	MoveStoragePoolVolume mocks base method
2526	UpdateStoragePoolVolume updates a storage pool
2527	DeleteStoragePoolVolume deletes a storage pool
2528	RenameStoragePoolVolume creates a new storage pool
2529	doStoragePoolCreateInternal creates a storage pool .
2530	containerGetParentAndSnapshotName returns the name of the parent container .
2531	containerLoadFromAllProjects returns a list of containers from all projects .
2532	containerLoadNodeAll returns all container nodes in the cluster .
2533	containerLoadNodeProjectAll returns all containers in the given project .
2534	heartbeatNode attempts to heartbeat a raft node
2535	dotPrefixMatch returns true if the command matches the full prefix
2536	ContainerMount mocks base method
2537	ContainerStorageReady returns true if the given container is ready to be created .
2538	AskChoice asks the answer for the given choices .
2539	AskInt returns the number of ints .
2540	AskString asks the user for a given question
2541	AskPassword prompts the user s password .
2542	AskPasswordOnce prompts the user with the given question .
2543	Ask a question
2544	read answer from stdin
2545	profilePost posts a profile
2546	profileDelete deletes a profile
2547	IsRootDiskDevice returns true if the device is root disk .
2548	GetRootDiskDevice returns the root disk device .
2549	ForwardedResponse creates a new response with the given request .
2550	ForwardedResponseIfRemote returns the response if it is remote .
2551	ForwardedResponseIfContainerIsRemote returns the response if it is remote .
2552	ForwardedOperationResponse returns a response with the given operation .
2553	Done implements the ProgressRenderer interface .
2554	Update updates the progress bar
2555	Warn writes status to the progress bar
2556	UpdateProgress updates the progress bar .
2557	UpdateOp updates the progress bar
2558	updateFromV6 updates the storage pool .
2559	localCreateListener creates a listener for a given path .
2560	NewStmt returns a new Stmt instance .
2561	Generate generates a new statement .
2562	register registers a sql statement
2563	httpsLXD creates a new HTTPS server .
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address for the given id .
2566	RaftNodeFirst adds the first node to the node .
2567	RaftNodeAdd adds an address to the node .
2568	RaftNodeDelete deletes a RaftNode .
2569	RaftNodesReplace replaces the given list of nodes .
2570	initCGroup initializes CGroup
2571	sqliteDirectAccess runs a SQLite query .
2572	ContainerGet returns a container by name .
2573	ContainerID returns the id of the container
2574	ContainerExists returns true if the container exists .
2575	ContainsFields returns true if any of the fields of the Mapping .
2576	FieldByName returns field by name .
2577	FieldColumnName returns the column name for the given field name .
2578	FilterFieldByName returns field by name .
2579	ColumnFields returns a slice of field names .
2580	ScararFields returns a slice of field names .
2581	RefFields returns a slice of field names .
2582	Column returns the column name .
2583	ZeroValue returns the zero value for the field .
2584	FieldColumns returns the column columns .
2585	FieldArgs returns a string representation of a field .
2586	FieldParams returns a string representation of field names .
2587	FieldCriteria returns a string representation of a field .
2588	initDataClusterApply applies the config to the cluster
2589	JsonFormatEx returns a JSON format for JSON format .
2590	formatLogfmtValue formats a logfmt value .
2591	ResolveTarget resolves the given target name .
2592	Write implements io . Writer interface .
2593	updateNodeVersion updates the node version .
2594	selectNodesVersions selects all nodes in the database .
2595	GetArchitectures returns a list of architectures .
2596	RuntimeLiblxcVersionAtLeast returns true if the liblxc version is at least one of the current version .
2597	GetExecPath returns the path of the executable .
2598	Connect connects to the LXD server
2599	ConnectIfContainerIsRemote connects to a container .
2600	ConnectIfVolumeIsRemote connects a volume to a container
2601	SetupTrust creates a trust certificate .
2602	GetStoragePools returns the list of storage pools
2603	GetStoragePool returns the storage pool
2604	CreateStoragePool creates a storage pool
2605	UpdateStoragePool updates the storage pool
2606	DeleteStoragePool deletes a storage pool
2607	GetStoragePoolResources retrieves the storage pool for the given name .
2608	initDirs initializes the directories
2609	Config returns the configuration of the node .
2610	UpdateConfig updates the configuration .
2611	Config returns the configuration for the cluster .
2612	UpdateConfig updates the cluster configuration .
2613	storagePoolClusterClusterConfigForEtag returns the configuration for the given DB .
2614	GetEvents retrieves the events from the server .
2615	LogfmtFormat returns a formatted log format .
2616	StorageVolumeNodeAddresses returns the list of nodes for the given pool .
2617	StorageVolumeNodeGet returns the name of a storage volume .
2618	Storage volume config
2619	Storage volume description
2620	StorageVolumeIsAvailable returns true if storage volume is available .
2621	StorageVolumeDescriptionUpdate updates the given description .
2622	StorageVolumeConfigAdd creates a new storage volume config
2623	StorageVolumeConfigClear clears a storage volume config .
2624	storageVolumeIDsGet returns a list of all storage volumes for a given volume .
2625	StorageVolumeCleanupImages deletes the image pool .
2626	StorageVolumeMoveToLVMThinPoolNameKeyKeyKeyKeyKeyKeyKey is used to create a new storage volume pool .
2627	Lprintf implements the Writer interface .
2628	code returns the source code .
2629	Pretty prints a JSON string .
2630	NetworkPublicKey returns the public key .
2631	NetworkPrivateKey returns the private key .
2632	NetworkCert returns the certificate certificate
2633	NetworkAddress returns the address of the endpoint .
2634	NetworkUpdateAddress updates a network address .
2635	NetworkUpdateCert updates the given certificate
2636	networkCreateListener creates a listener for the given address
2637	Accept returns a net . Conn .
2638	Config sets the TLS configuration
2639	IsOffline returns true if the node is offline .
2640	NodeByAddress returns the node by address .
2641	NodePendingByAddress returns a node by address .
2642	NodeByName returns the node by name .
2643	NodeName returns the name of the node .
2644	NodeAddress returns the address of the cluster .
2645	NodeIsdated returns true if the cluster is outdated .
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename sets the name of a node .
2648	Node retrieves all nodes in the cluster .
2649	NodeAdd adds a node to the cluster .
2650	NodePending adds a node to the cluster .
2651	NodeUpdate updates a node .
2652	NodeRemove removes a node from the cluster .
2653	NodeHeartbeat sends a heartbeat to the cluster .
2654	NodeIsEmpty checks if a node is empty .
2655	NodeClear removes a node from the database .
2656	NodeOfflineThreshold returns the threshold for the cluster .
2657	NodeUpdateVersion updates the node with the given id .
2658	Transaction is part of a transaction .
2659	rollback is used to rollback a transaction .
2660	ProfileURIs returns a list of profiles for the given filter .
2661	ProfileGet returns a profile by name .
2662	ProfileExists returns true if the given profile exists .
2663	ProfileConfigRef returns a list of profile configs for a given profile filter .
2664	ProfileUsedByRef returns the profile used by the given filter .
2665	ProfileCreate creates a new profile .
2666	ProfileRename renames a profile .
2667	ProfileDelete deletes a profile .
2668	ServerTLSConfig creates a new TLS config .
2669	NetworkInterfaceAddress returns the IP address of the interface .
2670	IsAddressCovered returns true if two addresses are covered .
2671	SelectObjects selects objects from stmt .
2672	DeleteObject deletes an object .
2673	loop runs the task loop .
2674	IsTerminal returns true if the file is terminal .
2675	socketUnixListen listens for Unix sockets
2676	socketUnixRemoveStale removes the socket from the socket .
2677	socketUnixPermissions sets the Unix permissions for the given path
2678	socketUnixOwnershipSetOwnership sets the ownership of a socket .
2679	cephOSOSDPoolExists returns true if the given pool name exists .
2680	cephOSDPoolDestroy destroys the given pool
2681	cephRBDVolumeExists returns true if the given volume exists .
2682	cephRBDSNAPshotProtect returns a copy of the cluster .
2683	cephRBDCloneCreate creates a new cluster .
2684	cephRBDSnListCloneListCloneListClonesList returns the list of clones of the cluster .
2685	cephRBDVolumeMarkDeleted deletes the specified volume .
2686	cephRBDVolumeUnleted deletes the specified volume .
2687	cephRBDVolumeRename renames a volume .
2688	cephRBDVolumeSnapshotRenameRenameRenameRename renames a volume snapshot .
2689	cephRBDSnDelete deletes a volume from the cluster
2690	cephRBDVolumeCopy copies a volume from a cluster
2691	cephRBDVolumeListSnapshots returns a list of snapshots for a given volume .
2692	getRBDSize returns the size of the storage .
2693	getRBDFilesystem returns the volume of the volume
2694	copyWithoutSnapshotFullSnapshotFull copies the contents of a container .
2695	copyWithoutSnapshot creates a copy of the given container
2696	GetConfigCmd returns a cobra command
2697	SetConfigCmd sets the config command
2698	NewSharder returns a new Sharder .
2699	NewRouter creates a new router .
2700	re renew user credentials
2701	NewLocalClient creates a new local client .
2702	AddSpanToAnyExisting adds a new span to the current context .
2703	InstallJaegerTracerFromEnv creates a JaegerTracer from the environment variable .
2704	UnaryClientInterceptor returns a new UnaryClientInterceptor
2705	StreamClientInterceptor returns a new StreamClientInterceptor
2706	UnaryServerInterceptor returns a new UnaryServerInterceptor
2707	StreamServerInterceptor returns a StreamServerInterceptor
2708	CloseAndReportTraces closes the logger .
2709	newWriter creates a new Writer .
2710	For implements ConstantBackend .
2711	Log implements the logger .
2712	Format implements the Format interface .
2713	NewGRPCLogWriter creates a new GRPCLogWriter .
2714	Read reads a config file .
2715	Write writes the config to the file .
2716	Read implements io . Reader interface .
2717	Write implements io . Reader interface .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer starts a git hook server .
2720	newLoggingPipe creates a new logger .
2721	Read implements io . Reader .
2722	Write implements io . Writer .
2723	Accept accepts a connection and returns an error .
2724	Close closes the listener .
2725	errorf creates a new error error
2726	InitWithKube creates a new instance of ServiceEnv
2727	GetEtcdClient returns the etcd client
2728	GetKubeClient returns the kube client
2729	NewHasher returns a new Hash .
2730	HashJob returns the hash of a job .
2731	HashPipeline returns the hash of the given pipeline name .
2732	Status returns a list of workers
2733	Cancel cancels a job
2734	Conns returns a list of grpc client connections .
2735	Clients returns a list of clients
2736	NewClient creates a new client .
2737	RunFixedArgs returns a function that runs the fixed arguments .
2738	RunBoundedArgs returns a function that runs the given arguments .
2739	Run returns a function that runs the command .
2740	ErrorAndExit returns an error with the given format .
2741	ParseCommit parses a commit .
2742	ParseBranch parses a branch .
2743	ParseFile parses a file .
2744	Set sets the field s value .
2745	SetDocsUsage sets the documentation for the command .
2746	makeCronCommits creates a list of cron commits .
2747	Writer returns a writer for the given name .
2748	Reader implements io . Reader interface .
2749	Delete deletes an object from the service
2750	Walk implements the Trace interface .
2751	Exists checks if the given name exists .
2752	GetBlock returns a block with the given hash .
2753	Health implements the HealthServer interface .
2754	split returns the base path and base path
2755	ValidatePath validates a path .
2756	MatchDatum returns true if the input filter matches the given filter .
2757	NewCacheServer creates a new cache server .
2758	AuthorizePipelineOp is used to authorize a pipeline operation .
2759	sudo is a helper function for creating a superuser
2760	setPipelineDefaults sets the default values for the pipeline .
2761	incrementGCGeneration increments the GC generation .
2762	NewDebugServer creates a new debug server .
2763	Health returns the health of the cluster .
2764	newObjBlockAPIServer creates a new instance of the object .
2765	watchGC is used to watch the GC API .
2766	splitKey splits the key into a string
2767	NewWriter creates a new Writer .
2768	Write implements io . Writer interface .
2769	PrintRepoHeader prints the repository header .
2770	PrintRepoInfo prints information about a repository .
2771	PrintDetailedRepoInfo prints detailed information about the repository .
2772	PrintBranch prints the given branch info .
2773	PrintCommitInfo prints the commit info .
2774	PrintDetailedCommitInfo prints detailed information about a commit .
2775	PrintFileInfo prints information about a file .
2776	PrintDetailedFileInfo prints detailed information about a file .
2777	Add adds a string to a string .
2778	RetryNotify returns an error if the operation fails .
2779	Get implements the Merge interface .
2780	Delete deletes the cache
2781	PrintJobInfo prints job info .
2782	PrintPipelineInfo prints the pipeline info .
2783	PrintWorkerStatus prints the status of a worker .
2784	PrintDetailedJobInfo prints detailed information about a detailed job .
2785	PrintDetailedPipelineInfo prints detailed information about the given pipeline .
2786	PrintDatumInfo prints information about a datum .
2787	PrintDetailedDatumInfo prints detailed information about the given datum .
2788	PrintFile prints a file .
2789	ShorthandInput returns a string representation of the input .
2790	Retrieve retrieves credentials from Vault .
2791	IsExpired checks if the Vault is expired .
2792	NewBranch creates a new branch .
2793	NewCommit creates a new commit .
2794	NewCommitanceProvenance returns a new CommitProvenance .
2795	NewFile creates a new file .
2796	CreateRepo creates a new repository
2797	InspectRepo inspects a repository
2798	ListRepo returns a list of repos
2799	DeleteRepo deletes a repository
2800	BuildCommit builds a commit .
2801	StartCommitParent starts a commit .
2802	FinishCommit implements the PFS API .
2803	InspectCommit inspects a commit
2804	BlockCommit returns information about a commit .
2805	ListCommit returns a list of commits .
2806	ListCommitF returns a list of commits .
2807	ListCommitByRepo returns a list of commits by repo name
2808	CreateBranch creates a new branch .
2809	InspectBranch inspects a branch .
2810	ListBranch returns a list of branch info about a repository .
2811	SetBranch sets the branch of a repository .
2812	DeleteBranch deletes a branch .
2813	DeleteCommit deletes a commit .
2814	FlushCommit implements PFS .
2815	FlushCommitF implements the Flush interface .
2816	FlushCommitAll implements the API .
2817	SubscribeCommit implements the PFS API .
2818	SubscribeCommitF is used to subscribe a commit .
2819	PutObjectAsync implements the API . PutObjectAsync interface .
2820	PutObject implements io . Reader .
2821	PutObjectSplit splits an io . Reader into an object .
2822	GetObject implements io . Writer interface .
2823	GetObjectReader returns an io . Reader for the given hash .
2824	GetObjects retrieves all objects of the given hashes .
2825	TagObject adds a tag to the object .
2826	ListObject invokes the given function .
2827	InspectObject inspects an object .
2828	GetTag returns a writer for the given tag .
2829	GetTagReader returns a reader for a given tag .
2830	ListTag iterates over all the objects in the object .
2831	Compact computes the compact object .
2832	NewPutFileClient returns a new PutFileClient .
2833	PutFileOverwrite implements the PutFile interface .
2834	Close closes the client .
2835	CopyFile copies a file .
2836	GetFile retrieves a file from a commit .
2837	GetFileReader returns a reader for a given commit .
2838	GetFileReadSeeker returns an io . ReadFileReadSeeker .
2839	InspectFile inspects a file .
2840	ListFile lists all files in a repository .
2841	ListFileHistory returns a list of files for a commit .
2842	ListFileF is like ListFileFunc .
2843	Walk walks a file and returns a WalkFn
2844	DeleteFile deletes a file .
2845	Write implements the WriteCloser interface .
2846	Close implements the WriteCloser interface .
2847	PrettyPrintVersionNoAdditional returns a string representation of a version .
2848	recursiveBlockQuoteExamples recursively recursively recursively .
2849	errMissingField returns an error response .
2850	validateFields validates the required fields
2851	putConfig writes a config to the storage .
2852	getConfig retrieves the config from the storage
2853	Serve is used to serve the server .
2854	NewPuller creates a new puller
2855	PullTree pulls the contents of the tree from the given tree .
2856	Push pushes a commit to a repository .
2857	PushObj pushes the given commit to the given commit .
2858	PushFile pushes a file to a file .
2859	Dump implements the Debug interface .
2860	Profile implements the Debug interface .
2861	Binary implements the Debug interface .
2862	RegisterCacheStats registers a metric stats .
2863	wait waits for n times until n is reached
2864	RunWorkload runs a worker .
2865	createRepo creates a new repo
2866	vanceCommit advances the current commit .
2867	RandString generates a random string
2868	NewReader returns a new io . Reader .
2869	iterateDir iterates over a path and returns an error .
2870	FSSize returns the number of bytes in the database .
2871	Diff returns the diff between two hashes .
2872	Serialize serializes the database .
2873	Deserialize deserializes a DBHashTree .
2874	Copy returns a copy of the hash tree .
2875	Destroy destroys the database .
2876	PutFileOverwrite writes a file to the database .
2877	PutDirHeaderFooter writes a file header .
2878	PutFileHeaderFooter writes a file header .
2879	deleteDir deletes a directory .
2880	NewReader returns a new Reader .
2881	Read returns a new MergeNode .
2882	NewWriter returns a new Writer .
2883	Write implements the Writer interface .
2884	Copy implements io . Writer
2885	Index returns the index of the index .
2886	GetRangeFromIndex reads a range from an index .
2887	NewFilter returns a filter that matches the given tree .
2888	PathToTree converts a path to a tree .
2889	Merge merges multiple nodes into a writer .
2890	Hash returns the hash of the database .
2891	IsGlob returns true if the pattern is a glob .
2892	GlitLiteralPrefix returns the prefix of the given pattern .
2893	GetHashTreeObject returns the hash tree for the given PFS object .
2894	GetHashTreeTag returns the hash tree for a given tag .
2895	PutHashTree creates a PFS object with the given tags .
2896	NewChildCursor returns a new ChildCursor .
2897	Next returns the next key .
2898	NewOrdered creates a new Ordered instance
2899	MkdirAll mocks base method
2900	PutDir implements the Ordered interface .
2901	Serialize serializes the tree .
2902	NewUnordered returns a new unordered node .
2903	Ordered returns an ordered ordered list of files .
2904	revokeUserCredentials revoke user credentials
2905	NewAPIServer creates a new APIServer .
2906	String returns a string representation of the version .
2907	getPipelineInfo returns the pipeline info for the given environment .
2908	removeStr removes a string from the slice
2909	PublicCertToPEM converts TLS certificate to PEM .
2910	GenerateSelfSignedCert generates a certificate for the given address .
2911	ActivateCmd activates the current user
2912	DeactivateCmd returns a cobra command .
2913	LoginCmd returns a cobra command .
2914	LogoutCmd returns a cobra command .
2915	WhoamiCmd returns a cobra command
2916	CheckCmd returns a cobra command .
2917	GetCmd returns a cobra command
2918	SetScopeCmd sets the command to use for testing
2919	ListAdminsCmd returns a cobra command .
2920	ModifyAdminsCmd returns a new cobra command .
2921	GetAuthTokenCmd returns a cobra command .
2922	UseAuthTokenCmd returns a cobra command .
2923	Cmds returns a list of commands
2924	ParseScope parses a scope string .
2925	IsErrNotActivated returns true if an error occurred .
2926	IsErrPartiallyActivated returns true if an error occurred .
2927	IsErrNotSignedInSign returns true if the given error is valid .
2928	IsErrBadToken returns true if the given error is a valid error .
2929	IsErrNotAuthorized returns true if the error occurred .
2930	IsErrInvalidPrincipal checks if an error is invalid .
2931	IsErrTooShortTTL returns true if an error occurs .
2932	NewDatumFactory returns a DatumFactory .
2933	NewCollection creates a new collection .
2934	Path returns the path for the given key .
2935	getIndexPath returns the path for the given index .
2936	getMultiIndexPaths returns a list of index paths for the given index .
2937	Upsert adds a value to the collection .
2938	get returns the value for the given key .
2939	List implements the Collection interface .
2940	Watch returns a watch for the collection .
2941	WatchByIndex returns a watch for the given index .
2942	WatchOne returns a watcher for the given key .
2943	WatchOneF watches the given key in the collection .
2944	Get implements the Cache interface .
2945	Keys returns all the keys in the cache .
2946	Clear removes all keys from the cache .
2947	NewHTTPServer creates a new http server .
2948	NewDeployServer creates a new API server .
2949	Export is used to export the assets
2950	Import import from an io . Reader
2951	DatumumTagPrefix returns the prefix of the given salt .
2952	NewPFSInput returns a new PFSInput .
2953	NewPFSInputOpts creates a new PFSInput .
2954	NewJobInput creates a new job input .
2955	NewPipelineInput creates a new pipeline input
2956	CreateJob creates a new job .
2957	ListJob lists all jobs in the pipeline .
2958	ListJobF lists all jobs in the pipeline .
2959	FlushJob is a helper function for FlushJob
2960	FlushJobAll returns all jobs in the given commits .
2961	DeleteJob deletes a job .
2962	StopJob stops a job .
2963	RestartDatum is used to restart a job
2964	ListDatum returns a list of Datum objects .
2965	ListDatumFuncF returns a list of Datum objects for the given job ID .
2966	InspectDatum inspects the given datum .
2967	Next returns true if the stream is next .
2968	InspectPipeline inspects a pipeline .
2969	ListPipeline returns a list of pipeline info .
2970	DeletePipeline deletes a pipeline .
2971	StartPipeline starts a pipeline .
2972	StopPipeline stops a pipeline .
2973	Renders a pipeline .
2974	CreatePipelineService creates a new pipeline service .
2975	GetDatumTotalTime returns the total time of the process .
2976	Mount mocks base method
2977	NewBufPool returns a new BufPool .
2978	StorageRootFromEnv returns the storage root directory .
2979	BlockPathFromEnv returns the path to the given block .
2980	NewGoogleClient creates a new google client .
2981	NewGoogleClientFromSecret creates a Google CloudClient from a secret file .
2982	NewGoogleClientFromEnv returns a new Google CloudClient instance
2983	NewMicrosoftClientFromSecret creates a new client from a secret file .
2984	NewMicrosoftClientFromEnv creates a new Microsoft client .
2985	NewMinioClientFromSecret creates a new MinioClient from a secret file .
2986	NewMinioClientFromEnv creates a new MinioClient
2987	NewAmazonAmazonClientFromSecret creates a new AWS CloudCredentials client .
2988	NewAmazonAmazonClientFromEnv creates a new AWS CloudCredentials instance
2989	NewClientFromURLAndSecret creates a new client with the given URL and secret .
2990	ParseURL parses an object from a URL string .
2991	NewClientFromEnv creates a client from an environment variable
2992	NewExponentialBackoffConfig returns an exponential backoff configuration .
2993	Close closes the underlying reader .
2994	Close closes the backend .
2995	IsRetryable returns true if the client is retryable .
2996	RunStdin implements io . RunStdin interface .
2997	RunIODirPath runs the given io . io . io . io . io . io . io . io . io
2998	NewAuthServer creates a new auth server
2999	expiredClusterAdminAdminCheck checks if the user is expired .
3000	getOneTime returns the token for the given username .
3001	hashToken returns the hash of the given token
3002	getAuthToken returns the auth token from the context .
3003	calculateSubjects canonicalizes subjects .
3004	Matches matches a regular expression
3005	OneOfMatches checks if the expected string matches the expected match .
3006	Equal checks if the expected value is equal to the expected value .
3007	NotEqual checks if the expected value is equal .
3008	oneOfEquals returns true if two elements are equal .
3009	NoneEquals asserts that the expected values are equal .
3010	NoError reports whether or not an error occurred .
3011	NoErrorWithinT throws an error if the function fails .
3012	NoErrorWithinRound is a convenience function for testing .
3013	YesError indicates whether the given error is true .
3014	NotNil returns true if the given object is not nil .
3015	Null asserts that the given object is nil .
3016	False indicates whether the given value is true .
3017	NewSTM creates a new STM .
3018	NewDryrunStm creates a new STryST .
3019	newStMRepeatable creates a new stm .
3020	newSTMSerialized creates a new STM serialized transaction .
3021	newSTMReadCommitted returns a new STM read transaction .
3022	commit is used to commit the transaction .
3023	Pipes returns a collection of pipelines .
3024	Job returns a collection of jobs
3025	NewTicker returns a new Ticker .
3026	nodeToMap converts a node to a map
3027	ServiceAccount returns a new ServiceAccount
3028	ClusterRole returns a ClusterRole
3029	RoleBinding returns a RoleBinding
3030	GetSecretEnvVars returns a list of environment variables for the given storage backend .
3031	PachddService returns a new instance of Pachd .
3032	GithookService returns a new service .
3033	 EtcdDeployment returns a deployment deployment .
3034	Ensures the EtcdStorage class for the given backend .
3035	Get EtcdVolume creates a new instance of EtcdVolume .
3036	 EtcdNodePortService returns a ServicePortService instance
3037	 EtcdHeadlessService returns an instance of Etcd
3038	EcdStatefulSet returns an instance of EtcdStatefulSet
3039	DashDeployment returns a dash deployment .
3040	DashService returns a new DashService .
3041	WriteSecret writes the data to the encoder .
3042	GoogleSecret returns a map of secret keys .
3043	WriteDashboardAssets writes a Dashboard asset .
3044	WriteLocalAssets writes the assets to the environment .
3045	WriteCustomAssets writes custom assets .
3046	WriteAmazonAssets writes an Amazon CloudForms to the given bucket .
3047	Write Google Assets
3048	WriteMicrosoftAssets writes the assets to the specified container .
3049	Images returns a list of image images .
3050	AddRegistry adds the image name to the registry
3051	withCanonicalRandomizationFactor sets the RandomizationFactor field s value .
3052	Reset resets the backoff .
3053	increment current interval
3054	NewBlockAPIServer returns a new BlockAPIServer instance
3055	LocalStorage creates a local storage client .
3056	deleteJob deletes a job
3057	writeXML writes a response to the http .
3058	cleanup1HashtreePath cleans up the root hash tree
3059	NewFromAddress creates a new APIClient .
3060	getUserMachineMachineAddrAndOpts returns the user machine address and options .
3061	NewInCluster creates a new APIClient .
3062	Close closes the client .
3063	DeleteAll deletes all resources .
3064	SetMaxConcurrentStreams sets the maximum number of requests .
3065	WithCtx adds the context to the API .
3066	NewDLock creates a new lock
3067	DatumID returns the datum of the input data
3068	runUserErrorHandlingCodeHandling code runs the given command .
3069	HashDatum returns a hash of data .
3070	HashDatum15 returns a hash of data in the pipeline .
3071	Status returns the status of the worker .
3072	Cancel implements the APIServer interface .
3073	mergeStats merges two processes .
3074	mergeChunk merges the chunk into the chunk cache .
3075	IsCommitNotFoundErr returns true if the given error occurs .
3076	IsCommitDeletedErr returns true if the given error occurs .
3077	IsCommitFinishedErr returns true if the given error occurred .
3078	IsRepoNotFoundErr returns true if the given error occurs .
3079	IsBranchNotFoundErr returns true if the error occurred .
3080	IsFileNotFoundErr returns true if the error occurred .
3081	Version returns the version of the version .
3082	validateRepoName validates a repository name .
3083	newDriver creates a new driver .
3084	InspectCommit inspects a commit .
3085	scratchCommitPrefix returns the path prefix for the given commit .
3086	get scratch file prefix
3087	getTreeForFile returns the hash for a file .
3088	provenanceOnInput returns true if the provenance is provenance of the provenance
3089	nodeToFileInfo converts a path to a file .
3090	fileHistory iterates over all files in the given file .
3091	upsertPutFileRecords upserts the given file .
3092	ReadRow reads a row from the database .
3093	NewReporter returns a new Reporter .
3094	ReportUserAction logs a user action .
3095	FinishReportAndFlushUserAction returns a function that will flush the user action .
3096	Read reads data from the stream .
3097	ActivateCmd returns a cobra command .
3098	GetStateCmd returns a cobra command .
3099	Cmds returns a list of commands
3100	NewConfiguration returns a new configuration object .
3101	Repos returns a collection of repositories .
3102	PutFileRecords returns a collection of file records .
3103	Commits returns a collection of commits .
3104	Branches returns a collection of branches .
3105	OpenCommits returns a collection of commits .
3106	NewDAG creates a new DAG .
3107	NewNode creates a new node
3108	Sorted returns a sorted list of all the parents in the graph .
3109	Leaves returns the list of leaves .
3110	 Ancestors returns the ancestor of the given id .
3111	Descendant returns the descendants of the given id .
3112	Return a list of all children of this DAG .
3113	NewPortForwarder returns a new PortForwarder .
3114	Run starts a port forwarding .
3115	RunForDaemon starts a port forwarding .
3116	RunForSAMLACS starts SAMLACS .
3117	RunForDashUI runs the dashboard for dashUI .
3118	RunForDashWebSocket starts a dash - web socket .
3119	RunForPFS starts a port forwarding on the port forwarder .
3120	RunForS3Gateway runs the S3Gateway interface .
3121	Lock locks the port forward .
3122	Close closes the portForwarder .
3123	Unmarshal unmarshals the event .
3124	UnmarshalPrev unmarshals the previous event .
3125	MakeWatcher creates a new watcher
3126	CheckType checks if the template is valid .
3127	NewPool creates a new pool .
3128	Do implements the pool .
3129	Close closes the pool .
3130	buildImage builds a docker image
3131	pushImage pushes a new image to the given repo
3132	newMinioClient creates a new minio client
3133	newMinioClientV2 creates a new minio client
3134	newMinioWriter creates a new minioWriter .
3135	Close closes the writer .
3136	 PipelineRepo returns a new repository .
3137	RPCRcName returns the pipeline name for the pipeline .
3138	GetRequestsResourceListFromPipeline builds a resource list from a pipeline .
3139	GetLimitsResourceListFromPipeline retrieves resource list from pipeline .
3140	getNumNodes returns the number of nodes
3141	GetExpectedNumWorkers returns the number of workers that match the given spec .
3142	GetExpectedNumTrees returns the number of nodes that match the spec .
3143	FailPipeline attempts to fail if a pipeline fails .
3144	JobInput returns the job input from the pipeline .
3145	Create PipelineReqFromInfo creates a new pipeline request .
3146	NewPipelineManifestReader returns a new PipelineManifestReader
3147	NextCreatePipelineRequest returns the next pps pipeline request .
3148	DescribeSyntaxError returns a description of the parsed error .
3149	UpdateJobState updates the given state .
3150	New creates a new UUID
3151	Code returns the error code .
3152	NewHTTPError creates a new HTTPError
3153	NewStorage returns a new Storage instance
3154	DeleteAll deletes all objects from the store
3155	Chunk returns a slice of chunks of data .
3156	ChunkReader implements io . Reader .
3157	NewStreamingBytesReader returns a new io . Reader .
3158	WriteToStreamingBytes writes the given reader to the stream .
3159	WriteFromStreamBytesClient writes a stream to the writer .
3160	NewSidecarAPIServer creates a new sidecar server .
3161	NewEnterpriseServer creates a new enterprise server .
3162	validateActivationCode validates the activation code .
3163	Activate activates a request
3164	Deactivate is used to delete an enterprise
3165	lookupExtensions returns the path for the given path .
3166	Start starts the process .
3167	CombinedOutput returns the output of the command .
3168	StdinPipe creates a new pipe .
3169	StdoutPipe returns the stdout pipe .
3170	DeduplicateEnvCase returns a list of strings that match the given environment .
3171	InputName returns the name of the input .
3172	SortInput is used to sort inputs .
3173	InputBranches returns a list of branches .
3174	ValidateGitCloneURL validates the given URL .
3175	containsEmpty returns true if v is empty
3176	NewAPIServer creates a new API server .
3177	Since returns a human readable representation of the given timestamp .
3178	TimeDifference returns the difference between two timestamps .
3179	Duration returns the duration of the given duration .
3180	InspectCluster inspects a cluster
3181	Extract takes a list of objects and returns an error .
3182	ExtractAll returns all operations of an operation .
3183	ExtractWriter implements the APIClient interface .
3184	ExtractURL extracts a URL from the API .
3185	ExtractPipeline takes a pipeline name and returns it .
3186	Restore restores the specified operations .
3187	RestoreReader restores the given io . Reader .
3188	RestoreFrom implements the REST interface .
3189	RestoreURL is part of the REST API .
3190	IgnoreTypes returns a filter that matches the given types .
3191	AppendEllips adds an ellipsis to the list .
3192	IsType returns true if t is a type .
3193	NameOf returns the name of the function .
3194	PointerOf returns a pointer to a pointer .
3195	String returns a string representation of the editScript .
3196	Stats returns the stats for the edit script .
3197	connect connects to the given point .
3198	EquateNaNs returns an option that can be used for comparison .
3199	Index returns the path at the given index .
3200	Key returns the index of the index .
3201	String returns the string representation of the diff .
3202	FormatType converts the given type to a text node .
3203	formatMapKey returns a string representation of a map key .
3204	formatString formats a string .
3205	formatHex returns the hexadecimal representation of a uint64 .
3206	formatPointer formats a pointer to a pointer .
3207	Visit implements the visitor interface .
3208	retrieveUnexportedField retrieves the value from v .
3209	insert adds a field to the tree .
3210	matchPrefix returns true if the field is a prefix .
3211	canonicalName returns the canonical name of a field .
3212	FilterPath adds a filter to the filter .
3213	normalizeOption normalizes an option .
3214	flattenOptions flatten options into dst .
3215	CanFormatDiffSlice returns true if v is a diff .
3216	formatASCII formats a string .
3217	compareAdjacentEdits returns a list of diffs for the given edits .
3218	SortKeys sorts the keys in a slice .
3219	FormatDiff implements the Format interface .
3220	concatenateAdjacentRecords computes a list of diff records .
3221	Diff compares two values .
3222	statelessCompare compares two paths .
3223	sanitizeValue returns the value of the given type .
3224	Check checks if the given path is valid .
3225	makeAddressable converts v to address .
3226	Marshal implements json .
3227	String returns a string representation of the field .
3228	Set implements the Span interface .
3229	Inject injects the given span context into the given carrier .
3230	Extract extracts the span context from the given carrier .
3231	ToLogRecord converts LogData to LogRecord .
3232	New creates a new mock instance
3233	StartSpan starts an operation with the given operation name .
3234	RegisterInjector registers a new injector
3235	RegisterExtractor registers a new extractor
3236	Inject injects a span context to the given carrier context .
3237	Extract extracts a span from the given carrier .
3238	ContextWithSpan adds a span to the context .
3239	Set sets the value of the given span .
3240	Set implements the Span interface .
3241	Set sets the bool value for the given span .
3242	SetString adds a string to the span .
3243	EmitString mocks base method
3244	EmitLazyLogger mocks base method
3245	RunAPIChecks runs the API .
3246	CheckBaggageValues sets the CheckBaggageValues field s value .
3247	CheckExtract sets the checkExtract option
3248	CheckInject sets the CheckInject field s value .
3249	CheckEverything returns an option that can be used to check whether or not .
3250	UseProbe sets the probe to use .
3251	WithBaggageItem adds a new baggage item to the context .
3252	Tags returns a map of tags .
3253	Tag mocks base method
3254	Logs returns a slice of logs .
3255	Context returns the span context .
3256	SetTag sets the value for the given key .
3257	SetBaggageItem mocks base method
3258	BagageItem returns the baggage item associated with the given key .
3259	Finish implements the Span interface .
3260	FinishWithOptions implements the Span interface .
3261	String returns a string representation of the MockSpan .
3262	LogFields logs the given fields .
3263	logFieldsWithTimestamp adds a timestamp to the log .
3264	LogKV adds a key values to the log .
3265	LogEvent logs an event .
3266	LogEventWithPayload adds an event to the log .
3267	SetOperationName mocks base method
3268	registryDirPath returns the directory path for the system .
3269	loadAndMergeConfig loads a registry configuration from a directory .
3270	ParseReference returns a new image reference .
3271	NewReference creates a new image reference
3272	CheckAuth checks the credentials for the given credentials .
3273	doHTTP sends a HTTP request to the docker client
3274	detectPropertiesHelper is used to detect the properties of the docker client .
3275	detectProperties is used to detect the docker client .
3276	getExtensionsSignatures returns the list of extensions for the specified manifest .
3277	NewTransport returns a new http . Transport .
3278	readRegistryConf reads the registry configuration from the system
3279	GetRegistries returns all registered registries
3280	GetInsecureRegistries returns a list of registries
3281	RegistriesConfPath returns the path to the registry
3282	NewOptionalBool returns a new OptionalBool .
3283	ChangeState changes the state of the policy .
3284	Destroy destroys the policy .
3285	policyIdentityLogentityLogName returns the name of the policy .
3286	RequirementsForImageRef returns the requirements for the given image reference
3287	ParseImageName parses an image name .
3288	BlobInfoFromOCI1Descriptor creates a BlobInfo from an image spec .
3289	OCI11FromManifest returns OCI11 .
3290	OCI1FromComponents creates an OCI1 from the given configspec .
3291	newReference creates a new docker reference
3292	tagOrDigest returns the tag or an error if not found .
3293	updateEmbeddedDockerReference updates the EmbeddedDockerReference field s value .
3294	isTTY returns true if the writer is a terminal .
3295	copyUpdatedConfigAndManifest copies the current config and updates the manifest .
3296	createProgressBar creates a progress bar .
3297	copyConfig copies config from src to src .
3298	diffIDIDComputationGoroutine computes the diff for the given layer stream .
3299	computeDiffID returns the digest of the given stream .
3300	compressGoroutine writes gzip to dest .
3301	newDockerClient returns a docker client .
3302	defaultPolicyPath returns the default policy path .
3303	NewPolicyFromFile creates a policy from a file .
3304	NewPolicyFromBytes creates a new Policy from a byte slice .
3305	newPolicyRequirementFromJSON returns a PolicyRequirement from JSON .
3306	newPRSignedByType returns a new PRSignedByType instance
3307	newPRSignedByKeyPath returns a new PRSignedByKey .
3308	NewPRSignedByKeyPath returns a new PRSignedByKey .
3309	newPRSignedByKeyData creates a new PRSignedByKey .
3310	NewPRSignedByKeyData returns a new PolicyRequirement instance
3311	IsValid returns true if the key type is valid .
3312	newPRSignedBaseLayer creates a new PRSignedBaseLayer .
3313	newPolicyReferenceFromJSON returns a PolicyReferenceMatchMatch from JSON data .
3314	newPRMExactReference creates a PRMExactReference from a DockerReference .
3315	newPRMExactRepository creates a new prmExactRepository .
3316	newImageSource creates a new storage image source .
3317	getBlobAndLayerID returns an io . Reader for the given blob .
3318	computeID returns the image ID for the given manifest .
3319	PutManifest updates the manifest .
3320	PutSignatures sets the signature of the storage image .
3321	newImage creates a new storage image .
3322	newImageSource creates a new image source source
3323	LoadManifestDescriptor loads a manifest descriptor from an image reference
3324	Close closes the image source .
3325	append appends a string to the set .
3326	isMultiImage returns true if the given image is MultiImage .
3327	lockPath creates a new path for the given path
3328	unlockPath unlocks a path .
3329	view executes a transaction .
3330	update implements the database .
3331	UncompressedDigest returns the digest of the given digest .
3332	appendReplacementCandidates adds the candidates to the list of candidates .
3333	indexExists returns true if the given index exists .
3334	createSignature creates a signature for the given manifest .
3335	ParseReference returns a new image reference
3336	NewReference returns a new image reference
3337	getIndex returns the index of the image
3338	LoadManifestDescriptor returns the manifest descriptor for the given image reference .
3339	obtain blob path
3340	SignDockerManifest signs a Docker manifest .
3341	VerifyDockerManifestSignature verifies that the given signature is valid .
3342	newOpenshiftClient returns a new OpenShiftClient
3343	doRequest sends a request to the server
3344	getImage retrieves an image from a stream
3345	convertDockerImageReference converts a docker image reference to a docker image .
3346	ensureImageIsolved ensures that the image has been resolved .
3347	newImageDestination creates a new image destination .
3348	newUntrustedSignature returns a new untrustedSignature instance
3349	MarshalJSON marshals the signature .
3350	UnmarshalJSON implements the Unmarshaler interface .
3351	verifyAndExtractSignature verifies that the signature matches the provided signature .
3352	RewriteReference returns a reference to the endpoint .
3353	getV1Registries returns a list of Registry registries
3354	getConfigPath returns the path to the system registry
3355	GetRegistries returns a list of registries
3356	readRegistryConf reads the registry configuration from the registry .
3357	Manifest returns the manifest .
3358	ConfigUpdate updates the image reference
3359	parseImageAndDockerReference parses an image and returns a reference to a Docker reference .
3360	parseDockerReferences parses and returns a reference to a docker image .
3361	ListNames returns the names of all transports .
3362	NewReference returns a new image reference
3363	signaturePath returns the path for the given index .
3364	ValidateImageName validates an image name .
3365	SplitPathAndImage splits the path and returns the path and image and image .
3366	ValidateOCIPath validates a path .
3367	ValidateScope validates the given scope .
3368	BlobInfoFromSchemaDescriptor returns a BlobInfo from the schema .
3369	Schema2FromManifest creates a Schema2 .
3370	Schema2FromComponents creates a schema2 schema2 .
3371	SetAuthentication sets the credentials in the system
3372	RemoveAuthentication removes authentication from the system
3373	RemoveAllAuthentication removes all credentials from the system
3374	readJSONFile reads a JSON config file .
3375	modifyJSON modifies the JSON config file
3376	findAuthentication attempts to find the authentication credentials from the registry .
3377	NewDestination creates a new destination .
3378	AddRepoTags adds tags to the destination .
3379	writeLegacy layer metadata
3380	sendSymlink sends a link to the destination .
3381	sendBytes sends bytes to the destination .
3382	sendFile sends a file to the destination .
3383	Commit closes the destination .
3384	imageMatchesMatches returns true if the image matches the given reference .
3385	resolveImage retrieves the image from the storage .
3386	Transport returns a TransportTransport .
3387	StringWithinTransport returns a string representation of the storage .
3388	PolicyConfigurationNamespaces returns the namespaces for the given storage .
3389	GzipDecompressor returns an io . Reader .
3390	Bzip2Decompressor returns an io . Reader .
3391	XzzDecompressor returns an io . Reader .
3392	DetectCompression returns a decompressorFunc that detects compression algorithm .
3393	newImageDestination creates a new image destination .
3394	mountBlob mounts a blob into the docker image .
3395	bicTransportScope returns a BICTransportScope for the given reference .
3396	newBICLocationReference returns a new BICLocationReferenceReference .
3397	parseBICLocationReference returns a reference to a BICLocationReference .
3398	NewSourceFromStream creates a new Source from an input stream .
3399	readTarComponent reads a tar component from the source file .
3400	ensureCachedDataIsPresent is used to ensure the cache data is present .
3401	loadTarManifest loads the manifest from the source file .
3402	Close closes the source .
3403	newImageDestination creates a new image destination .
3404	imageLoadGoroutine runs image loadGoroutine .
3405	NewReference creates a new image reference
3406	createOCIRefefRef creates a new OCI reference
3407	createUntarTempDir creates a temporary directory .
3408	destructiveReplitCandidatesWithMaxMaxMaxest returns a slice of BICReplacementCandidateCandidateCandidateCandidates with maxCandidates .
3409	newImageDestination creates a new image destination .
3410	resolveExistingPathToFully fully qualified path to fully qualified path .
3411	newImageDestination creates a new image destination .
3412	isDirEmpty returns true if path is empty .
3413	removeDirContents removes all files from the given path .
3414	GetRepositoryTags returns a list of tags for a given image reference .
3415	DefaultCache returns the storage cache for the system .
3416	UncompressedDigest returns the digest of the given digest .
3417	Close closes the image .
3418	PutManifest writes the manifest to the archive .
3419	Commit is used to commit the image .
3420	tarDirectory creates a tar archive .
3421	ParseStoreReference parses a storage reference to a storage reference .
3422	ChooseDigestFromManifest returns the digest of the manifest .
3423	ChooseManifestInstanceFromManifest returns the manifest from the manifest list .
3424	manifest1FromComponents creates a new manifest for the given components .
3425	manifestDigest returns the digest of the image .
3426	deleteImage deletes a docker image
3427	Schema1FromComponents creates a new Schema1 .
3428	initialize initializes schema .
3429	ToSchema2Config converts the schema to a schema2 config .
3430	Digest returns the digest of the manifest .
3431	MatchesDigest returns true if the manifest matches the provided digest .
3432	NormalizedMIMEType returns a normalized MIME type .
3433	FromBlob creates a Manifest from a manifest .
3434	NewReference returns a new image reference .
3435	layerPath returns the path for the given digest .
3436	signaturePath returns the path for the given index .
3437	New creates a new pool
3438	NewFunc returns a new pool .
3439	ProcessTimed processes a job .
3440	SetSize sets the number of workers .
3441	GetSize returns the number of workers .
3442	TL returns the position of the rectangle .
3443	BR returns the border of the rectangle .
3444	CVBox returns a copy of the box .
3445	Points returns the points in the box .
3446	FOURCC computes the FOURCC .
3447	Merge merges image into dst .
3448	Split splits an image into an image .
3449	AddWeighted adds a weighted image to the image .
3450	And combines two images .
3451	AndMaskWithMask adds a mask to the image .
3452	AndScalarar adds a scalar value to dst .
3453	AndScalarWithMask adds a scalar with the given mask and mask .
3454	Or combines two images .
3455	OrMaskWithMask creates a new image with the given mask .
3456	OrScalarar adds a scalar value to dst .
3457	OrScalarWithMask adds a scalar with the given mask .
3458	AddWithMask adds a mask to the image .
3459	AddScalar adds a scalar to the image .
3460	AddScalarWithMask adds a scalar to the image .
3461	Subtract removes the image from src2 .
3462	SubtractWithMask adds a mask to the image .
3463	Subscarar performs a subscar .
3464	SubscarWithMask adds a scalar with the given mask .
3465	SubscararRevisionRev converts a scalar value to dst .
3466	SubscarWithMaskRevisionWithMaskRevision returns a copy of the given mask .
3467	AbsDiff computes the absolute difference between two images .
3468	AbsDiffScalScal returns the absolute value of the given value .
3469	AvgStdDevWithMask returns the mean of the image .
3470	CreateSeq returns a new Seq
3471	Push adds an element to the sequence .
3472	Pop removes an element from the sequence .
3473	PushFront pushes an element at the given element .
3474	PopFront pops the element at the given element .
3475	GetElemAt returns the element at the given index .
3476	RemoveAt removes the specified index from the sequence .
3477	Delay sets the delay
3478	BackOffDelay returns the backoff delay for n times .
3479	Error returns the error message
3480	Arguments adds the arguments to the request builder .
3481	BodyString sets the body of the request body
3482	BodyBytes sets the body of the request body .
3483	Body sets the body of the request body .
3484	Option adds an option to the request .
3485	Header adds a header to the request .
3486	Send sends the request .
3487	Exec executes the request .
3488	Next returns the next message
3489	Cancel closes the subscription .
3490	FileList mocks base method
3491	Cat returns the output of the given path .
3492	List lists all links
3493	Pin pins a path to the shell
3494	Pins returns all pins
3495	Version returns the current version .
3496	 swarm peers
3497	 swarm connection
3498	 DagPutOptions returns a new DagPutOptions .
3499	Pin sets the pin to the given pin .
3500	Kind sets the Kind field s kind .
3501	Hash sets the hash for the given hash .
3502	AddDir adds a directory to the shell
3503	Publish a node
3504	PublishWithDetails returns a PublishResponse with the given key .
3505	ResolveValue resolves the value of the PlanValue .
3506	GenerateQuery is used to generate a query string .
3507	EncodeValue encodes a value into a buffer .
3508	Lex implements Tokenizer .
3509	skipStatement advances the next token .
3510	Reset the tokenizer .
3511	Preview returns the preview of the given SQL string .
3512	NewPlanValue creates a PlanValue from the given node .
3513	StringIn returns true if the string contains the given string .
3514	NewTrackedBuffer returns a new TrackedBuffer instance
3515	NewStringArena returns a new StringArena
3516	NewString creates a new string .
3517	SpaceLeft returns the space left in the buffer .
3518	ParseStrictDL parses a SQL statement .
3519	ParseNext parses the next token .
3520	Append adds a node to the buffer .
3521	ExprFromValue creates an Expr from the given value .
3522	Backtick returns the backtick string .
3523	NewValue creates a new value from the given type .
3524	String returns the string representation of the value .
3525	EncodeSQL encodes the value into a binary string .
3526	EncodeSQL encodes the InsertValues into a buffer .
3527	EncodeSQL encodes a TupleEqualityList .
3528	WalkStatement walk the given SQL node .
3529	WalkSelect parses the given SQL node .
3530	BindVariablesEqual returns true if two bind variables are equal .
3531	New creates a new JWTMiddleware
3532	HandlerWithNextNext adds a request to the JWT .
3533	FromAuthHeader returns the auth header from the request header .
3534	FromParameter returns a TokenExtractor from the request
3535	FromFirst returns the first token extracted from the request .
3536	getHelloPacket returns a new RPC packet
3537	NewFloodSubsubsWithProtocols creates a new PubSubSubs with the given protocols .
3538	NewFloodSub creates a new PubSubSub subscription .
3539	NewLRUBlacklist returns a Blacklist .
3540	NewRandomSub creates a new pubSub .
3541	NewGossipSub creates a new PubSubSub .
3542	NewPubSub creates a new PubSub .
3543	WithValidateThrottle sets the ThrottleThrottle
3544	WithBlacklist sets the Blacklist field s value .
3545	handleRemoveSubscription removes a subscription from the topic
3546	handleAddSubscription is used to handle a sub - subscribe request .
3547	Announce announces a topic .
3548	notifySubs implements the PubSub interface .
3549	seenMessage returns true if the given message is seen .
3550	subscribedToMsg returns true if the message is subscribed to the given message .
3551	msgID returns the message ID for a message .
3552	pushMsg sends a message to the PubSub .
3553	validate checks if the given message is valid
3554	validateSingleTopic checks if the given message is valid .
3555	getValidators returns the validators for the given message .
3556	Subscribe implements PubSubscription interface .
3557	SubscribeByTopicDescriptor implements the PubSubDescriptor interface .
3558	GetTopics returns a list of available topics .
3559	Publish sends a message to the publisher
3560	ListPeers returns a list of available peers .
3561	WithValidatorTimeout sets the validator timeout
3562	WithValidatorConcurrency sets the ValidatorConcurrency field s value .
3563	RegisterTopicValidator registers a new topic validator
3564	Unregisters a topic validator for the given topic
3565	DefaultMetricPrefix returns a metric with the given name .
3566	MetricWithPrefix creates a metric with the given name and tags .
3567	NewClient creates a new client .
3568	Call implements the Tchannel interface .
3569	CallPeer calls the given method on a peer .
3570	CallSC calls the given method .
3571	ReadResponse reads a response from a Tchannel .
3572	writeHeaders writes the headers to the response .
3573	ResponseWriter returns an HTTP response writer .
3574	ReadHeaders reads the headers from an io . Reader .
3575	NewTCPRayRelay creates a new TCP connection .
3576	NewClient creates a new client .
3577	Advert is part of the client
3578	Handle implements the Handler interface .
3579	Start starts the server
3580	Port returns the port
3581	SetStrategy sets the score of the peer .
3582	Add adds a peer to the list of peers .
3583	GetNew returns a new peer
3584	Get returns the peer list .
3585	Remove removes a peer from the list
3586	Copy returns a copy of the peer list .
3587	Len returns the number of peers .
3588	check returns the peer score for the given host port
3589	getPeerScore returns the peer score for the given host port
3590	onPeerChange is called when a peer is changed .
3591	updatePeer updates the peer .
3592	getConn returns the connection at the given index .
3593	GetConnection returns a new connection .
3594	getConnectionRelay returns a connection to the peer
3595	canRemove removes the connection from the peer .
3596	addConnection adds a connection to the peer
3597	removeConnection removes a connection from the peer
3598	closeConnectionCloseStateChange is called when a connection is closed .
3599	Connect connects to the channel
3600	BeginCall creates a new RPC call .
3601	NumConnections returns the number of connections .
3602	NumPendingOutbound returns the number of pending connections .
3603	isEphemeralHostPort returns true if the host port is an ephemeral host port .
3604	Get returns the value associated with the given key .
3605	Set implements the kvHandler interface .
3606	ClearAll removes all values from the kvstore .
3607	NewChannel creates a new channel
3608	Serve implements the Channel interface .
3609	ListenAndServe is the same as ListenAndServe interface .
3610	Register registers a subchannel .
3611	PeerInfo returns the peer info .
3612	GetSubChannel returns a new SubChannel
3613	serve starts the connection
3614	Ping implements the Channel interface .
3615	StatsTags returns a map of stats for this channel .
3616	Connect implements the Channel interface .
3617	changeUpdated updates the peer s peer .
3618	updatePeer updates a peer .
3619	addConnection adds a connection to the channel .
3620	removeClosedConn removes a connection from the channel .
3621	closeConnectionCloseStateChange is called when a connection is closed .
3622	State returns the state of the channel .
3623	NewReader creates a new reader .
3624	ReadUint16 reads a uint16 from the reader .
3625	ReadString reads a string from the pool .
3626	ReadLen16String returns the length of a string .
3627	Register registers the given channel .
3628	Run runs the behavior .
3629	Get returns a relay timer .
3630	Put a relay timer .
3631	Start starts a relay timer .
3632	Release releases a relay timer .
3633	NewLogger creates a new logger .
3634	NewTCPFrameRelay creates a new TCP frame relay .
3635	countTags returns a map of known tags .
3636	Isolated starts a new subchannel .
3637	Isolated returns true if the channel isolated .
3638	Register registers a subchannel .
3639	GetHandlers returns a map of registered handlers .
3640	StatsTags returns a map of StatsTags .
3641	registers a new SubChannel
3642	get returns a subchannel
3643	getOrAdd returns a new SubChannel .
3644	Discover returns a list of host ports .
3645	Start starts the client .
3646	Listen starts the server
3647	WriteRequest writes a HTTP request to the given Tchannel .
3648	ReadRequest reads a request from a Tchannel .
3649	NewReadBufferWithSize returns a new ReadBuffer with the given size .
3650	ReadByte implements the ReadBuffer interface .
3651	ReadBytes implements io . Reader . ReadBytes .
3652	ReadString implements io . Reader interface .
3653	ReadUint16 returns a uint16 value .
3654	ReadUint32 reads a uint32 from the stream .
3655	ReadUint64 reads a uint64 from the stream .
3656	ReadUvarint implements the ReadBuffer interface .
3657	ReadLen8String implements the ReadBuffer interface .
3658	ReadLen16String implements the ReadBuffer interface .
3659	FillFrom implements io . ReadFrom interface .
3660	Wrap wraps the underlying reader .
3661	WriteSingleByte writes a single byte to the buffer .
3662	WriteBytes implements the WriteBuffer interface .
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to the buffer .
3665	WriteUint64 writes a uint64 to the buffer .
3666	WriteUvarint writes a uint64 to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String writes a string to the buffer .
3669	WriteLen16String writes a string to the buffer .
3670	DeferByte implements the WriteBuffer interface .
3671	DeferBytes implements the WriteBuffer interface .
3672	FlushTo implements io . Writer .
3673	Reset resets the buffer .
3674	Wrap wraps the underlying WriteBuffer .
3675	Update implements uint16 .
3676	Update updates the given uint32 .
3677	Update implements uint64 .
3678	Update updates the given bytes .
3679	UpdateString updates the given string .
3680	ArgReader returns the next argument .
3681	Finish finishes the fragment .
3682	newWritableChunk returns a new writableChunk .
3683	writeAsFits writes the contents of the chunk .
3684	newFragmentingWriter creates a new fragmenting writer .
3685	ArgWriter returns a new ArgWriter .
3686	BeginArgument starts a new fragment .
3687	Write implements io . Writer interface .
3688	Flush implements the Writer interface .
3689	Close closes the writer .
3690	handleCallRes handles a call frame .
3691	Arg2Reader reads the arguments from the response .
3692	handleError is used to handle an error .
3693	doneReading is called when a response is finished .
3694	newFragment creates a new fragment .
3695	flushFragment writes a fragment to the writer .
3696	fail is called when an error occurs .
3697	arg1Reader reads the first argument from the reader .
3698	arg2Reader returns a new arg2 reader .
3699	Arg3Reader returns the arg3 reader .
3700	ArgReader returns a new argument reader .
3701	readNextFragment returns the next fragment of the next fragment .
3702	releasePreviousFragment clears the previous fragment .
3703	fail is called when the reader is failed .
3704	parseInboundFragment parses a fragment into a readable fragment .
3705	NewContext creates a new context .
3706	WithHeaders adds headers to the context .
3707	healthCheck checks if the connection is alive .
3708	SetTimeout sets the timeout
3709	AddHeader adds a header to the context .
3710	SetHeaders sets the headers .
3711	SetConnectTimeout sets the ConnectTimeout field s value .
3712	SetRetryOptions sets the RetryOptions field s value .
3713	SetTimeoutPerAttempt sets the RetryPerAttempt field s value .
3714	SetParentContext sets the parent context .
3715	Build creates a context with the context builder .
3716	OverrideHeaders overrides the default headers .
3717	Read implements io . Reader interface .
3718	ReadJSON reads the JSON data from the reader .
3719	NewArgWriter creates a new ArgWriteHelper
3720	Write implements io . Writer interface .
3721	WriteJSON writes data to the writer .
3722	Register registers a new Tchannel .
3723	Count returns the number of items in the relay .
3724	Get returns a relay item .
3725	Add adds an item to the relay .
3726	Entomb is part of the relay .
3727	NewRelayer creates a new Relayer .
3728	Relay implements the Relay interface .
3729	Receive sends a frame to the server .
3730	handleNonCallReq implements the Relay interface .
3731	addRelayItem creates a new relay item .
3732	failRelayItem attempts to fail if the relay has failed .
3733	WriteStruct implements io . Writer . Writer .
3734	ReadStruct implements io . Reader .
3735	EnsureEmpty implements io . Reader .
3736	NewServer creates a new server
3737	Advert to hyperbahn
3738	handleCallReqContinue is used to handle a frame request .
3739	dispatchInbound sends a call to the client .
3740	CallOptions returns the CallOptions . CallOptions
3741	Response returns the response .
3742	SendSystemError sends an error to the client .
3743	SetApplicationError sets the ApplicationError field s value .
3744	Arg2Writer returns the arg2 writer .
3745	doneSending sends the response to the client .
3746	newState creates a new State
3747	rootType returns the root type of the given thriftType .
3748	checkInclude returns the type of the given type .
3749	isResultPointer returns true if the given thriftType is a result pointer .
3750	goType returns a string representation of a Go type .
3751	goTypePrefix returns the Go type prefix for the given type .
3752	NewContext creates a new context .
3753	newIncomingContext creates a new context .
3754	CurrentCall returns the current call .
3755	New returns a new rand .
3756	Health implements the MetaHandler interface .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders sets the response headers
3760	Child returns a ContextWithHeaders with the given context .
3761	Wrap returns a context with the given context .
3762	WrapWithHeaders returns a context with the given headers .
3763	WithoutHeaders returns a context with the given context .
3764	Notify is called when an error occurs .
3765	Forward peer frame
3766	receivePeerFrame receives a message from the exchange .
3767	receivePeerFrameOfType returns a Frame of the message .
3768	shutdown shuts down the message .
3769	newMessageExchangeSet creates a new messageExchangeSet .
3770	addExchange adds a message to the exchange set .
3771	newExchange creates a new message exchange
3772	deleteExchange deletes a message from the exchange set
3773	removeExchange removes a message from the exchange set .
3774	expireExchange removes a message from the exchange set .
3775	forwardPeerFrame is used to forward a peer .
3776	copyExchanges returns a copy of the message exchange .
3777	stopExchanges stops all exchanges .
3778	NewFrame returns a new Frame .
3779	ReadBody implements io . Reader . ReadBody .
3780	WriteTo implements io . Writer interface .
3781	CanRetry returns true if the given error occurs .
3782	HasRetries returns true if the request has retries .
3783	SinceStart returns the duration of the request .
3784	AddSelectedPeer adds a new peer to the request
3785	RunWithRetry executes a request with retry .
3786	ChecksumSize returns the size of the checksum type .
3787	New returns a new Checksum instance
3788	parseTemplates parses templates and returns a slice of templates .
3789	NewStringSliceFlag returns a new slice of strings .
3790	withStateFuncs returns a copy of the state of the template
3791	InspectOtherChannels returns a map of all channels in the channel
3792	ReportInfo returns information about the channel info .
3793	InspectState mocks base method
3794	InspectState implements the SubChannelMap interface .
3795	InspectState returns the information about the peer .
3796	InspectState returns the connection state .
3797	InspectState implements the RelayerRuntime interface .
3798	InspectState returns the state of the relay items .
3799	InspectState returns the current exchange state .
3800	NewContext creates a new context .
3801	WriteResponse writes the response to the given response .
3802	Wrap wraps a Tchannel .
3803	initFromOpenTracing initializes the injectable span .
3804	startOutboundSpan starts an outbound call .
3805	IntToIP4 converts a uint32 to a net . IP .
3806	servicePeerToHostPort returns the host port and port
3807	NewStatsdReporter creates a new statsdReporter
3808	UnmarshalText unmarshals the value from a string .
3809	Push adds a new peer score to the heap .
3810	Pop removes the peer scores from the heap .
3811	updatePeer updates peer score .
3812	removePeer removes a peer from the heap .
3813	pushPeer pushes a peer score to the heap .
3814	addPeer adds a peer to the heap .
3815	NewClient creates a new TChannel
3816	Add returns a new peer .
3817	Get returns the peer with the given host port .
3818	WithTimeout sets the timeout
3819	Methods returns a slice of methods .
3820	OverrideMethods returns the inherited methods of the service .
3821	Arguments returns a slice of arguments .
3822	ArgList returns a string representation of the method .
3823	CallList returns a string representation of the method call
3824	RetType returns the type of the method .
3825	WrapResult wraps the method and returns the result
3826	Return the response with the given error name .
3827	Declaration returns a string representation of the field .
3828	startIdleSweep creates a new idleSweep .
3829	start starts the idle loop .
3830	Stop stops the loop .
3831	ResolveWithGoPath resolves the given filename .
3832	setExtends sets the extensions for the service
3833	register adds a handler to the map
3834	NewClient creates a new client
3835	ListenIP returns a new IP address .
3836	Close closes the listener .
3837	ReadArgsV2 reads arguments from rchannel .
3838	WriteArgs writes arguments to Tchannel .
3839	Call implements Tchannel .
3840	CallSC calls the given method .
3841	CallV2 calls V2 .
3842	NewRealRelay creates a new real relay .
3843	NewServer creates a new server .
3844	RegisterHealthHandler registers a health handler .
3845	Handle implements the Server interface .
3846	MetricsKey returns the metric key .
3847	NewSystemError creates a new system error
3848	NewWrappedSystemError creates a new system error .
3849	Error returns the error message
3850	GetContextError returns the error of the given error .
3851	GetSystemErrorCode returns the system error code .
3852	Ping sends a ping message .
3853	handlePingRes sends a ping frame .
3854	handlePingRequest sends a ping request .
3855	SendSystemError sends an error message to the server .
3856	connectionError is called when an error occurs .
3857	withStateLock locks the state of the connection .
3858	withStateRLock implements the Connection interface .
3859	readFrames reads frames from the connection pool .
3860	Write frames to the connection pool .
3861	hasPendingCalls returns true if the connection is pending .
3862	checkExchanges is called when the connection is changed .
3863	closeNetwork closes the connection .
3864	getLastActivityTime returns the last activity time .
3865	Validate validates a service .
3866	logFailedRegistrationRetry attempts to log a failure .
3867	Initialise the initialised peer .
3868	Service returns the value of the service
3869	TL returns the TTL of the request .
3870	SetTTL sets the TTL field s value .
3871	finishedCall returns true if the frame is finished .
3872	Flatten returns a slice of all platforms .
3873	Map applies a function to the platform .
3874	MapSlice converts a slice of platforms into a slice of platforms .
3875	GetProtoConfig returns the proto configuration for the given Config .
3876	MapExprStrings converts an expression to a map of strings .
3877	FlattenExpr converts an expression to a list of strings .
3878	makePlatformStringsExpr returns a list of strings representing the platform strings .
3879	String returns the string representation of the platform .
3880	Find finds the workspace in the given directory .
3881	runGazelle runs gzelle
3882	restoreBuildFilesInRepo restores all build files in the repository
3883	FixLoads is used to fix the rules of a rule .
3884	fixLoad creates a new load from a file .
3885	newLoadIndex returns the index of the rule .
3886	removeLegacyGoRepository removes all the imports from a rule .
3887	Compare compares two versions .
3888	ParseVersion parses a version string .
3889	EmptyFile creates a new File .
3890	LoadWorkspaceFile loads a workspace file .
3891	LoadMacroFile loads a macro file .
3892	EmptyMacroFile creates a new empty file .
3893	LoadData loads data from a file .
3894	LoadWorkspaceData loads workspace data from a file .
3895	LoadMacroData loads data from a file .
3896	ScanAST parses a Bzl file .
3897	Scan AST body
3898	MatchBuildFileName returns the name of the build file .
3899	Sync macro file
3900	 macro name .
3901	Sync is used to sync all load statements .
3902	Format returns a byte slice
3903	Save writes the file to the file .
3904	HasDefaultVisibility returns true if the file has default visibility .
3905	NewLoad returns a new Load
3906	Symbols returns a list of symbols .
3907	Has returns true if the symbol exists .
3908	Add adds a symbol .
3909	Remove removes a symbol
3910	Insert inserts a new Load .
3911	NewRule creates a new rule
3912	SetKind sets the Rule field s kind .
3913	AttrKeys returns the list of attribute names .
3914	Attr returns the attribute of the rule .
3915	AttrString returns the string value for the given key .
3916	AttrStrings returns a list of strings for the given key .
3917	DelAttr removes an attribute from the rule .
3918	SetAttr sets the value of a rule .
3919	PrivateAttrKeys returns the list of private keys .
3920	SetPrivateAttr sets the private key for the rule .
3921	Insert inserts a rule .
3922	IsEmpty returns true if the rule is empty .
3923	CheckInternalVisibility returns the internal visibility of the given rel .
3924	New creates a new Label
3925	Rel returns the label of this label .
3926	Equal returns true if two labels are equal .
3927	Contains returns true if the given label contains the given label .
3928	generateFromPath generates a Go package from the given root path .
3929	shouldCall returns whether or not the given rel should be called .
3930	ShouldUpdate returns true if the given rel is in the given rel .
3931	shouldVisit returns true if the given rel should be visited .
3932	SquashRules merges src into dst .
3933	runClient starts the server
3934	UpdateRepo updates the repository with the given import path .
3935	NewRemoteCache creates a new remote cache .
3936	Remote retrieves the remote repo from the remote cache .
3937	get retrieves a value from the cache map
3938	ensure ensures that the cache has been loaded .
3939	RelBaseName returns the name of the relative path .
3940	Clone returns a copy of the Config .
3941	IsValidBuildFileName returns true if the given name is valid .
3942	check returns true if the tag is valid
3943	fileNameInfo returns the file name for the given path .
3944	otherFileInfo returns info about the given file .
3945	protoFileInfo returns the fileInfo for the given path .
3946	AddRule adds a rule to the index .
3947	Finish all rules in the index .
3948	buildImportIndex is used to build the import map .
3949	IsSelfImport returns true if the source should be imported .
3950	applyKindMappings takes a list of loads and merges them into a list of loaded loads .
3951	appendOrMergeKindMapping returns a list of loaded loadInfo .
3952	RuleName returns the name of a rule .
3953	buildPackages builds a list of package packages .
3954	selectPackage selects a package from the given rel .
3955	generateProto generates a rule .
3956	generateEmpty returns a list of rules that are empty .
3957	ImportRepoRules returns a list of rules for a given file .
3958	MergeRules merges the rules into a new rule .
3959	GenerateRule creates a rule .
3960	FindExternalRepo returns the full path for the given repository
3961	ListRepositories returns a list of repositories .
3962	migrateLibraryEmbed embeds the given rule .
3963	MigrateGrpcCompilers migrates the grpc compiler rules .
3964	cleanCgoLibrary cleans the cgo library .
3965	removeLegacyProto removes legacyProto from config file .
3966	removeLegacyGazelle removes legacy gzelle from config file .
3967	selectPackage selects a package from a directory .
3968	AddBuiltin adds a builder to the resolver .
3969	MappedKind adds the given kind to the map .
3970	Resolver returns a Resolver for the given rule .
3971	sortExprLabels sorts a list of strings .
3972	checkRulesGoVersion checks to see if the rules are valid .
3973	preprocessTags is used to preprocess the tags
3974	setBuildTags sets the build tags
3975	splitValue splits the value into a slice of strings .
3976	copyGoToTempToTemp returns a copy of the given file .
3977	findGoTool returns the path to the path .
3978	isBuildable returns true if the package is buildable .
3979	startServer starts the server
3980	watchDir starts a watcher .
3981	listDirs returns a list of directories .
3982	shouldIgnore returns true if path is ignored .
3983	recordWrite writes a path to a directory .
3984	getAndClearDirs returns a list of all written directories .
3985	CombineHandlers combines multiple handlers .
3986	VerifyContentType checks if the given content type is valid .
3987	VerifyMimeType checks if the given mime type is valid .
3988	VerifyBasicAuth authenticates a basic authentication request .
3989	VerifyJSONRepresenting verifies that the given object is valid .
3990	VerifyFormKV verifies that the given key is valid .
3991	RespondWithProto returns a response with the given status code .
3992	RegisterFailHandlerWithTrap adds a failure handler to the global error handler .
3993	EventuallyWithOffset returns an AsyncAssertion with the given offset .
3994	ConsistentlyWithOffset returns an Asistion with the given offset .
3995	Expect returns an Assertion that matches the expected value .
3996	Anochion asserts that an expected value is an expected number of times .
3997	Consistently asserts that the given value is consistent .
3998	TimeoutCloser returns a io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io . io
3999	TimeoutReader implements io . io . io . Reader .
4000	TimeoutWriter returns an io . Writer that writes to w . Writer .
4001	Nested returns a nested nested error .
4002	SetMockService sets the mock service
4003	FindMachineByAddressOrAddress returns a machine with the given id .
4004	Write writes data to the response .
4005	Hijack implements the Writer interface .
4006	ListDeploys returns a list of Deployments for the given filter .
4007	AddAll adds a route to the router .
4008	samlRequestTimeout parses the SAML request timeout .
4009	RegisterHandler registers a handler for the given path .
4010	RegisterHandlerVersion registers a new Tsurfaces version .
4011	Check returns a list of health checks
4012	DiscoverRepositoryPath returns the repository path for the given directory .
4013	OpenRepository opens a repository .
4014	RemoteURL returns the remote URL for the repository .
4015	List lists all apps .
4016	Apps returns a new AppNamespaceLister .
4017	List lists all apps .
4018	StreamJSONResponse writes a JSON response to w .
4019	DropDatabase deletes a database .
4020	Collection returns a collection .
4021	SetLogger sets the logger s logger .
4022	Error implements the Target interface .
4023	Errorf logs a message .
4024	Fatal log message .
4025	Debugf logs a message .
4026	GetStdLogger returns the StdLogger .
4027	Namespace returns the name of the cluster
4028	recreateContainers is used to recreate containers .
4029	checkProvisioner checks if the provisioner is valid
4030	checkDocker checks if docker config is valid
4031	checkScheduler checks if the config is valid
4032	checkRouter checks if the default router is valid .
4033	Available returns true if the unit is available .
4034	Get returns a Provisioner .
4035	Registry returns a slice of Provisioner .
4036	Error returns the error message
4037	validateVersion checks if the current version is valid .
4038	ReadTarget reads the target file .
4039	WriteTarget writes a string to a file .
4040	WriteOnTargetList writes a label to a list of targets .
4041	Conn returns a storage connection
4042	Apps returns a collection of apps .
4043	PoolsConstraints returns a collection of pool constraints .
4044	Users returns a collection of users .
4045	SAMLRequests returns a collection of SAML requests .
4046	AppLogCollection returns the log collection for the given app name .
4047	CreateAppLogCollection creates a new log collection .
4048	LogsCollections returns a list of collections .
4049	ArchiveBuildCmds returns a list of build commands .
4050	ArchiveDeployCmds returns a list of commands for the given app .
4051	DeployCmds returns the deployment commands for the given app .
4052	runWithAgentCmds runs the command with the given agent .
4053	newApps returns a new instance of Tsurfaces
4054	Commit commits the container
4055	processTags takes a list of tags and returns a list of tags .
4056	aggregateContainersBy returns a map of containers by matcher .
4057	ChooseNodeToAdd adds a node to the cluster
4058	ChooseContainerToRemove removes a container from the list of nodes .
4059	Get returns a router .
4060	Default returns the default router
4061	Store creates a new router .
4062	TsuruV1 returns a TsuruV1V1V1V1
4063	Tsuru returns a TsuruV1Client
4064	NewAppInformer returns a new instance of AppInformer .
4065	NewFilteredAppInformer returns a new instance of FilterInformer .
4066	Watch returns a watch .
4067	Patch applies a patch .
4068	NewSharedInformerFactory returns a new SharedInformerFactoryFactory .
4069	NewFilteredInformerFactory creates a new SharedInformerFactoryFactory .
4070	Proxy sends an event to the broker
4071	UnbindUnit removes a unit from the service .
4072	Create creates a new plan .
4073	Remove removes a plan .
4074	ensureDefault ensures that the plan is available .
4075	DeleteInstance deletes a service instance
4076	ToInfo returns an instance of ServiceInstanceWithInfo
4077	Update updates the service instance .
4078	BindApp implements ServiceInstance
4079	BindUnit adds a unit to the service instance .
4080	UnbindApp implements ServiceInstance .
4081	Status returns the status of the service
4082	ProxyInstance is used to proxy a service instance
4083	Inc increments the quota .
4084	SetLimit sets the quota for the given app name .
4085	Set sets the quota
4086	Get returns the quota .
4087	RemoveImage removes an image from the registry
4088	RemoveAppImages removes an image from the registry
4089	Create creates a new platform .
4090	List returns all platform platforms .
4091	FindByName returns the platform by name .
4092	Update updates an existing platform .
4093	Remove removes a platform .
4094	Rollback is used to roll back the image .
4095	GetPoolByName retrieves a pool by name .
4096	Manager returns the repository manager
4097	Register registers a repository manager .
4098	start starts the app .
4099	Shutdown implements the BindSyncer interface .
4100	GetForProvisioner returns the builder for the given provisioner .
4101	get returns a builder by name .
4102	Registry returns a slice of builders .
4103	RegisterQueueTask registers a new task .
4104	Apps returns a new AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements io . Writer interface .
4109	ResetPassword reset password
4110	addKnownTypes adds known types .
4111	Register registers a shutdownable .
4112	Do implements the Shutdown interface .
4113	ListImagesOrDefault returns a list of images for the given platform name .
4114	MigrateAppsCRDs is used to migrate apps .
4115	Register registers a migration .
4116	RegisterOptional registers an optional migration function .
4117	Run runs the command .
4118	Unit returns the units of the application .
4119	MarshalJSON marshals the App
4120	AcquireApplicationLockWait waits for a lock to be locked .
4121	ReleaseApplicationLock releases an application lock .
4122	GetByName returns the app by name .
4123	AddUnits adds units to the app .
4124	SetUnitStatus sets the status of the application .
4125	UpdateNodeStatus updates the status of a node .
4126	available returns true if the app is available .
4127	Grant grants a team .
4128	Revoke revoke a team
4129	GetTeams returns a list of team names .
4130	setEnv sets the environment variable
4131	getEnv returns the environment variable .
4132	validateNew validates new app
4133	validate validates the app
4134	InstanceEnvs returns a map of env variables for a service .
4135	Run runs the given command .
4136	GetUnits returns the units of the app .
4137	GetUUID returns the UUID of the app .
4138	Envs returns a map of environment variables .
4139	SetEnvs sets the environment variables .
4140	UnsetEnvs updates the environment variables .
4141	AddCName adds cnames to the app
4142	Log logs a message .
4143	LastLogs returns the last log of the current app .
4144	List all apps
4145	Swap swaps two routes
4146	Start starts the app .
4147	GetDbDriver returns a database driver by name .
4148	GetCurrentDb driver
4149	NewForConfig creates a new Clientset .
4150	GetAppFromUnitID returns the app from the container
4151	NewPipeline creates a new pipeline .
4152	Result returns the result of the pipeline .
4153	Decode json payload
4154	UrlFor returns the URL for a given path .
4155	GetCorsInfo returns the CorsInfo for the request .
4156	MiddlewareFunc returns a middleware that can be used to handle the request .
4157	MiddlewareFunc returns a HandlerFunc that returns a HandlerFunc .
4158	WriteHeader writes the status code to the response .
4159	MakeRouter creates a new router
4160	AppFunc returns a HandlerFunc for the given request .
4161	escapedPath returns the path of the request object .
4162	escapedPathExp returns a string representation of a pathExpression .
4163	start starts the router
4164	findFirstDefinedRoute returns the first match of the matched route .
4165	findRouteFromURL finds a route from the given URL .
4166	MiddlewareFunc returns a HandlerFunc that returns a HandlerFunc .
4167	CloseNotify closes the response writer .
4168	MiddlewareFunc returns a HandlerFunc that can be used to handle access log messages .
4169	executeTextTemplate executes the text template .
4170	RemoteUser returns the remote user
4171	HTTPQueryString returns the HTTP query string .
4172	StartTime returns the start time .
4173	AuxRemoteAddr returns the remote address of the access log .
4174	ResponseTime returns the response time .
4175	MiddlewareFunc returns a HandlerFunc that adds the middleware to the middleware .
4176	EncodeJson encodes JSON to JSON .
4177	WriteHeader writes the code to the response writer .
4178	MakePath constructs a path from the route parameters .
4179	MiddlewareFunc returns a HandlerFunc that wraps the middleware function .
4180	WrapMiddlewares wraps middlewares with middlewares
4181	MiddlewareFunc wraps a gzip middleware function .
4182	WriteHeader writes the header to the response .
4183	Hijack implements the http . Handler interface .
4184	Write implements io . Writer interface .
4185	MiddlewareFunc returns a middleware that can be used to authenticate a request .
4186	printDebug prints the given node .
4187	AddRoute adds a route to the tree .
4188	printDebug prints the tree .
4189	FindRoutes returns a list of matched routes .
4190	FindRoutesAndPath mocks base method
4191	FindRoutesForPath returns all routes for a given path .
4192	Use adds middlewares to the stack .
4193	MakeHandler returns a HandlerFunc .
4194	MiddlewareFunc returns a HandlerFunc that returns a HandlerFunc that can be used as a middleware function .
4195	MiddlewareFunc returns a HandlerFunc that wraps the given HandlerFunc .
4196	GetStatus returns the status of the status .
4197	MiddlewareFunc returns a HandlerFunc that wraps the given callback function .
4198	Flush flushes the response .
4199	MiddlewareFunc returns a HandlerFunc that returns a HandlerFunc .
4200	Fetch fetches the contents of the S3 .
4201	sanitCheck checks if env is valid
4202	release releases the listener
4203	fetchLoop implements the master interface .
4204	forkLoop runs the master loop .
4205	Init initializes the file
4206	Fetch reads the file from the file .
4207	Fetch returns an io . Reader .
4208	NewConfig returns a new Config instance
4209	Validate validates the configuration .
4210	NewClient creates a new client .
4211	AsyncClose closes the partition consumer .
4212	Close closes the partition .
4213	MarkOffset sets the offset of the partition .
4214	NewConsumer creates a new consumer
4215	MarkOffsets implements the ConsumerStash interface .
4216	ResetOffset resets the offset of a message .
4217	Close closes the consumer .
4218	hbLoop runs the heartbeat loop .
4219	toll loops through all topics in the consumer .
4220	commitLoop is used to commit offsets .
4221	fetchOffsets fetches the offsets for the given topics .
4222	MarkOffset mocks base method
4223	ResetOffset resets the offset for the given message .
4224	Offset returns a map of offsets .
4225	Actual returns an instance of InstanceGroup
4226	Expected returns an instance of InstanceGroup
4227	Delete deletes the instance group
4228	GetReconciler returns the reconciler for the given cluster .
4229	GetVersion returns a new Version
4230	GetVersionJSON returns the version of the version
4231	Updates the resource group with the given name .
4232	Expected returns an instance of the resource group .
4233	CreateCmd creates a new cluster
4234	NewUbuntuCluster creates a new cluster .
4235	ProviderConfig returns the control plane configuration .
4236	SetProviderConfig sets the ClusterConfig field s value .
4237	MachineProviderConfigs returns a list of MachineProviderConfigs
4238	SetMachineProviderConfigs sets the MachineProviderConfigs field s value .
4239	NewCluster returns a new cluster
4240	DeployControllerCmd returns a command for DeployController .
4241	NewRetrier returns a new Retrier .
4242	RunRetry runs the retry function .
4243	MustGenerateRandomBytes returns a random byte slice .
4244	ExplainCmd returns a cobra command .
4245	TimeOrderedUUID returns a random UUID
4246	GetConfigCmd returns a cobra command
4247	RunAnnotated runs a task .
4248	ListCmd returns a command .
4249	NewUbuntuCluster creates a new cluster .
4250	EditCmd returns a new cobra command .
4251	RemoveKey removes a key from the agent
4252	RemoveKeyUsingFile removes a key from a file .
4253	Actual returns a new instance of Firewall
4254	Expected returns an instance of Firewall
4255	Apply applies the given firewall to the cloud .
4256	Delete deletes a Firewall
4257	DeleteCmd returns a command to delete the resources .
4258	NewStateStore returns a new state store .
4259	Commit commits a cluster
4260	ApplyCmd returns a command to the cloud model .
4261	ExpandPath expands the path to the path .
4262	CompletionCmd returns a command for completion
4263	AdoptCmd returns a new cobra command .
4264	StrEnvDef returns the default value for the environment variable .
4265	IntEnvDef returns the default value for the environment variable .
4266	BoolEnvDef returns the value of the given environment variable .
4267	readFromFS reads a file from the filesystem .
4268	VersionCmd returns a cobra command .
4269	NewSignalHandler creates a new SignalHandler .
4270	Register registers the handler .
4271	NewUbuntuCluster creates a new cluster .
4272	BeginOfHour returns the Beginning of the current time .
4273	BeginOfDay returns the beginning of the current time .
4274	BeginningOfWeek returns the beginning of the week .
4275	BeginOfMonth returns the beginning of the month .
4276	BeginOfQuarter returns the beginning of the beginning of the month .
4277	BeginningOfYear returns the beginning of the current year .
4278	EndOfMinutes returns the end of the current time .
4279	EndOfHour returns the end of the current time .
4280	EndOfDay returns the end of the current time .
4281	EndOfWeek returns the end of the current week .
4282	EndOfMonth returns the end of the current month .
4283	EndOfQuarter returns the end of the current time .
4284	EndOfYear returns the end of the current year .
4285	MustParse parses the given string into a time . Time .
4286	Between returns true if the current time is between two dates .
4287	ParseInLocation parses a time string into a time . Time .
4288	MustParse parses a time string .
4289	MustParseInLocation parses a time string into a time . Time .
4290	Between returns true if the given time is between two times .
4291	NewChannelMemoryBackend returns a new ChannelMemoryBackend .
4292	Start starts the channel .
4293	Flush implements the ChannelMemoryBackend interface .
4294	Stop stops the channel .
4295	Formatted returns the formatted string representation of the record .
4296	Message returns the message .
4297	SetBackend sets the backend .
4298	MustGetLogger returns a logger with the given module .
4299	Reset resets the logger .
4300	IsEnabledFor returns true if the given level is enabled .
4301	Criticalf logs a message to the logger .
4302	Warningf logs a warning .
4303	Noticef writes a message to the logger .
4304	Infof log message
4305	SetFormatter sets the formatter .
4306	MustStringFormatter returns a new Formatter instance .
4307	formatFuncName returns the name of the function name
4308	Log implements the backend interface .
4309	LogLevel returns the level of the given level .
4310	AddModuleLevel adds a module level to the backend .
4311	GetLevel returns the level of the module .
4312	SetLevel sets the module level
4313	IsEnabledFor returns true if the module is enabled .
4314	MultiLogger returns a new MultiLogger
4315	Log implements the MultiLogger interface .
4316	GetLevel returns the level of the given module .
4317	SetLevel implements the MultiLogger interface .
4318	IsEnabledFor implements the MultiLogger interface .
4319	ConvertColors converts a list of colors to a string .
4320	NewSyslogBackend returns a new SyslogBackend .
4321	NewSyslogBackendPriority creates a new SyslogBackend .
4322	SetBackend sets the logger for the given backend
4323	NewCommander returns a new Commander instance .
4324	Execute executes the command .
4325	 explain the command line .
4326	explainGroup prints the given command group .
4327	 explain the command line .
4328	dealias returns the command .
4329	Execute implements the DefaultCommander interface .
4330	LoadFromData loads a config file from data .
4331	LoadFromReader loads a ConfigFile from an io . Reader .
4332	ReloadData loads the configuration from the given io . Reader .
4333	AppendFiles appends files to the config file .
4334	GetKeyList returns a list of keys for the given section .
4335	SaveConfigData writes a config file to a file .
4336	SaveConfigFile saves a config file to a file .
4337	Find returns a Selection .
4338	FindByXPath returns a selection by selector .
4339	FindByLink returns a Selection with the given text .
4340	FindByLabel returns a selection by label .
4341	FindByName returns a selection by name .
4342	FindByClass returns a Selection with the given text .
4343	FindByID returns a selection by ID .
4344	First returns the first selection of the selector .
4345	FirstByXPath returns the first element matching the selector .
4346	FirstByLink returns the first element in the selectable .
4347	FirstByLabel returns the first element with the given label .
4348	FirstByName returns a selection by name .
4349	All returns a new MultiSelection .
4350	AllByXPath returns a MultiSelection with the given selector .
4351	AllByLink mocks base method
4352	AllByLabel mocks base method
4353	AllByName mocks base method
4354	AllByClass mocks base method
4355	AllByID returns a MultiSelection with the given ID .
4356	FindForAppium returns a Selection that matches the given text .
4357	Timeout sets the timeout
4358	OptionOptions sets the Chrome options for Chrome .
4359	JoinPage creates a new Page with the given options .
4360	Destroy destroys the page .
4361	Reset reset the page
4362	Navigate to the page
4363	Get cookies
4364	SetCookie sets the cookie s cookie .
4365	DeleteCookie deletes a cookie .
4366	ClearCookies deletes cookies .
4367	URL returns the URL of the page .
4368	Size sets the size of the page
4369	Screenshot returns a screenshot of the page
4370	Title returns the title of the page .
4371	HTML returns the content of the page .
4372	PopupText returns the text of the popup
4373	EnterPopupText sets the popup text
4374	ConfirmPopup confirms popup
4375	CancelPopup cancel the popup
4376	SwitchToParentFrames sets the parent frame of the page .
4377	SwitchRootFrame sets the root frame
4378	NextWindow returns the next window .
4379	CloseWindow closes the window .
4380	WindowCount returns the number of windows .
4381	LogTypes returns all log types .
4382	MoveMouseBy mocks base method
4383	DoubleClick will click the page .
4384	Click sends an event to the page .
4385	Click will click all elements in the selection
4386	DoubleClick performs a double click on the selection .
4387	Fill fills the text with the given text .
4388	Tap implements the Selection interface .
4389	Touch implements the Selection interface .
4390	FlickFinger implements the Selection interface .
4391	ScrollFinger implements the ScrollFinger interface .
4392	NewCapabilities returns a new Capabilities instance
4393	JSON returns the JSON representation of the capabilities .
4394	HaveTitle returns a matcher that matches the given title .
4395	HasURL returns a matcher that matches the provided URL .
4396	HavePopupText returns a boolean indicating whether the text is present .
4397	HaveLoggedError returns a gomegaMatcher that matches the provided messages .
4398	Text returns the text of the selected element .
4399	Active returns true if the selection is active .
4400	Attribute returns the value of an attribute .
4401	CSS returns the CSS property .
4402	Select returns true if the element is selected .
4403	Visibility returns true if the element is visible .
4404	Enabled returns true if the selection is enabled .
4405	HasCount returns a matcher that matches the provided count .
4406	HaveAttribute returns a matcher that matches the given attribute .
4407	EdgeDriver returns an instance of WebDriver
4408	Selendroid creates a new WebDriver .
4409	SwitchToFrame implements the Selection interface .
4410	Count returns the number of elements .
4411	EqualsElement returns true if two elements are equal .
4412	MouseToElement mocks base method
4413	LoggingMiddleware creates a new HTTP middleware for logging .
4414	chainHandlers returns a middleware that applies the given middleware .
4415	HTTPReverseProxy is used to serve the HTTP request .
4416	CheckInstallation checks if the installation is installed .
4417	CheckVersion checks if a binary version is valid .
4418	GetVersionForBinary returns the version for the given binary .
4419	Get a user by id
4420	login attempts to login a user
4421	LoginHandler is used to authenticate a user .
4422	logoutHandler is used to authenticate the user
4423	viewHandler renders the user
4424	Run starts the server
4425	WithRequest adds a request to the interaction
4426	WillRespondWith sets the response to the given response .
4427	isJSONFormattedObject returns true if the string is a JSON string .
4428	ByUsername returns user by username .
4429	ByID returns user by ID
4430	UserLogin returns the user login response
4431	newClient creates a new PactClient
4432	NewClient creates a new Pact client .
4433	ListServers mocks base method
4434	UpdateMessagePact updates a pact message .
4435	PublishPacts sends Pacts to the Pact service .
4436	getPort returns the port from the raw URL
4437	getAddress returns the address from the raw URL
4438	sanitiseRubyResponse cleans up Ruby response
4439	Publish sends a pact request to the publisher .
4440	FindPortInRange returns the port in range .
4441	EachLike returns a matcher that matches the given content .
4442	Term returns a matcher .
4443	UnmarshalJSON deserializes a MapMatcher .
4444	objectToString converts obj to string
4445	match returns a matcher that matches the given params .
4446	AddMessage creates a new MessageInteractions
4447	AddInteraction creates a new Interaction
4448	Teardown shuts down the server .
4449	Verify verifies that the pact is valid .
4450	stateHandlerMiddleware returns a middleware for the given state .
4451	VerifyMessageProviderRaw verifies that the given request is valid .
4452	VerifyMessageConsumerRaw is used to verify a message consumer .
4453	VerifyProvider mocks base method
4454	NewService creates a new mock instance
4455	Setup initializes the service manager .
4456	addServiceMonitor adds the monitor to the service map
4457	removeServiceMonitor removes the process monitor from the service
4458	List returns the list of processes
4459	Command returns a new instance of ServiceManager
4460	call calls the mocked method
4461	DeleteInteractions deletes all interactions .
4462	AddInteraction mocks base method
4463	WritePact writes a pact file to the server .
4464	ExpectToReceive sets the ExpectsToReceive field s value .
4465	WithMetadata sets the Metadata field s value .
4466	AsType sets the type of the message .
4467	User login
4468	Region returns the region name
4469	New creates a new S3 instance
4470	Bucket returns a new bucket .
4471	PutWriter writes a path to the bucket .
4472	url returns the URL for a bucket .
4473	SetLogger creates a new logger
4474	InstanceKeys returns the keys for the role
4475	EnvKeys returns the keys from the environment
4476	Sign signs the request .
4477	getAWSKeys retrieves the keys from the environment
4478	HomeDir returns the home directory
4479	ACAC sets the ACL header .
4480	putPart writes a part of a PUT request .
4481	Aborts the upload .
4482	growPartSize returns true if the chunk size is greater than maxSize .
4483	CheckDisallowed checks if the given prefix is disallowed .
4484	Process parses a prefix and returns an error
4485	MustProcess runs the given prefix and panics if the given prefix exists .
4486	toTypeDescription returns the description of the given type .
4487	Usage prints the usage of the given spec .
4488	Usagef implements the Usage interface .
4489	Uses the given prefix to use in the given template
4490	Scan scans the value from the given value .
4491	Value returns the value of the Time .
4492	NewTime returns a new Time instance .
4493	TimeFromPtr returns a Time from a pointer .
4494	ValueOrZero returns the TimeOrZero value .
4495	MarshalJSON marshals the Time into a byte slice .
4496	SetValid sets the Time field s value .
4497	Ptr returns a pointer to the current time .
4498	NewBool returns a new Bool .
4499	BoolFromPtr returns a Bool from a pointer .
4500	UnmarshalJSON deserializes a Bool .
4501	UnmarshalText unmarshals a Bool .
4502	MarshalJSON returns the JSON representation of Bool .
4503	SetValid sets the Valid field s value .
4504	NewString creates a new string .
4505	UnmarshalJSON deserializes a JSON string .
4506	MarshalText returns the string representation of the string .
4507	UnmarshalText unmarshals a string .
4508	SetValid sets the Valid field s value .
4509	StringFromPtr converts a pointer to a string .
4510	MarshalJSON returns the JSON representation of the string .
4511	NewInt returns a new Int64 .
4512	IntFromPtr converts a pointer to an Int64 .
4513	UnmarshalJSON unmarshals an Int64 .
4514	MarshalText returns the string representation of the Int64 .
4515	SetValid sets the Int64 field s value .
4516	UnmarshalText unmarshals an int .
4517	MarshalText implements Bool .
4518	SetValid sets the Valid field s value .
4519	MarshalJSON marshals a Time . Time .
4520	UnmarshalJSON deserializes a float into a float
4521	UnmarshalText unmarshals a float .
4522	MarshalJSON marshals float64 to JSON .
4523	newGossipChannel creates a new gossip channel
4524	GossipUnic implements gossipChannel .
4525	GossipBroadcast implements gossipChannel .
4526	Send sends a gossip data to the gossip channel .
4527	SendDown sends a gossip message to the gossip channel .
4528	 gob encodes items into gob .
4529	newTokenBucket creates a new token bucket .
4530	wait waits for the next unspent token .
4531	CapacityToken returns the capacity of the token .
4532	PrefixRangeEnd returns the end of a prefix .
4533	newLocalPeer creates a new local peer
4534	getConnections returns a set of connections .
4535	createConnection creates a new TCP connection .
4536	doAddConnection adds a connection to the local peer
4537	startLocalConnection starts a local connection .
4538	SendProtocolMsg sends a protocol message
4539	NewStatus returns a new Status .
4540	makePeerStatusSlice converts a list of peers to a slice of peers .
4541	makeUnicastRouteStatusSlice returns a slice of unicastRouteStatus .
4542	makeBroadcastRouteStatusSlice returns a slice of broadcast routes .
4543	makeLocalConnectionStatusSlice returns a slice of local connections .
4544	makeTrustedSubnetsSlice returns a slice of trusted subnets .
4545	Range implements the RPCServer interface .
4546	Put implements the RPC .
4547	DeleteRange deletes a range
4548	Txn implements the EtdStore interface .
4549	Compact compaction .
4550	proposalInternalRaftRequest is used to propose an internal RPC request .
4551	applyCompare applies the comparison to the given key .
4552	Describes the list of available peers .
4553	OnGC adds a callback to the list of peers .
4554	OnInvalidateShortIDs registers a callback for the given callback .
4555	ChooseShortID returns a random peer short ID .
4556	fetchWithDefault returns a new peer with the given name .
4557	Fetch returns a peer by name .
4558	fetchAndAdd returns a new peer with the given name .
4559	FetchByShortID returns a peer by shortID .
4560	GarbageCollect closes all peers .
4561	newRoutes creates a new route
4562	OnChange registers a callback for all routes .
4563	unicast returns the unicast of the given name .
4564	UbrastAll returns the route name for the given name .
4565	Broadcast returns a list of peer names .
4566	BroadcastAll returns all peers for the given name .
4567	NewPeer creates a new peer
4568	Register registers a new peer
4569	ReadFrom implements the Peer interface .
4570	WriteTo implements io . Writer interface .
4571	LocalAddr returns the local address of the peer .
4572	OnGossip is part of the peer .
4573	OnGossipBroadcast sends a message to the peer .
4574	OnGossipUnic implements the gossip interface .
4575	NewDefaultServer creates a new server
4576	PeerNameFromUserInput returns a PeerName from a user input string .
4577	bytes returns the bytes as a byte slice .
4578	NewRouter creates a new router
4579	sendAllGossip sends all gossip messages .
4580	sendAllGossipDown sends all gossip messages to the router
4581	broadcastTopologyUpdate is used to broadcast peers .
4582	OnGossipUnicast implements the router interface .
4583	OnGossipBroadcast is part of the router .
4584	Gossip returns the gossip data .
4585	OnGossip implements the router interface .
4586	Encode encodes the gossip data .
4587	newState returns a new instance of the current state
4588	Merge merges the given mesh into the state .
4589	mergeReceived merges a set of peers into the state .
4590	mergeComplete merges the set of peers into the state .
4591	OnGossipBroadcast returns a gossip data .
4592	OnGossip returns a new gossip data .
4593	generateKeyPair generates a private key pair .
4594	formSessionKey returns the session key .
4595	newTCPCryptoState returns a new TCP encryption state .
4596	Send implements gobPSender .
4597	Send sends a message to the sender .
4598	Send sends a message to the sender .
4599	Receive returns a byte slice .
4600	Receive receives a message and returns it .
4601	Receive sends a message to the server .
4602	newPeer creates a new peer
4603	incr increments the current state of the peer .
4604	Gossip returns the current state .
4605	OnGossipUnicast implements the gossip interface .
4606	makeRaftPeer returns a raft peer .
4607	String returns a string representation of the peer .
4608	eachConnectedPeedPeer iterates over all connected peers .
4609	parsePeerUID returns a PeerUID from a string .
4610	Swaps the list of peers .
4611	Less returns true if the list is less than the given name .
4612	doIntro returns the introspection results .
4613	filterV1Features returns a map of supported features .
4614	newConnectionMaker creates a new connection maker .
4615	connectionAborted sends a connection to the given address .
4616	newGossipSender creates a new gossip sender .
4617	Send sends the gossip data to the sender .
4618	Broadcast implements gossipSender .
4619	Flush implements the gossipSender interface .
4620	Sender returns a new gossipSender .
4621	Flush implements the gossiper interface .
4622	findMainPath returns the main path of the main process
4623	Create a new channel
4624	Send sends a message .
4625	SendJSON sends a JSON message to the client
4626	remapError removes the service from the API .
4627	NamespacedContext adds a namespace to the context .
4628	pbToItem converts protobuf protobuf to a MemcacheItem
4629	singleError returns the first error of an error .
4630	Get retrieves the item by key .
4631	GetMulti retrieves all items from the given key .
4632	Delete deletes a key .
4633	DeleteMulti deletes a key from the cache .
4634	Increment increments the value of a key .
4635	IncrementExisting adds a new value to the given key .
4636	set sets the value for the given item .
4637	Get implements Codec .
4638	Stats returns statistics .
4639	Flush mocks base method
4640	RunInBackground is a helper function to run in the background .
4641	List mocks base method
4642	SetNumInstances sets the number of instances
4643	Versions returns the versions of a module .
4644	DefaultVersion returns the default version
4645	Start a module
4646	Stop a module
4647	Ancestor sets the ancestor of the query .
4648	EventualConsistency sets the eventual consistency of the query .
4649	Project adds the field names to the query .
4650	Distinct sets the distinct query .
4651	DistinctOn sets the distinct field names .
4652	KeysOnly sets the KeysOnly field s value .
4653	Limit sets the limit
4654	Offset sets the offset of the query .
4655	BatchSize sets the size of the query .
4656	Start starts the query .
4657	End sets the end of the query .
4658	Count returns the number of results in the query .
4659	Run executes the query .
4660	Next implements Iterator .
4661	Cursor returns a Cursor .
4662	String returns a string representation of the cursor .
4663	DecodeCursor decodes a string .
4664	saveEntity is used to save an entity .
4665	Namespace returns a context with the given namespace .
4666	typeof returns the type of a type
4667	dot returns the dot notation for the given type .
4668	joinFunc returns a string representation of a string .
4669	validPropertyName returns true if the given name is valid .
4670	getStructCodec returns the struct for the given type .
4671	LoadStruct loads a struct into a struct .
4672	SaveStruct creates a property from src .
4673	 ServingURL returns the URL for the given blob key .
4674	DeleteServingURL deletes the serving URL .
4675	CurrentOAuth returns the current user
4676	OAuthConsumerKey returns the OAuthConsumerKey associated with OAuthSignature .
4677	String returns the string representation of the User .
4678	LoginURL returns the login URL for the given destination .
4679	LoginURLFederated returns the login URL for the given destination .
4680	LogoutURL creates a logout URL .
4681	insertContext inserts the context into the context .
4682	NewClient creates a new client .
4683	NewContext creates a new context .
4684	NewRemoteContext creates a new context .
4685	Debugf logs a message .
4686	GuestbookBookKey returns the guestbook key .
4687	toRetryParameters converts RetryOptions to RetryParameters .
4688	NewPOSTTask creates a new POST task
4689	ParseRequestHeaders parses the request headers .
4690	Add adds a task to the queue .
4691	AddMulti adds multiple tasks to the queue .
4692	Delete deletes a task
4693	DeleteMulti deletes a list of tasks .
4694	Lease creates a task for the given queue .
4695	LeaseByTag creates a task by tag .
4696	Purge removes a task from the queue .
4697	ModifyLease attempts to modify a task .
4698	QueueStats returns a list of QueueStatistics .
4699	IsTimeoutError returns true if the given error is a timeout .
4700	Function creates a new function with the given key .
4701	Task returns a task queue
4702	RequestHeaders returns the request headers .
4703	WithContext adds a context to the context .
4704	WithAPICallFunc adds a call to the context .
4705	APICalls an API call
4706	ModuleHostname mocks base method
4707	AccessToken returns the access token .
4708	PublicCertificates returns a list of public certificates .
4709	ServiceAccount returns the service account name .
4710	SignBytes signs the given bytes .
4711	fetch data from the reader
4712	seek implements the reader interface .
4713	multiKeyToProto converts a list of keys to proto .
4714	referenceValueToKey converts ReferenceValue to KeyValue .
4715	keyToReferenceValue converts a key to a reference value .
4716	Put implements the Put interface .
4717	PutMulti implements the Put interface .
4718	Delete deletes a key .
4719	DeleteMulti deletes a single key .
4720	Deploy the deployment
4721	Next returns the next record
4722	protoAppLogs converts log lines to appLogs
4723	protoToRecord converts proto to a RecordLog .
4724	Run implements the Query interface .
4725	run runs the read operation .
4726	Current returns the current user .
4727	IsAdmin returns true if the request is admin .
4728	isErrFieldMismatch returns true if the error occurred .
4729	Stat returns information about a blob .
4730	Send sends the given blob key .
4731	UploadURL creates a URL for uploads .
4732	Delete deletes a blob .
4733	DeleteMulti deletes a blob .
4734	NewReader returns a new reader for the given blob key .
4735	Handle implements the http . Handler interface .
4736	Send sends a message to the server .
4737	Invite mocks base method
4738	Send sends a presence message
4739	GetPresence returns the presence of a user .
4740	GetPresenceMulti returns a list of presences for a given JID .
4741	newStructFLS creates a new FieldLoadSaver .
4742	SaveStruct converts a struct into a slice of fields .
4743	Namespaces returns all the namespaces in the context .
4744	Kinds returns a list of kind names .
4745	RunInTransaction runs a transaction in a transaction .
4746	Import returns true if the file is imported .
4747	importSpec returns the import spec .
4748	checkImports returns true if the given path is imported .
4749	isPkgDot returns true if the given expression is a package name .
4750	isTopName returns true if the given expression matches the given name .
4751	isName returns true if the expression matches the given name .
4752	isCall returns true if t is a call .
4753	assertTo returns true if the given node is a valid identifier .
4754	isEmptyString returns true if the expression is empty .
4755	countUses returns the number of uses in the given scope .
4756	assignTo returns true if the expression is assigned to the given expression .
4757	newPkgDot returns a new Selector .
4758	renameTop is used to rename a file .
4759	matchLen returns the number between two strings .
4760	deleteImport deletes a file .
4761	rewriteImport is used to rewrite a file
4762	DefaultTicket returns the default ticket
4763	flushLog is used to flush log messages .
4764	withDeadline returns a context with deadline .
4765	KeepAlive is used to keep alive .
4766	applyTransaction applies a transaction to a transaction .
4767	analyze analyzes the given tags .
4768	buildContext creates a new build context .
4769	 synthesize the main file
4770	findInGopath finds the directory in the given directory .
4771	copyTree recursively copies the contents of a tar archive .
4772	copyFile copies a file to a tar archive .
4773	checkMain is a helper function that checks whether the command is a command .
4774	isMain returns true if f is a main function .
4775	readFile reads a file from a file .
4776	initField initializes the field with the given index .
4777	loadEntity loads an entity from a protobuf .
4778	validIndexNameOrDoc returns true if the string is valid .
4779	Open opens a new index .
4780	Put implements the Index interface .
4781	Get a document by ID .
4782	Delete deletes an index .
4783	DeleteMulti deletes multiple documents .
4784	Search returns a new Iterator .
4785	fetchMore is used to fetch more items .
4786	Next returns the next document .
4787	Fetches returns a list of facets .
4788	DefaultBucketName returns the default GCSB bucket name .
4789	validate returns true if the key is valid .
4790	Equal returns true if k is equal .
4791	root returns the root key .
4792	Marshal marshals the Key .
4793	String returns the string representation of the key .
4794	Encode returns a string representation of the key .
4795	DecodeKey decodes a key .
4796	NewIncompleteKey creates a new Key .
4797	NewKey creates a new Key .
4798	AllocateIDs allocates all IDs for the given kind .
4799	IsOverQuota returns true if an error occurred .
4800	ClassicContextFromContext creates a new appengine .
4801	Send sends a message .
4802	SendToAdmins sends a message to the admin .
4803	Failures returns the number of failures .
4804	decodeFieldNumberAndTyp3 decodes a field number .
4805	checkTyp3 checks if the given type is valid .
4806	decodeTyp3 decodes a Typ3 type .
4807	NewPrefixBytes creates a new prefix bytes .
4808	getLengthStr returns the length of the type .
4809	collectImplementers_nolock is used to collect the implementations of the given type .
4810	checkConflictsInPrio is a helper function that checks whether the type of the given type info is in the priority list .
4811	constructConcreteType constructs a concrete type for the given type .
4812	MarshalBinaryLengthPrefixedWriter implements io . Writer interface .
4813	MarshalBinaryBareBare returns the binary representation of an object .
4814	UnmarshalBinaryLength unmarshals a byte slice .
4815	UnmarshalBareBareBareBareBare unmarshals a byte slice .
4816	MustMarshalJSON marshals an object into a byte slice .
4817	MustUnmarshalJSON is used to unmarshal JSON .
4818	MarshalJSONIndent encodes an object into a byte slice .
4819	newDataReader returns a new internal data reader .
4820	Read reads data from the internal buffer .
4821	ListenAndServeTLS listens for the server .
4822	Produce produces a new Producer .
4823	PromoteHandlerFunc creates a new PromotedHandlerFunc .
4824	Serve creates a new server .
4825	Serve starts the server .
4826	Fail logs the given message .
4827	WriteUsage implements io . Writer interface .
4828	WriteHelp implements io . Writer interface .
4829	MustParse parses and returns a parser .
4830	Parse parses the command line and returns an error .
4831	walkFields recursively walk all fields in v .
4832	Parse parses the command line arguments .
4833	setSlice sets the value of a slice of strings .
4834	canParse returns true if the given type is valid .
4835	isBoolean returns true if t is a boolean type .
4836	NewFromMap creates a new Tree from a map .
4837	Insert inserts a value into the tree .
4838	Delete deletes a node
4839	DeletePrefix removes a prefix from the tree .
4840	deletePrefix removes a prefix from the tree .
4841	Get returns the value of the given string .
4842	LongestPrefix returns the longest prefix of the given string .
4843	Min returns the minimum value of the tree .
4844	WalkPrefix walks the tree with the given prefix .
4845	recursiveWalk returns true if the node is recursive .
4846	ToMap converts the tree to a map .
4847	check ip address
4848	read uint32
4849	readuint128 reads a uint32 from the file .
4850	load an IP2Location record
4851	Prints an IP2Location record .
4852	Main runs the main program .
4853	SaveToPdfFile writes a PDF file to a file .
4854	CubicCurveTo adds a curve to the path
4855	ArcTo implements the PathTo interface .
4856	String returns a string representation of the path .
4857	VertipFlip returns a copy of the path .
4858	NewGlyphCache creates a new GlyphCacheImp .
4859	Fetch fetches a glyph and returns it .
4860	renderGly renders a glyph .
4861	Copy returns a copy of Glyph .
4862	Fill implements Glyph .
4863	Main function for main draw
4864	Draw panics on the draw2 .
4865	Paints the given spans .
4866	SetColor sets the color of the Painter .
4867	NewPainter creates a new Painter .
4868	GetStringBounds returns the bounds of a string .
4869	calc recalculates the font size
4870	SetFont sets the font .
4871	ClearRect clears the specified rectangle .
4872	drawString draws a string from a string
4873	newGroup creates a new group .
4874	newMask creates a new mask
4875	embedSVGFont embeds the given text .
4876	TraceQuad converts quadr to a line .
4877	GetFontName returns the font name .
4878	NewStackGraphicContext creates a new StackGraphicContext
4879	NewFolderFontCache returns a new FolderFontCache instance
4880	NewSyncFolderCache returns a new SyncFolderCache instance
4881	Main runs the main image .
4882	NewPdf creates a new PDF .
4883	clearRect clears a rectangle
4884	NewGraphicContext returns a new GraphicContext .
4885	Clear clears the canvas .
4886	GetStringBounds returns the width of the given string .
4887	CreateStringPath returns the width of a string .
4888	FillStringAt draws a string at the given position .
4889	SetStrokeColor sets the stroke color .
4890	SetFillColor sets the fill color .
4891	SetLineDash sets the line dash
4892	SetLineWidth sets the line width
4893	Main runs the main program .
4894	Draw draws the given text .
4895	SaveToPngFile saves the image to PNG file .
4896	LoadFromPngFile loads image from png file .
4897	Resource returns a string representation of the resource
4898	Output returns a string representation of the file .
4899	Main is the main function for the main image .
4900	Draw panics .
4901	Main runs the main program .
4902	 Bubble Bubble
4903	Dash returns a dash .
4904	CubicCurve creates a Cubic curve .
4905	FillStroke fills the stroke with the given width .
4906	FillStyle fills the image with the given width and height .
4907	PathTransform applies a path to the given coordinates .
4908	Star draws the image at the given coordinates .
4909	Draw draws the given width and height .
4910	ConvertPath converts path to PDF
4911	Main runs the main function .
4912	Draw draws a new line using the given shape .
4913	DrawContour draws a contour to a path .
4914	Flatten applies the given path to the given path .
4915	Clear clears the image .
4916	ClearRect clears a rectangle .
4917	DrawImage draws an image from the given image .
4918	Main is the main function for Draw .
4919	Draw draws a PNG image .
4920	Draw draws the canvas at the given location .
4921	ChecksumString32 returns the checksum of the given string .
4922	ChecksumString64 returns the checksum of a string .
4923	NewS32 creates a new XXHash32 .
4924	NewS64 returns a new XXHash64 .
4925	round64 rounds a 64 - bit integer .
4926	Checksum32S checksum of the input .
4927	Checksum64 returns the number of bytes in bytes .
4928	getStage returns the current stage
4929	New returns a new Glog .
4930	Get returns a new Glog instance
4931	SetMode sets the mode of the logger .
4932	SetPrefix sets the prefixed prefix .
4933	GetCurrentMode returns the current mode of the current logger .
4934	InitWriter initializes the logger .
4935	SetWriter sets the writer to the logger .
4936	SetLevelColor sets the color for the given level .
4937	SetLevelWriter sets the writer to the logger .
4938	AddStd adds a logger to the logger .
4939	EnableColor enables the logger .
4940	EnableLevelColor sets the color of the logger .
4941	DisableLevelColor sets the color of the logger .
4942	RawString converts data into a string
4943	TagStringToLevel returns the level of the given tag .
4944	Println prints the given value .
4945	Fatal prints a fatal error .
4946	Fatalf logs a FATAL message .
4947	isModeEnable returns true if the current mode is enabled
4948	CaptureMetrics is a convenience function to capture metrics .
4949	get returns the value at the given position .
4950	Save writes data to disk .
4951	SaveToFile writes data to file .
4952	Load loads data from input stream .
4953	LoadFromFile loads data from a file .
4954	Key returns the key for the given id .
4955	Value returns the value of the given id .
4956	Delete deletes a node .
4957	Set sets the Version field s value .
4958	Compare implements the Version interface .
4959	Slice returns a slice of integers .
4960	BumpMajor increments the major version of the version .
4961	BumpMinor increments the minor version of the version .
4962	BumpPatch updates the version of the version .
4963	validateIdentifier validates an identifier
4964	newStream returns a new instance of Stream
4965	addSubscriber adds a subscriber to the stream
4966	New creates a new Server .
4967	Close closes the server .
4968	CreateStream creates a new Stream
4969	RemoveStream removes a stream from the server
4970	StreamExists returns true if the server exists .
4971	Publish sends an event to the server
4972	NewClient creates a new client
4973	Subscribe to a given stream .
4974	SubscribeChan sends a channel to the channel
4975	SubscribeRaw registers a new event handler .
4976	Unsubscribe removes a channel from the client
4977	NewEventStreamReader returns a new EventStreamReader .
4978	ReadEvent reads an event from the stream .
4979	HTTPHandler handles HTTP requests .
4980	Add adds an event to the log .
4981	Replay implements the EventLog interface .
4982	readKey reads a private key from a path .
4983	writeKey writes a private key to a file .
4984	anyKey returns a signed key .
4985	sameDir returns the file path to the given filename
4986	printAccount prints the account
4987	tmpl renders a template
4988	printUsage prints the usage of the command .
4989	FromRequest returns the IP address from the request .
4990	Do implements the ClearParams interface .
4991	Do implements the DisableParams interface .
4992	DoRemoveDOMItem removes DOMStorageItemItem from the DOM .
4993	DoDOMStorageItem implements the SetDOMStorageItem interface .
4994	Do executes the DeliverPushMessage .
4995	Do sync sync sync event
4996	Do implements the InspectWorker interface .
4997	SetForceUpdateOnPageLoad sets the ForceUpdateOnPageLoad field s value .
4998	Do implements the SkipWaitingParams interface .
4999	Do implements the StartWorker interface .
5000	StopAllWorkers runs the StopAllWorkers API .
5001	Do a stop worker
5002	Do the unregister params
5003	Do update registration params
5004	Do implements the BindParams interface .
5005	Do the unbind params
5006	Error returns the error message .
5007	Do the release animations .
5008	Do the SeekAnimations params
5009	DoPauses the setPaused params
5010	DoPlaybackRate sets the PlaybackRateRateRate field s value .
5011	DoTiming executes the SetTimingParams .
5012	DoPrepareForLeakDetection sets the PrepareForLeakDetectionDetectionDetectionDetectionDetection parameter .
5013	DociblyPurges the java script .
5014	SetPressureNotificationsSuppressesSuppressedSuppressedSuppressed returns an error .
5015	Do simulatePressureNotificationNotification method
5016	WithSamplingInterval sets the SamplingInterval field s value .
5017	WithSuppressRandomness sets the SuppressRandomness field s value .
5018	Do starts the StartSamplingParams .
5019	Do the stopSampling params
5020	ClearDeviceOrientationOverride overrides the default settings override .
5021	SetDeviceOrientationOverrideOverride sets the device orientation override .
5022	DoStartViolationsReport returns an error .
5023	DoStopViolationsReport returns an error .
5024	String returns the string representation of the Modifier .
5025	WithNodeID sets the NodeID field s value .
5026	WithBackendNodeID sets the BackendNodeID field s value .
5027	WithObjectID sets the ObjectID field s value .
5028	WithFetchRelatives sets the FetchRelatives field s value .
5029	DoTimeDomain executes the SetTimeDomainParams .
5030	WithClipRect sets the clipRect field s value .
5031	Do executes the release snapshot .
5032	DoClearObjectStore executes the ClearObjectStore .
5033	Do the delete database .
5034	Do the DeleteObjectStoreEntries operation .
5035	WithKeyRange sets the KeyRange field s value .
5036	DoSamplingInterval implements the SetSamplingInterval interface .
5037	Do the start params
5038	WithCallCount sets the CallCount field s value .
5039	WithDetailed adds detailed detail to the StartPreciseCoverage params
5040	DoPreciseCoverage runs the StartPreciseCoverageParams .
5041	Do the StartTypeProfileProfile params
5042	DoPreciseCoverage runs the StopPreciseCoverageParams operation .
5043	StopTypeProfile executes the StopTypeProfileProfileParams .
5044	SetIgnoreCertificateErrors runs the SetIgnoreCertificateErrors operation .
5045	DoInspectedHeapObject implements the Command interface .
5046	Do garbage collection
5047	WithSamplingInterval sets the SamplingInterval field s value .
5048	StartTrackingHeapObjects runs the StartTrackingHapObjects operation .
5049	WithReportProgress sets the ReportProgress field s value .
5050	StopTrackingHeapObjects runs the StopTrackingHapObjects operation .
5051	WithReportProgress sets the ReportProgress field s value .
5052	DoHeapSnapshot takes a context and returns an error .
5053	WithBrowserContextID sets the BrowserContextID field s value .
5054	Do the grant permissions .
5055	WithBrowserContextID sets the BrowserContextID field s value .
5056	Do resetPermissions params
5057	Do the crash params
5058	Do the crash process .
5059	WithQuery adds the query to the get histograms params
5060	WithTargetID sets the TargetID field s value .
5061	DoSetWindowBounds sets the WindowBounds field s value .
5062	WithImage adds the image to the setDockTile params
5063	DoDockTile params
5064	Do the delete cache .
5065	Do the DeleteEntry params
5066	WithPathFilter sets the PathFilter field s value .
5067	DoDiscardResults executes the Discard search results .
5068	Do the focus params
5069	DoUndoableState performs the markdown state .
5070	WithIncludeUserAgentShadowDOM sets the IncludeUserAgentShadowShadowDOM field s value .
5071	Do executes RedoParams .
5072	Do the RemoveAttributeParams object
5073	Do the removeNodeParams
5074	DoChildNodes executes the request .
5075	WithNodeID sets the NodeID field s value .
5076	WithBackendNodeID sets the BackendNodeID field s value .
5077	WithExecutionContextID sets the ExecutionContextID field s value .
5078	DoSetAttributeValue is the same as SetAttributeValue .
5079	WithName adds the name to the set attributes .
5080	SetAttributesAsText sets the SetAttributesAsText field s value .
5081	DoFileInputFiles executes the SetFileInputFilesParams .
5082	DoInspectedNode executes the SetInspectedNodeParams .
5083	Do sets the node value .
5084	DoOuterHTML implements the SetOuter interface .
5085	Do executes the undo command .
5086	Do the forcePseStateParams command .
5087	SetEffectivePropertyValueForNode sets the effective property value for a node .
5088	DoStartUsageTracking sets the StartRuleUsageTrackingTrackingTracking tracking .
5089	Do the close params
5090	DoClearDataForOrigin returns the clear data for the origin .
5091	TrackCacheStorageForOriginForOrigin returns an error if it s non - nil .
5092	TrackIndexedForOriginForOriginForOrigin returns an error .
5093	UntrackCacheStorageForOriginForOriginForOriginForOrigin returns an error .
5094	UntrackIndexedDBForOriginForOriginForOriginOrigin returns an error .
5095	DoHideHighlight sets the HideHighlightParams field s value .
5096	Do the highlight frame .
5097	WithNodeID sets the NodeID field s value .
5098	WithBackendNodeID sets the BacklightNodeID field s value .
5099	WithObjectID sets the ObjectID field s value .
5100	WithSelector adds the selector to the highlight node params
5101	Do the highlight node .
5102	Do the HighlightQuadParams command .
5103	DoHighlightRect implements the ParlightRect interface .
5104	WithHighlightConfig sets the HighlightConfig field s value .
5105	DoInspectMode implements the SetInspectMode interface .
5106	SetShowAdHighlights sets the ShowAdlightsParams field s value .
5107	SetPausedInProgress sets the MessagePausedMessage field s value .
5108	SetPausedInDebuggerMessage mocks base method
5109	SetShowDebugBordersBorders returns an error .
5110	DoShowFPSCounter implements the SetFPSCounter interface .
5111	SetShowPaintRects sets the DisplayPaintRects field s value .
5112	SetShowScrollBottleneckRectsRects returns an error .
5113	SetShowHitBordersBordersBorders returns an error .
5114	SetShowViewportSizeOnResizes the show viewport size on the screen .
5115	DoClearBrowserCache executes the clear browser cache .
5116	DoClearBrowserCookies sends a clear browser cookies .
5117	WithErrorReason sets the ErrorReason field s value .
5118	WithRawResponse sets the RawResponse field s value .
5119	WithURL adds the URL to the request params
5120	WithMethod adds the method to the ContinueInterceptedRequest params
5121	WithPostData sets the PostData field s value .
5122	WithHeaders sets the Headers field s value .
5123	WithAuthChallengeResponse sets the AuthChallengeResponse field s value .
5124	DoInterceptedRequest executes the ContinueInterceptedRequest .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain sets the Domain field s value .
5127	WithPath adds the path to the delete cookies params
5128	Do the DeleteCookies params
5129	WithConnectionType sets the ConnectionType field s value .
5130	Do the EmulateNetworkConditions params
5131	Do the enable params
5132	WithUrls sets the Urls field s value .
5133	Do executes the replay request .
5134	DoBlockedURLPams implements the SetBlockedURL interface .
5135	DoBypassServiceWorkerWorker implements the SetBypassServiceWorker interface .
5136	DoCacheDisabled sets the CacheDisabled field s value .
5137	WithURL adds the URL to the SetCookieParams instance
5138	WithDomain sets the Domain field s value .
5139	WithPath adds the path to the set cookie params
5140	WithSecure sets the SecureCookie field s value .
5141	WithHTTPOnly sets the HTTPOnly field s value .
5142	WithSameSite sets the SameSite field s value .
5143	WithExpires sets the Expires field s value .
5144	Do set cookies
5145	SetDataSizeLimitsForTest tests for testing .
5146	DoExtraHTTPHeaders implements the SetExtraHTTPHeaders interface .
5147	DoRequestInterception implements the SetRequestInterception interface .
5148	DoClearDeviceMetricsOverride implements the ClearDeviceMetricsOverride interface .
5149	DoClearGeolocationOverride sets the ClearGeolocationOverrideOverrideOverride field s value .
5150	Perform the reset page scale factor .
5151	SetFocusEmulationEnabled sets the FocusEmulationEnabledEnabledEnabled field s value .
5152	SetCPUThrottlingRateRate sets the CPUThrottlingRateRateRateRateRate rate .
5153	WithColorOverride overrides the default BackgroundBackgroundColorOverride override .
5154	SetDefaultBackgroundColorOverrideOverride sets the default background color override .
5155	WithScale sets the ScaleMetricsOverride field s value .
5156	WithDontSetVisibleSize sets the dontSetVisibleSize field s value .
5157	WithScreenOrientation sets the ScreenOrientation field s value .
5158	DoDeviceMetricsOverride implements the SetDeviceMetricsOverride interface .
5159	DoScrollbarsHiddenHidden hides the scrollbars .
5160	SetDocumentCookieDisabled disables the session .
5161	SetEmitTouchEventsForMouse events for mouse events .
5162	DoEmulatedMedia params
5163	WithLatitude sets the LatitudeOverride field s value .
5164	WithLongitude sets the LongitudeOverride field s value .
5165	WithAccuracy adds the accuracy to the set of accuracy .
5166	DoGeolocationOverride implements the SetGeolocationOverride interface .
5167	DoPageScaleFactor sets the PageScaleFactorFactor field s value .
5168	SetScriptExecutionDisabled sets the ScriptExecutionDisabledDisabled field s value .
5169	WithMaxTouchPoints sets the MaxTouchPoints field s value .
5170	SetTouchEmulationEnabled sets the TouchEmulationEnabledEnabledEnabled field s value .
5171	WithBudget sets the budget field s value .
5172	WithMaxVirtualTimeTaskStarvationCount sets the MaxVirtualTimeTaskStarCount field s value .
5173	WithWaitForNavigation sets the WaitForNavigation field s value .
5174	WithAcceptLanguage sets the AcceptLanguageOverride field s value .
5175	WithPlatform adds the platform to the set user agent override .
5176	SetUserAgentOverrideOverride implements the SetUserAgentOverride interface .
5177	Do the dispatch key event .
5178	DoInsertText executes the InsertTextParams .
5179	WithButtons sets the buttons field s value .
5180	DoDispatchMouseEvent executes the dispatch command .
5181	DoTouchEvent executes the dispatch command .
5182	EmulateTouchFromMouseEvent params
5183	DoIgnoreInputEvents executes the SetIgnoreInputEvents command .
5184	Do the SynthesizePinchGinchGestGestureParams instance
5185	WithXOverscroll sets the XOverscroll field s value .
5186	WithYverscroll sets the YOverscroll field s value .
5187	DoSynthesizeScrollGesture returns an error .
5188	Do the SynthesizeTapGestureParams instance
5189	Domain returns the domain name
5190	WithDepth adds the depth to the get event listeners params
5191	DoRemoveDOMBreakpoint removes the DOM breakpoint .
5192	WithTargetListener sets the TargetListenerName field s value .
5193	DoEventListener is part of the RemoveEventListener interface .
5194	RemoveInstrumentationBreakpoint returns an error .
5195	DoXHRBreakpoint executes the RemoveXHRBreakpointParams .
5196	SetDOMBreakpoint sets the DOM breakpoint params
5197	DoEventListener executes the SetEventListener .
5198	SetInstrumentationBreakpoint executes the SetInstrumentationBreakpointParams .
5199	DoXHRBreakpoint executes the SetXHRBreakpointParams .
5200	WithExecutor returns a context with the given executor .
5201	Execute implements the Executor interface .
5202	AttributeValue returns the value of the named attribute .
5203	xpath returns the XPath for the node .
5204	String returns the string representation of the NodeType .
5205	SetSinkToUse sets the SinkToUse field s value .
5206	DoTabMirroring runs the StartTabMirroring operation .
5207	StopCasting params
5208	Do starts the StartObservingParams .
5209	DoObservingParams executes the StopObservingParams .
5210	Do the SetRecording params
5211	DoClearEvents executes the ClearEventsParams .
5212	WithObjectID sets the ObjectID field s value .
5213	WithArguments sets the Arguments field s value .
5214	WithExecutionContextID sets the ExecutionContextID field s value .
5215	WithObjectGroup sets the ObjectGroup field s value .
5216	DoDiscardEntries is part of the command .
5217	WithContextID sets the ContextID field s value .
5218	WithOwnProperties sets theOwnProperties field s value .
5219	WithGeneratePreview sets the GeneratePreview field s value .
5220	WithExecutionContextID sets the ExecutionContextID field s value .
5221	WithObjectGroup sets the ObjectGroup field s value .
5222	Do executes the release .
5223	Do the release object .
5224	DoIfWaitingForDebugger implements the RunIfWaitingForDebugger interface .
5225	SetCustomObjectFormatterEnabled sets the CustomObjectFormatterEnabled field s value .
5226	SetMaxCallStackSizeToCaptureSizeToCapture sets the MaxCallStackSizeToCapture field s value .
5227	Do the TerminateExecution params
5228	Do addBinding params
5229	Do the removeBinding params
5230	Do implements the EndParams interface .
5231	DoClockSyncMarker marks the clock sync marker .
5232	WithBufferUsageReportingInterval sets the BufferUsageInterval field s value .
5233	WithNoDisplayUpdates sets the NoDisplayUpdates field s value .
5234	WithScreenshot sets the screenshot params
5235	DoToFront returns the BringToFrontParams instance
5236	WithClip sets the clip params
5237	WithFromSurface sets the FromSurface field s value .
5238	WithWorldName sets the WorldName field s value .
5239	WithGrantUniveralAccess sets the GrantUniveralAccess field s value .
5240	ResetNavigationHistory performs the ResetNavigationHistory API .
5241	WithPromptText sets the PromptText field s value .
5242	DoJavaScriptDialog executes the HandleJavaScriptDialog .
5243	WithReferrer sets the Referrer field s value .
5244	WithTransitionType sets the TransitionType field s value .
5245	WithFrameID sets the FrameID field s value .
5246	DoNavigateToHistoryEntry returns a copy of the navigation entry .
5247	WithLandscape sets the Landscape field s value .
5248	WithDisplayHeaderFooter sets the DisplayHeaderFooter field s value .
5249	WithPrintBackground sets the PrintBackground field s value .
5250	WithScale adds the scale to the print parameters .
5251	WithPaperWidth sets the PaperWidth field s value .
5252	WithPaperHeight sets the PaperHeight field s value .
5253	WithIgnoreInvalidPageRanges sets the IgnoreInvalidPageRanges field s value .
5254	WithFooterTemplate sets the footerTemplate field s value .
5255	WithPreferenceSize sets the PreferCSageSize field s value .
5256	WithScriptToEvaluateOnLoad sets the ScriptToLoad field s value .
5257	Do executes the reload command .
5258	DoRemoveScriptToEvaluates the RemoveScriptToEvaluateOnNewDocument .
5259	Do the screencastFrameAckFrameAck command
5260	SetAdBlockingEnabledEnabled sets the AdBlockingEnabledEnabledEnabled field s value .
5261	DoBypassCSP params
5262	SetFontFamilies sets the FontFamilies field s value .
5263	SetFontSizes sets the font sizes .
5264	DoDocumentContent sets the document content .
5265	WithDownloadPath sets the DownloadPath field s value .
5266	DoSetDownloadBehavior implements the SetDownloadBehavior interface .
5267	SetLifecycleEventsEnabledEnabled enables the set of listeners enabled .
5268	WithFormat sets the Format field s value .
5269	WithMaxWidth sets the MaxWidth field s value .
5270	WithMaxHeight sets the MaxHeight field s value .
5271	WithEveryNthFrame sets the TotalNthFrame field s value .
5272	DoScreencast runs the StartScreencastParams command .
5273	DoLoad executes the StopLoadingParams .
5274	SetWebLifecycleState sets the WebLifecycleStateState field s value .
5275	Stop screencast params
5276	SetProduceCompilationCacheCache executes a SetCompilationCacheCache .
5277	DoCompilationCache implements the AddCompilationCache interface .
5278	Do the clearCompilationCache params
5279	WithGroup adds the group to the test report .
5280	Do implements the WaitForDebugger interface .
5281	Do the ActivateTarget params
5282	WithBindingName sets the BindingName field s value .
5283	Do the ExposeDevToolsProtocol protocol
5284	WithBrowserContextID sets the BrowserContextID field s value .
5285	WithSessionID sets the SessionID field s value .
5286	Do the DetachFromTarget target .
5287	DoDisposeBrowserContext executes the Dispose browser .
5288	WithSessionID sets the SessionID field s value .
5289	SendMessageToTarget sets the SendMessageToTarget field s value .
5290	DoAutoAttach executes the SetAutoAttachParams .
5291	SetDiscoverTargets sets the DiscoverTargets field s value .
5292	DoRemoteLocations implements the SetRemoteLocations interface .
5293	WithPatterns adds the patterns to the enable params
5294	WithHandleAuthRequests sets the HandleAuthRequests field s value .
5295	Do executes the fail request .
5296	WithBody adds the body to the request params
5297	WithResponsePhrase sets the ResponsePhrase field s value .
5298	Do executes the request .
5299	WithURL adds the URL to the request params
5300	WithMethod sets the Method field s value .
5301	WithPostData sets the PostData field s value .
5302	WithHeaders adds the headers to the request params
5303	Do the ContinueRequest params
5304	Do the ContinueWithAuth params
5305	Do the ContinueToLocation params
5306	WithIncludeCommandLineAPI sets the IncludeCommandLineAPI field s value .
5307	Do executes the PauseParams .
5308	DoPauseOnAsyncCall executes a PauseOnAsyncCall .
5309	DoRemove breaks the breakpoint params
5310	Do implements the ResumeParams interface .
5311	DoAsyncCallDepthDepth is a helper function to execute async call .
5312	SetBlackboxPatterns sets the BlackboxPatternsPatterns field s value .
5313	SetBlackboxedRanges sets the BlackboxedRanges field s value .
5314	WithURL adds the URL to the set breakpointByURL params
5315	WithURLRegex sets the URLRegex field s value .
5316	WithScriptHash sets the ScriptHash field s value .
5317	WithColumnNumber sets the ColumnNumber field s value .
5318	WithCondition adds the condition to the setBreakpointCall params
5319	DoBreakpointsActive executes the set of breakpoints active .
5320	SetPauseOnExceptions implements the SetPauseOnExceptions interface .
5321	DoSetReturnValue implements the SetReturnValue interface .
5322	WithDryRun sets the DryRun field s value .
5323	DoSkipAllPauses implements the SetSkipAllPauses interface .
5324	Do the set variable value .
5325	WithBreakOnAsyncCall sets the breakOnAsyncCall field s value .
5326	Do implements the StepInto interface .
5327	Do implements the StepOutParams interface .
5328	Do implements the StepOverParams interface .
5329	Listen implements the notify interface .
5330	ListenClose registers a listener for a network .
5331	Connected implements the NetworkBundle interface .
5332	Disconnected is called when a connection is disconnected .
5333	OpenedStream implements the NotificationBundle interface .
5334	CloseStream is called when a network is closed .
5335	WithNoDial adds a reason to the context .
5336	GetNoDial returns true if the context is not dialed .
5337	WithDialPeerTimeout sets the dial peer timeout .
5338	Open opens a connection .
5339	Prevpos returns the prev position of the buffer .
5340	Last returns the last item in the buffer .
5341	DeleteMostRecentBytes deletes the given number of bytes .
5342	NewFloat64RingBufBuf returns a new Float64BufBufBufBufBufBuf .
5343	TwoContig returns two float values .
5344	Earliest returns the earliest element of the buffer .
5345	Values returns a slice of float64 values .
5346	NewAtomicFixedSizeBufBufBufBufBuf returns a new AtomicFixedSizeBufBufBufBufBufBufBufBufBufBufBufBuf .
5347	Reset resets the buffer buffer .
5348	NewPointerRingBufBufBufBufBuf returns a new PointerRingBufBufBufBufBufBufBufBufBufBufBufBufBufBufBufBufBuf .
5349	TwoContig returns two slices .
5350	NumPage returns the number of pages .
5351	Font returns the font with the given name .
5352	Width returns the width of the font .
5353	Encoder returns the text encoding of the font .
5354	Interpret the given string .
5355	Open opens a file .
5356	NewReader returns a new Reader .
5357	NewReaderEncrypted implements io . ReaderEncrypted interface .
5358	 Trailer .
5359	Kind returns the type of the value .
5360	newBuffer returns a new buffer .
5361	Paginate returns a paginationInfo .
5362	CascadeDelete deletes a document .
5363	cascadeDeleteWithConfig is used to cascade the cascade operation .
5364	cascadeSaveWithConfig is used to cascade changes to a document
5365	MapFromCascadeProperties converts a list of properties to a map .
5366	Connect attempts to connect to the database .
5367	lower initializes a string with lower case .
5368	Find returns a ResultSet .
5369	RawInformationQuery sends a query to the server .
5370	NewClient creates a new client
5371	Close closes the connection .
5372	startTLSIfRequired is used to start the stream .
5373	startStream starts the stream .
5374	IsEncrypted returns true if the client is encrypted .
5375	Recv returns a chat .
5376	Send a chat .
5377	SendOrg sends an org
5378	SendKeepAlive sends a connection to the server .
5379	SendHtml sends a chat message .
5380	nextStart returns the next start element
5381	JoinProtectedMUC is used to connect a user to a member .
5382	LeaveMUC removes a MUC from the server
5383	AttachBuffer adds a buffer to the message .
5384	Attach attaches a file to the message .
5385	Inline adds a file to the message .
5386	AddHeader adds a new header
5387	Takes a message and returns the list of recipients .
5388	Bytes returns a representation of the message .
5389	Send sends a message to the given address .
5390	GetHeader returns the header value .
5391	GetHeaderValues returns a slice of header values for the given name .
5392	SetHeader adds a header to the envelope .
5393	AddHeader adds a header to the envelope .
5394	DeleteHeader deletes a header .
5395	AddressList returns a list of addresses from the envelope .
5396	Clone returns a new Envelope .
5397	ReadEnvelope reads an Envelope from an io . Reader .
5398	EnvelopeFromPart creates an Envelope from a part .
5399	parseTextOnlyBody parses the content of the body .
5400	Parse multipart body .
5401	matchHTMLBodyPart returns true if the given part is a HTML body part .
5402	ensureCommaDelimitedAddresses returns a comma separated string .
5403	Date sets the date .
5404	From sets the From field s address .
5405	Subject sets the subject .
5406	To adds a new address to the mail builder .
5407	ToAddrs sets the ToAddrs field s value .
5408	CC adds a CC to the mail builder .
5409	CCAddrs sets the CCAddrs field s value .
5410	ReplyTo sets the reply to the given address .
5411	Header adds a header .
5412	AddAttachment adds an attachment to the mail builder .
5413	AddFileAttachment adds a file to the mail builder .
5414	AddInline adds a part to the mail builder .
5415	Equals returns true if the MailBuilder is equal .
5416	Encode writes the part of the part .
5417	encodeHeader encodes the header into a buffer .
5418	encodeContent encodes the content into a buffer .
5419	selectTransferEncoding returns the transfer encoding for the given content .
5420	setParamValue sets the value for a given key .
5421	NewBase64Cleaner returns a new Base64Cleaner .
5422	decodeToUTF8BaseHeader decodes the input string into a base64 encoded string .
5423	Parse media type .
5424	fixMangledMediaType converts mtype to mime type
5425	Detect multipart message .
5426	Detect binary body .
5427	breadthMatchFirst returns the first part of the first part of the first part of the part .
5428	B BreadthMatchAll returns a list of parts that match the given matcher .
5429	DepthMatchFirst returns the first part of the first part of the first part of the part .
5430	DepthMatchAll returns a list of parts that match the given matcher .
5431	ToASCII converts a string to ASCII .
5432	NewPart creates a new part .
5433	AddChild adds a child to the parent .
5434	TextContent returns true if the part is a text content type .
5435	setupHeaders parses the header and sets the content header .
5436	setup content headers
5437	convertFromDetectedCharset is a helper function that converts the content into a reader .
5438	Clone returns a copy of this Part .
5439	ReadParts reads a part from the given io . Reader .
5440	parseParts parses the parts of a part of the part .
5441	UUID generates a random UUID
5442	NewQPCleaner creates a new QPCleaner .
5443	Error returns the error message .
5444	addError adds an error to the part .
5445	addWarning adds a warning .
5446	Wrap returns a slice of strings .
5447	ConvertToUTF8String converts text to UTF8 string .
5448	JoinAddress joins a list of addresses .
5449	Printf implements the Markdown interface .
5450	EnvelopeToMarkdown converts an envelope to Markdown .
5451	FormatPart formats a part of an enmime .
5452	newBoundaryReader creates a new boundary reader .
5453	Read reads the boundary from the buffer .
5454	Next implements io . ReaderReader .
5455	Parse parses a string into an object .
5456	Assign assigns a value to a symbol .
5457	NewRClient creates a new RClient
5458	NewRClientWithAuth creates a new RClient with the given username and password .
5459	Register registers a custom generator .
5460	Fuzz fuzzer .
5461	findFakeFunctionFor returns the fake function for the given function .
5462	Apply applies the given options .
5463	ToOption converts options to an option
5464	waitThenClose closes the channel channel .
5465	send sends an event to the channel channel .
5466	NewMovingAverage returns a new MovingAverage
5467	Set sets the variable value .
5468	calculateKeys50 returns a slice of keys for the given password
5469	getKeys returns all the keys in the archive
5470	checkPassword checks if the password is valid .
5471	parseFileEncryptionRecord parses a file encryption record .
5472	parseEncryptionBlock parses the encrypted encryption block .
5473	newArchiveReader returns a new FileBlockReader .
5474	Read implements io . ReaderReader .
5475	ReadByte implements io . ReaderReader .
5476	newCipherBlockReader returns a new cipher block .
5477	newAesDecryptReader returns a new cipher block .
5478	limitByteReader returns a new limited byte reader .
5479	Mode returns the mode of the file header .
5480	nextBlockInFile returns the next block in the file .
5481	next returns the next block header .
5482	Read implements io . ReaderReader .
5483	Read implements io . Reader
5484	Next implements io . ReaderReader .
5485	NewReader returns a new Reader .
5486	OpenReader returns a ReadCloser .
5487	getV3Filter returns a v3 filter .
5488	init initializes the decoder .
5489	readBlockHeader reads a block header .
5490	readCodeLengthTable reads the code length of the code table .
5491	 shrink the state of the current state .
5492	expandStates returns a slice of states .
5493	pushByte adds a byte to the heap
5494	nextByte returns the successor of the given index .
5495	nextContext returns a new context for the given index .
5496	calculateAes30Params computes the AES - 32 - bit hash for the given password .
5497	parseDosTime parses a Unix time . Time .
5498	decodeName decodes the name from buf .
5499	readExtTimes reads the extensions from the file .
5500	readBlockHeader reads a block header .
5501	newArchive15 creates a new archive .
5502	readFilter5Data reads a filter from a bitstream .
5503	writeByte writes a byte to the window .
5504	copyBytes copies bytes from the window .
5505	read reads from the window
5506	queueFilter adds a filter to the buffer .
5507	processFilters processes the filters .
5508	fill fills all filters in the decoder .
5509	Read implements the DecodeReader interface .
5510	readFull implements io . Reader interface .
5511	findSig finds the signature for a file .
5512	execute executes a command
5513	newVM returns a new VM .
5514	limitBitReader returns a bitReader that wraps the given bitReader .
5515	readUint32 reads a uint32 from r .
5516	step3 step step
5517	Stem stem word
5518	step6 returns true if the given snowball word is a letter .
5519	step5 moves the snowball word in the snowball word .
5520	step2a step 2
5521	step44word checks if the snowball word is valid
5522	Stem turns a word into a string .
5523	step1C1 returns true if the snowball word is a snowball word .
5524	step3 - step step step
5525	isStopWord returns true if the given word is stop word .
5526	capitalizeYUI takes a word and turns it into a word .
5527	step22 word2 .
5528	step3 step step
5529	step0 moves the snowball word to the snowball word .
5530	VnvSuffix returns the word suffix for the given word .
5531	step1 - 1 step 1
5532	step2a step 2
5533	removePerfectiveEndingEndingEnding removes the suffix of the snowball .
5534	removeAdjectivalEndingEndingEnding ends with the given word .
5535	step2b2b is a helper for step2b .
5536	step44Strip runs a step in a snowball way
5537	step5 - 1 step step
5538	Stem stem word
5539	Stem stem word
5540	isStopWord returns true if word is stop word
5541	isStopWord returns true if word is stop word .
5542	New creates a Snowball word
5543	RemoveLastNRunes removes the last Nunes word .
5544	resetR1R2 sets the R1 field s value .
5545	slice returns a slice of runes
5546	FitsInR1 returns true if the R1 word is in R1 .
5547	FitsInR2 returns true if the R2 word is in r2 .
5548	FitsInRV returns true if the word is in r .
5549	FirstPrefix returns the first prefix of the word .
5550	HasSuffixRunes returns true if the word is a suffix of the Snowball word .
5551	FirstSuffixIfIn returns the first suffix of the Snowball word .
5552	RemoveFirstSuffixIf is part of the SnowballWord .
5553	RemoveFirstSuffix removes the first suffix from the Snowball word .
5554	FirstSuffix returns the first suffix of the word .
5555	preprocess preprocesses a snowball word
5556	step0 returns true if the word is in the snowball .
5557	step1b1b is a helper for step1 .
5558	step2b2b is a helper for step2b
5559	capitalizeYs returns the number of capitalizations .
5560	UnapitalizeYs takes a word and turns it into a word .
5561	stemSpecialWord converts a word to a stemmed word
5562	isShortWord returns true if the word is a short word .
5563	step1alpha1 is a helper function to perform a step1 .
5564	Set sets the value of a key .
5565	Get returns the value of the given key .
5566	Cleanup removes all goroutine IDs from the goroutine .
5567	getValues returns the values for the current goroutine .
5568	linkGRs adds the parent data to the parent .
5569	unlinkGRs is used to unlink goroutine
5570	AppUri returns the URI for the given app name .
5571	CurlAppWithTimeout returns a string with the given arguments .
5572	CurlApp is a wrapper for CurlApp
5573	CurlAppRoot returns the URL for the given app name .
5574	GetTags returns the tags of the given string .
5575	GetTagsAsUniqueStrings returns a slice of strings .
5576	isTerminator returns true if the character is a terminator .
5577	uniquify returns a slice of strings .
5578	New returns a new HandlerFunc .
5579	Get returns the url from the context .
5580	GenerateRSAKeyPair creates a new RSA key pair .
5581	Verify checks if the given data is valid .
5582	Encrypt implements the RSA PublicKey interface .
5583	Sign signs a message .
5584	GetPublic returns the public key .
5585	Decrypt decrypts a private key .
5586	UnmarshalRsaPrivateKey parses an RSA private key .
5587	GenerateKeyPair creates a new private key pair .
5588	GenerateKeyPairWithReader returns a KeyPair with the given type .
5589	GenerateEKeyPair creates a new private key pair .
5590	UnmarshalPublicKey unmarshals a public key .
5591	MarshalPublicKey marshals a public key .
5592	UnmarshalPrivateKey unmarshals a private key .
5593	MarshalPrivateKey marshals a private key .
5594	KeyEqual returns true if two keys are equal .
5595	GenerateECDSAKeyPair creates a new private key pair pair from an io . Reader .
5596	GenerateECDSAKeyPairWithCurve creates a new ECDS key pair with the given curve .
5597	ECDSAKeyPairFromKey creates a new EC2KeyPair from a private key .
5598	UnmarshalECPrivateKey parses an ECDSAP private key .
5599	UnmarshalECublicKey parses an ECDSAP public key .
5600	Equals returns true if the given key is equal .
5601	Sign signs the given data .
5602	Equals returns true if the given key is equal .
5603	Verify checks if the given data is valid .
5604	GenerateSecp256Key creates a new secp256k256Key from the given io . Reader .
5605	UnmarshalSec256Key extracts a Secp256Key from a byte slice .
5606	UnmarshalSec256PublicKey extracts a Secp256PublicKey from a byte slice .
5607	Equals returns true if the given key is equal .
5608	Sign signs the given data .
5609	Equals returns true if the given key is equal .
5610	Verify checks if the given data is valid .
5611	Raw returns a copy of the private key .
5612	Sign signs a message .
5613	Equals returns true if the given key is equal .
5614	Verify implements Ed25519 PublicKey .
5615	UnmarshalEd25519PublicKey returns a Pub25519 public key .
5616	UnmarshalEd25519 creates a new Ed25519 private key .
5617	EditScriptForStrings returns the edit script for the given source .
5618	EditScriptForMatrix returns a new editScript for the given matrix .
5619	WriteMatrix writes a matrix to a writer .
5620	New creates a new Lockfile .
5621	GetOwner returns the owner of the lockfile .
5622	TryLock attempts to lock the lockfile .
5623	Unlock unlocks the lockfile
5624	NewBase creates a new base logger .
5625	SetFallbackLogger sets the fallback logger
5626	AddLogger adds a logger to the logger .
5627	LogWithTime implements the Logger interface .
5628	Log implements the Logger interface .
5629	Warning mocks base method
5630	NewTemplateWithFuncMap creates a new template with the given function .
5631	Execute implements the Template interface .
5632	NewTemplateMsg creates a new TemplateMsg
5633	NewLogAdapterFor returns a new LogAdapter with the given attributes .
5634	SetAttr implements the LogAdapter interface .
5635	LogWithTime implements the LogAdapter interface .
5636	Log implements the LogAdapter interface .
5637	Dbgm mocks base method
5638	NewAttrsFromMap creates a new Attrs .
5639	NewAttrsFromAttrs returns a new Attrs .
5640	MergeAttrs merges the attributes of attrs .
5641	SetAttr sets the value for the given key .
5642	GetAttr returns the value for the given key .
5643	RemoveAttr removes an attribute from the cache .
5644	Attrs returns a map of attributes .
5645	Debugm logs a message .
5646	Infom log message
5647	Warningm prints a warning message .
5648	Errm returns an error with the given message .
5649	Erorm creates an error with the given message .
5650	Fatm logs a message with the given message .
5651	Dief is a helper for Dief
5652	Diem logs an exit code .
5653	ToLogLevel converts a string to a log level .
5654	CallErr calls the function with the given function .
5655	New creates a new StackdriverHookHook .
5656	Fire the logrus hook
5657	Level sets the logging level
5658	ProjectID sets the project ID
5659	EntriesService sets the logging service .
5660	LoggingService sets the logging service
5661	ErrorService sets the error service
5662	HTTPClient adds a HTTP client to the stackdriver
5663	MonitoredResource sets the monitored resource .
5664	ErrorReportingLogName sets the error reporting log name .
5665	Labels sets the labels for the stackdriver .
5666	CompleteSuccess sets the partial success flag .
5667	GoogleComputeCredentials sets the Google CloudForms credentials for the given service account .
5668	NewEncoder creates a new Encoder with the given writer .
5669	NewDecoder returns a new Decoder .
5670	NewStreamEncoder creates a new stream encoder .
5671	NewStreamDecoder returns a new StreamDecoder .
5672	Register registers a codec .
5673	Unregister removes the codec from the registry
5674	Lookup returns the codec for the given mimetype .
5675	Coders returns a map of codecs .
5676	Type returns the type of the error .
5677	Install registers an adapter .
5678	AdapterOf returns the adapter for the given type .
5679	AppendDuration appends a duration to a byte slice .
5680	formatInt writes a uint64 to buf .
5681	NewDecoder returns a new decoder .
5682	NewStreamDecoder creates a new stream decoder .
5683	Unmarshal unmarshals the given byte slice .
5684	String returns the string representation of the type .
5685	zeroValueOf returns the value of t .
5686	NewValueParser creates a new ValueParser .
5687	ParseTag parses a string .
5688	NewEncoder creates a new encoder .
5689	NewStreamEncoder creates a new stream encoder .
5690	NewPrettyEncoder returns a new encoder .
5691	NewPrettyStreamEncoder creates a new stream encoder .
5692	Marshal marshals a value into a byte slice .
5693	NewEncoder creates a new Encoder .
5694	EncodeArray implements the Encode interface .
5695	EncodeMap implements the Encode interface .
5696	NewStreamEncoder returns a new StreamEncoder instance
5697	Open opens the stream .
5698	Close closes the stream .
5699	Encode encodes the given value into the stream .
5700	newStructType creates a new struct type .
5701	lookup returns the struct for the given type .
5702	clear removes the cache from the cache .
5703	CheckUint64Bounds checks if the given value is valid .
5704	CheckInt64Bounds checks if the value is valid .
5705	NewDecoder returns a new Decoder .
5706	Decode decodes a value into a pointer .
5707	DecodeArray decodes an array .
5708	DecodeMap decodes a map .
5709	NewStreamDecoder returns a new StreamDecoder instance
5710	Len returns the number of bytes .
5711	Err implements StreamDecoder .
5712	Decode decodes a stream .
5713	Encoder returns a StreamEncoder for the given Emitter .
5714	init initializes the flags .
5715	LevelFromString returns the level of the given string .
5716	NewBackend creates a new backend .
5717	caller returns the location of a file .
5718	print implements the logger .
5719	Logger returns a logger for the given subsystem .
5720	Trace prints a log message .
5721	Tracef logs a message to the logger .
5722	Debug prints a debug message .
5723	Debugf logs a message .
5724	Info logs a message .
5725	Infof logs a message .
5726	Warn logs a message .
5727	Warnf logs a warning message .
5728	Error logs an error .
5729	Errorf logs an error message .
5730	Critical logs a message .
5731	Criticalf logs a message .
5732	Level returns the level of the log .
5733	SetLevel sets the log level
5734	Concat implements the Permission interface .
5735	HasPermission returns true if the given role has the given roles .
5736	ConcatPermissioner returns a new Permissioner .
5737	HasPermission returns true if the Permissioner has a permission set .
5738	Register registers a checker .
5739	NewPermission creates a new Permission
5740	Get returns a checker .
5741	isPtrFromHeap returns true if the given address is a pointer .
5742	IsPtr returns true if the given address is a pointer .
5743	FindObject returns the object at the given address .
5744	ForEachObject iterates over all pages in the process .
5745	ForEachRoot iterates over all the roots of the process .
5746	Addr returns the address of the process
5747	Size returns the size of an object .
5748	Type returns the type of the given object .
5749	ForEachRootPtr iterates over all children of the given root .
5750	Eval1 returns true if the given type is one of the given type .
5751	setHeapPtr sets the heap pointer to the given address .
5752	findHeapInfo returns the heap info for the given address .
5753	allocHeapInfo returns the heap info for the given address .
5754	runtimeName returns the runtime name for the given type .
5755	Read runtime constants .
5756	add adds a function to the table
5757	sort sorts the functions in the table .
5758	find finds a function in the table
5759	read reads from core .
5760	readVarint reads a varint from the core .
5761	useLine returns the usage line for the given command .
5762	commandPath returns the path for the command .
5763	readCore reads the core process and returns it .
5764	typeName returns the name of an object .
5765	fieldName returns the name of the field .
5766	typeFieldName returns the name of a type field .
5767	FindFunc returns the function with the given address .
5768	Core parses a process .
5769	Address returns the address of the region .
5770	Int returns the int value of the region .
5771	Uintptr returns the unsigned uintptr .
5772	Cast casts a region to a region .
5773	Deref returns a copy of the region .
5774	Uint64 returns the uint64 value of the region .
5775	Uint32 returns the uint32 value of the region .
5776	Int32 returns the int32 value of the region .
5777	Uint16 returns the uint16 value of the region .
5778	Uint8 returns the uint8 value of the region .
5779	String returns the string representation of the region .
5780	SlicePtr returns a copy of the region .
5781	SliceLen returns the length of the slice .
5782	Field returns a region .
5783	ReadUint8 reads an address from the given address .
5784	ReadUint16 reads an address from the process .
5785	ReadUint32 reads an address from the process .
5786	ReadUint64 reads a uint64 from the process .
5787	ReadInt8 returns an int8 value .
5788	ReadInt16 reads an int16 from the process .
5789	ReadInt32 reads an int32 from the process .
5790	ReadInt64 returns an int64 value .
5791	ReadUintptr reads a uintptr from the process .
5792	ReadPtr returns the address of the process .
5793	ReadCString reads CString from the given address .
5794	Source returns the source file .
5795	findMapping finds the mapping for a given address .
5796	Max returns the address of the address .
5797	Min returns the address of the address .
5798	Align implements the Address interface .
5799	initialize initializes the tree .
5800	calculate the nodes in the graph .
5801	eval returns the label of the given v .
5802	compress compresses the given v .
5803	link adds a node to the list
5804	reverses the dominators .
5805	calculate the size of the process .
5806	objField returns the field name of the object .
5807	Readable returns true if the address is readable .
5808	ReadableN returns true if the given address is readable .
5809	splitMappingsAt splits the given address into memory .
5810	DynamicType returns the type of the given type .
5811	Create creates a new filesystem .
5812	Resolve resolves the given URL .
5813	Equal returns true if two tokens are equal .
5814	newDefaultClassifier returns a new token classifier .
5815	Next returns the next token .
5816	NewTokenizer returns a new Tokenizer .
5817	Split returns a slice of strings .
5818	Between returns the string between two strings .
5819	BetweenF returns a function that returns a function that returns a function that is between two strings .
5820	Convert camelize to camelCase
5821	Capitalize capitalizes a string .
5822	CharAt returns the character at the given index .
5823	CharAtF returns the character at the given index .
5824	ChompLeft returns a string with prefix prefix .
5825	ChompLeftF returns a function that computes the left side of the string .
5826	ChompRight removes a suffix from the string .
5827	ChompRightF returns a function that computes the given suffix .
5828	ClassifyF returns a classifier that can be used to construct a classifier .
5829	Clean cleans up spaces .
5830	Dasherize takes a string and converts it to lowercase .
5831	EscapeHTML escapes the given string .
5832	DecodeHTMLElement decodes a string .
5833	EnsurePrefixF returns a function that ensures that the given prefix is valid .
5834	EnsureSuffixF returns a function that ensures that the given string is a suffix .
5835	Humanize returns a human - readable string .
5836	Iif returns true if condition is false otherwise .
5837	IndexOf returns the index of the given string .
5838	IsLower returns true if the string is lower case insensitive
5839	IsUpper returns true if the string is upper case insensitive
5840	Left returns the left part of the string .
5841	LeftF returns a function that returns a function that returns a function that returns a function that returns the left side of the string .
5842	Alters returns a list of letters .
5843	Line returns a slice of lines .
5844	Map returns a slice of strings .
5845	Match matches pattern
5846	task builds the tasks
5847	Pad adds a string to a string
5848	PadF returns a new string with the given length .
5849	PadLeft prepends a string to a string
5850	PadLeftF returns a function that returns a padded string .
5851	PadRightF returns a function that wraps the given string .
5852	Pipe adds a function to the string .
5853	QuoteItems returns a slice of strings .
5854	ReplaceF replaces a string with the given number .
5855	ReplacePatternF returns a function that replaces all occurrences of the given pattern .
5856	Reverse reverses a string .
5857	RightF returns a function that returns a new string .
5858	Slice returns a slice of strings .
5859	SliceF returns a slice of strings .
5860	SliceContains returns true if the slice contains the given value .
5861	SliceIndexOf returns the index of the given value .
5862	Slugify returns the slugify string .
5863	StripPunctuation removes punctuation characters .
5864	StripTags removes tags from string .
5865	Substr returns the string at the given index .
5866	SubstrF returns a new substring with the given index .
5867	TemplateWithDelimers creates a template with the given values .
5868	ToArgv converts a string to an argument .
5869	ToBool converts a string to a boolean .
5870	ToBoolOr converts a string to a boolean .
5871	ToIntOr converts a string to an int .
5872	ToFloat32Or convert string to float32
5873	ToFloat64Or converts a string to a float64 .
5874	UnescapeHTML escapes the given string .
5875	WrapHTML wraps HTML with HTML tags .
5876	WrapHTMLF returns a function that wraps HTML with HTML tags .
5877	ReapChildren is used to reap the process s children .
5878	SdNotify implements the SdNotify interface .
5879	NewAuthenticator creates a new Authenticator
5880	Endpoint returns a Handler for the given prefix .
5881	Unique returns a list of unique IDs .
5882	Contains returns true if the given list contains the given id .
5883	Includes returns true if all of the objects in the given subset of the given subset .
5884	Require implements the Model interface .
5885	Enqueue enqueue a job
5886	Authorizer returns an Authorizer .
5887	Run creates a new Authorizer
5888	And returns a new Authorizer with the given b .
5889	Or returns a new Authorizer with the given b .
5890	Enqueue enqueue a job
5891	Calls a callback for the queue .
5892	NewWatcher returns a new watcher .
5893	Add adds a stream to the stream .
5894	Action returns a new Action .
5895	Write returns true if the operation should be written .
5896	String returns the string representation of the operation .
5897	Query returns the query .
5898	Respond to the response .
5899	EnsureApplication creates a new application .
5900	EnsureFirstUser creates a new user .
5901	Call returns a callback that can be used to call this function .
5902	OpenStream creates a new stream .
5903	Close closes the stream .
5904	AddTokenIndexes adds tokens to the indexer
5905	GetTokenData returns the token data .
5906	SetTokenData sets the token data .
5907	ValidSecret checks if the given secret is valid .
5908	HashSecret sets the secret hash .
5909	ValidPassword checks if the user is valid .
5910	HashPassword clears the password hash .
5911	MustCreateStore creates a new Store
5912	CreateStore creates a new store
5913	C returns the collection for the given model .
5914	NewAssetServer creates a new http . Handler .
5915	DefaultGrantStrategy returns the default grant strategy .
5916	DefaultTokenData returns the default data for the token .
5917	GenerateToken generates a token for the given ID .
5918	ParseToken parses a token from a string .
5919	Eforcer creates a new enforcer .
5920	MustGet returns the field with the given name .
5921	MustSet sets the field s value .
5922	NewGroup returns a new Group
5923	Add adds a controller to the group .
5924	Endpoint returns an http . Handler for the group .
5925	Add adds a new index to the indexer .
5926	AddRaw adds an index to the indexer .
5927	Ensure ensures that all indexes are valid .
5928	NewCatalog returns a new Catalog .
5929	Add adds a model to the catalog .
5930	All returns all models .
5931	Visualize the catalog
5932	NewErrorReporter creates a new error reporter .
5933	EnsureIndexes ensures that the store is valid .
5934	Escape returns an error .
5935	Compose composes the chain of middleware to the chain .
5936	Include returns true if all items in a subset of the given subset .
5937	Intersect returns a slice of strings in a list .
5938	Error creates a new error .
5939	RootTracer returns a new http . Handler for the request .
5940	NewTracerFromRequest creates a tracer from a request .
5941	NewTracer returns a new Tracer .
5942	Push adds a span to the stack .
5943	Last returns the last span .
5944	Tag adds a tag to the stack
5945	Log logs a key .
5946	Context returns a context with the given context .
5947	Pop removes all spans .
5948	Finish the span .
5949	NewPool returns a new Pool
5950	Add adds a task to the pool .
5951	Run starts the pool .
5952	NewBodyLimiter returns a new BodyLimiter
5953	LimitBody limits the body of the request .
5954	Calls a callback with the given name .
5955	Matcher returns a matcher that matches the given operation .
5956	BasicAuthorizer returns a Callback with the given credentials .
5957	ModelValidator checks if the model is valid .
5958	TimestampValidator returns a new instance of TimestampValidator
5959	RoleValidator returns a callback for the given model .
5960	Inspect returns a list of secrets that have the primary key
5961	NewRule creates a new Rule
5962	AddUnmatch adds an unmatch to the rule .
5963	Run runs a rule .
5964	NewSecret creates a new Secret
5965	NewObject creates a new Object
5966	SetMetadata sets the metadata for the object
5967	GetMetadata returns the value for the given key .
5968	GetMetadataAll returns the metadata for the object
5969	SetRule sets the rule
5970	SetObject sets the object s object .
5971	SetNline sets the nline field s value .
5972	SetContent sets the content of the exception .
5973	Run returns true if the exception matches the given exception .
5974	AddRule adds a new rule to the Seek backend .
5975	LoadRulesFromFile loads rules from a file .
5976	LoadRulesFromDir loads rules from a directory .
5977	DefaultRulesPath returns the default rules path .
5978	EnableRule enables a rule .
5979	DisableRule disables a rule .
5980	EnableRuleByRegexp enables a rule by name .
5981	DisableRuleByRegexp sets the rule by name .
5982	LoadObjects loads the objects from the source file .
5983	GroupObjectsByMetadata returns a map of objects by metadata .
5984	GroupObjectsByPrimaryKeyHash returns a map of objects that have the primary key .
5985	AddException adds an exception to the server .
5986	LoadExceptionsFromFile loads an exception from a file .
5987	Print plain results
5988	printJsonResults prints results to stdout .
5989	NewXor64Source returns a new Xor64Source instance
5990	xor64 returns the xor of x .
5991	next returns the next uint64 value .
5992	Seed sets the seed of the source .
5993	NewFrameSet creates a FrameSet from a frame range .
5994	handleMatch adds a range to the frameSet
5995	Index returns the index of the given frame .
5996	Frame returns the value at the given index .
5997	HasFrame returns true if the frame contains the given frame .
5998	FrameRangePadded pads the frame range .
5999	Normalize returns a new FrameSet .
6000	FramesToFrameRange converts frames to a string .
6001	FrameRangeMatches returns a list of frame ranges matching the frame range .
6002	toRange returns a slice of ints .
6003	NewWorkManager creates a new work manager .
6004	processSources processes all files in the work manager .
6005	isInputDone returns true if the work manager is done .
6006	closeInputs closes the work manager .
6007	load loads the files from the given paths .
6008	loadRecursive loads all files in the given paths .
6009	preparePaths takes a list of paths and returns a list of files .
6010	PadFrameRange pads a frame range .
6011	zfillString returns a string with zeros .
6012	zfillInt returns a string with zeros .
6013	NewInclusiveRange returns a new InclusiveRange .
6014	String returns a string representation of the range .
6015	End returns the end of the range .
6016	Len returns the length of the range .
6017	Min returns the minimum value of the range .
6018	Max returns the maximum value of the range .
6019	Contains returns true if the given value contains the given value .
6020	findInRange returns the closest value for the given value .
6021	Index returns the index of the given value .
6022	String returns a string representation of the range .
6023	Len returns the total number of blocks .
6024	Start returns the start of the range of blocks .
6025	End returns the end of the range .
6026	Min returns the minimum value of the range .
6027	Max returns the maximum number of blocks .
6028	numRanges returns the number of blocks in the range .
6029	rangeAt returns the range at the given index .
6030	Append adds a new range to the range .
6031	AppendUnique adds a new range to the range .
6032	Contains returns true if the range contains the given value .
6033	Index returns the index of the given value .
6034	Frames range range .
6035	FrameRangePadded returns the frame range of frames .
6036	Index returns the path of the file .
6037	SetDirname sets the directory name .
6038	SetPadding sets the padding chars .
6039	SetPaddingStyle sets the padding .
6040	SetExt sets the file extension
6041	SetFrameRange sets the frame range .
6042	Len returns the number of frames .
6043	String returns a string representation of the fileSequence .
6044	Copy returns a copy of this FileSequence .
6045	NewClient creates a new client .
6046	UnmarshalXML unmarshals the header .
6047	UnmarshalXML unmarshals the Body .
6048	Call calls the SOAP API .
6049	JSONDoc loads a JSON document from a file .
6050	AddLoader adds a loader to the spec .
6051	JSONSpec parses a JSON specification .
6052	Embedded returns an embedded document .
6053	Spec returns a document from the given path .
6054	Analyzed parses a JSON document .
6055	Expanded returns a copy of the document .
6056	ResetDefinitions clears all definitions .
6057	Pristine returns the parsed document .
6058	OpenDb opens a GeoIP file
6059	GetOrg returns the name of the organization
6060	GetRegion returns the region code for the given IP address .
6061	GetRegionName returns the region name for the given country code .
6062	GetCountry returns the country code for the given IP address .
6063	NewRotatingFileHandler returns a new RotatingFileHandler .
6064	Close closes the file .
6065	String returns the string representation of the given Level .
6066	New creates a new logger
6067	Close closes the logger .
6068	SetLevelByName sets the level of the given name .
6069	Output implements the logger interface .
6070	Output json to json
6071	Print implements Logger interface .
6072	Println implements Logger interface .
6073	Debug logs a message .
6074	Debugln implements Logger .
6075	Error logs an error .
6076	Errorln logs an error .
6077	Info logs a message .
6078	Infoln logs a message
6079	Warn logs a message .
6080	Warnln logs a message to the logger .
6081	NewStreamHandler creates a new StreamHandler .
6082	Right wraps a string with padding .
6083	New returns a new API instance
6084	setupMetadata returns the metadata for the metadata .
6085	recordTypes recursively recursively recursively recursively
6086	appendSorted appends a parameter to a list of parameters .
6087	parseDataType parses the data type and returns the data type .
6088	parseParam parses and returns a new action parameter .
6089	newParam creates a new action param
6090	toGoReturnTypeName returns the type name for the given type .
6091	toGoTypeName converts name to Go type name
6092	prettyify returns the JSON representation of an object
6093	isBuiltInType returns true if the given name is a builtin type .
6094	MatchHref returns true if the action matches the given href .
6095	Substitute substitutes the variables in the pattern .
6096	MarshalJSON implements FileUpload .
6097	writeMultipartParams writes a multipart request .
6098	Perform a request
6099	PerformRequestWithContext performs a request with the given context .
6100	LoadResponse loads the response from the response .
6101	ScheduleLocator returns a ScheduleLocator instance
6102	TemplateLocator returns a TemplateLocator instance
6103	fetch details from the environment
6104	buildAliases builds the aliases for the SSH config .
6105	serverArray returns a list of Instance instances for a given name .
6106	server returns an instance of the server
6107	toPackageName returns the package name .
6108	loadFile loads a file from a file .
6109	Main entry point .
6110	runCommand runs the command line command
6111	CreateJSONResponse creates a new http response
6112	AccountLocator returns a new AccountLocator instance
6113	AccountGroupLocator returns a new AccountGroupLocator instance
6114	AlertLocator returns a new AlertLocator instance
6115	AlertSpecLocator returns a new AlertSpecLocator instance
6116	AuditEntryLocator returns a AuditEntryLocator instance
6117	BackupLocator returns a new BackupLocator instance
6118	ChildAccountLocator returns a new ChildAccountLocator instance
6119	CloudLocator returns a CloudLocator instance
6120	CloudAccountLocator returns a new CloudAccountLocator instance
6121	CookbookLocator returns a cookbookLocator instance
6122	CookbookAttachmentLocator returns an instance of CookbookAttachmentLocator
6123	CredentialLocator returns a new CredentialLocator instance
6124	DatacenterLocator returns a DatacenterLocator instance
6125	DeploymentLocator returns a new DeploymentLocator instance
6126	HealthCheckLocator returns a new HealthCheckLocator instance
6127	IdentityProviderLocator returns a new IdentityProviderLocator instance
6128	ImageLocator returns a new ImageLocator instance
6129	InputLocator returns a new InputLocator instance
6130	InstanceLocator returns an instance of InstanceLocator
6131	InstanceTypeLocator returns a instance of InstanceTypeLocator
6132	IpAddressLocator returns a new IpAddressLocator instance
6133	IpAddressLocator returns a new IpAddressLocator instance
6134	MonitorMetricLocator returns a new MonitoringMetricLocator instance
6135	MultiCloudImageLocator returns a new MultiCloudImageLocator instance
6136	MultiCloudImageMatcher returns a new MultiCloudImageMatcher instance
6137	MultiCloudImageLocator returns a new MultiCloudImageSettingLocator instance
6138	NetworkLocator returns a NetworkLocator instance
6139	NetworkGatewayLocator returns a new NetworkGatewayLocator instance
6140	NetworkOptionGroupLocator returns a NetworkOptionLocator instance
6141	NetworkOptionGroupAttachmentLocator returns a new NetworkOptionAttachmentLocator instance
6142	Oauth2Locator returns a new Oauth2Locator instance
6143	PermissionLocator returns a PermissionLocator instance
6144	PlacementGroupLocator returns a new PlacementGroupLocator instance
6145	PreferenceLocator returns a new PreferenceLocator instance
6146	PublicLocator returns a new PublicationLocator instance
6147	PublicLineageLocator returns a new PublicationLineLocator instance
6148	RecurringVolumeAttachmentLocator returns a new RecurringVolumeAttachmentLocator instance
6149	RepositoryLocator returns a new RepositoryLocator instance
6150	RepositoryAssetLocator returns a new RepositoryAssetLocator instance
6151	ResourceGroupLocator returns a ResourceGroupLocator instance
6152	RightScriptLocator returns a RightScriptLocator instance
6153	RightScriptAttachmentLocator returns a RightScriptAttachmentLocator instance
6154	RouteLocator returns a RouteLocator instance
6155	RouteTableLocator returns a RouteTableLocator instance
6156	RunnableBindingLocator returns a new RunnableBindingLocator instance
6157	SchedulerLocator returns a new SchedulerLocator instance
6158	SecurityGroupLocator returns a SecurityGroupLocator instance
6159	SecurityGroupRuleLocator returns a SecurityGroupRuleLocator instance
6160	ServerLocator returns a new ServerLocator instance
6161	ServerArrayLocator returns a new ServerArrayLocator instance
6162	ServerTemplateLocator returns a ServerTemplateLocator instance
6163	ServerMultiCloudImageLocator returns a ServerTemplateLocator instance
6164	SessionLocator returns a SessionLocator instance
6165	SshKeyLocator returns a new SshKeyLocator instance
6166	SubnetLocator returns a new SubnetLocator instance
6167	TagLocator returns a new TagLocator instance
6168	TaskLocator returns a TaskLocator instance
6169	UserLocator returns a new UserLocator instance
6170	UserDataLocator returns a new UserDataLocator instance
6171	VolumeLocator returns a VolumeLocator instance
6172	VolumeAttachmentLocator returns a VolumeAttachmentLocator instance
6173	VolumeSnapshotLocator returns a VolumeSnapshotLocator instance
6174	VolumeTypeLocator returns a VolumeTypeLocator instance
6175	RegisterCommands registers action commands
6176	ShowCommandHelp shows the help of a command .
6177	ShowAPIActions implements API .
6178	ShowHelp prints a help message .
6179	ParseCommandAndFlags parses a command and returns a CommandTarget object .
6180	validateFlagValue checks if the given value is valid .
6181	buildQuery builds a query from a list of values
6182	buildPayload builds the payload from a list of values
6183	shortcutPattern is used to shorten the given resource .
6184	cleanDescription cleans up the description of the doc .
6185	fileExists returns true if file exists
6186	AnalysisSnapshotLocator returns a new AnalysisSnapshotLocator instance
6187	BudgetAlertLocator returns a new BudgetAlertLocator instance
6188	CloudBillLocator returns a new CloudBillLocator instance
6189	CloudBillMetricLocator returns a new CloudBillMetricLocator instance
6190	CurrentUserLocator returns a new CurrentUserLocator instance
6191	InstanceCombinationLocination locator
6192	InstanceMetricLocator returns an instance of InstanceMetricLocator
6193	InstanceUsagePeriodLocator returns a instance of InstanceUsagePeriodLocator
6194	PatternLocator returns a new PatternLocator instance
6195	ReservedInstanceLocator returns a new ReservedInstanceLocator instance
6196	ReservedInstancePurchaseLocator returns a new ReservedInstanceLocator instance
6197	ScenarioLocator returns a ScenarioLocator instance
6198	ScheduledReportLocator returns a new ScheduledReportLocator instance
6199	TempInstancePriceLocator returns a TempInstanceLocator instance
6200	UserSettingLocator returns a new UserSettingLocator instance
6201	readAllAsync implements io . io . Reader .
6202	extractArg extracts the argument from the given arguments .
6203	write writes data to the output file .
6204	AppliedPolicyLocator returns a new AppliedPolicyLocator instance
6205	 ApprovalLocator returns a new ApprovalLocator instance
6206	AlertLocator returns a new IncidentLocator instance
6207	PolicyTemplateLocator returns a new PolicyTemplateLocator instance
6208	PublishedTemplateLocator returns a published template locator .
6209	DebugCookbookPathLocator returns a DebugCookbookPathLocator .
6210	ContainerControlLocator returns a new DockerControlLocator instance
6211	EnvLocator returns a new EnvLocator instance
6212	LoginControlLocator returns a LoginControlLocator instance
6213	ProcessLocator returns a ProcLocator instance
6214	Rl10Locator returns a new Rl10Locator instance
6215	TSSLocator returns a new TSLococator instance
6216	TSSControlLocator returns a new TSSControlLocator instance
6217	TSSPluginLocator returns a new TSSPluginLocator instance
6218	NewAngularWriter creates a new AngularWriter .
6219	WriteResource writes a resource to the writer .
6220	path returns the path for the action
6221	required returns whether the given parameter is mandatory .
6222	New creates a new API instance
6223	FromCommandLine creates a new API client .
6224	CanAuthenticate checks if the API is valid .
6225	Encrypt encodes a text string
6226	Decrypt decodes a text string
6227	Guess the type for the given refID .
6228	addType adds a type to the API .
6229	extractCmdLineParams extracts the command line parameters from the given action .
6230	NewMetadataWriter creates a new MetadataWriter .
6231	WriteHeader implements the MetadataWriter interface .
6232	WriteMetadata writes the metadata to the writer .
6233	location returns the location of the action .
6234	New returns a new instance of the API .
6235	fromAPI returns a new instance of the API .
6236	BuildRequest builds a request for a resource .
6237	setupMetadata returns a map of generated metadata .
6238	NewDisplayer returns a new Displayer instance
6239	ApplySingleExtract extracts a single extract from the output .
6240	ApplyExtract applies the given selector to the output .
6241	ApplyHeaderExtract extracts a header from the response
6242	Output returns the output as a string .
6243	NewAPIAnalyzer creates a new APIAnalyzer .
6244	Analyze implements the API .
6245	Analyze aliases for aliases
6246	LocatorFunc returns the locator for the given attributes .
6247	ParseRoute parses a route from a list of routes .
6248	isDeprecated returns true if path is deprecated
6249	isQueryParam returns true if the parameter is a query parameter .
6250	isPathParam returns true if the path pattern is a path parameter .
6251	fetchAuditEntries fetches all audit entries for the given filter .
6252	formatTime returns the time of the given time .
6253	printAudits prints the audit entry
6254	extractUnique extracts unique entries from oldEntries .
6255	getHref returns the href of the audit entry
6256	fail will fail if the given format fails
6257	Parameters returns the parameters for the action .
6258	paramsInitializer initializes the params for the action .
6259	commandLine returns the command line
6260	toVerb converts a string to a verb .
6261	escapeBackticks escapes backticks .
6262	AccountPreferenceLocator returns a new AccountPreferenceLocator instance
6263	ApplicationLocator returns a new ApplicationLocator instance
6264	EndUserLocator returns a EndUserLocator instance
6265	NotificationRuleLocator returns a NotificationRuleLocator instance
6266	UserPreferenceLocator returns a new UserPreferenceLocator instance
6267	UserPreferenceInfoLocator returns a new UserPreferenceInfo instance
6268	LoadConfig loads a client configuration file .
6269	CreateConfig creates a new client
6270	fromAPI returns a new API instance from the API .
6271	HostFromLogin returns the host name from the login string .
6272	AnalyzeParam returns an action parameter .
6273	AnalyzeAttribute analyzes an attribute .
6274	AnalyzeType analyzes the given type
6275	CreateType creates an object for the given query .
6276	Ref returns the definition of a definition .
6277	Type returns the type of this Ref .
6278	Required returns a list of required strings .
6279	ID returns the ID of the ref .
6280	Service returns the service name
6281	Method returns the method name
6282	NewTypeRegistry returns a new TypeRegistry instance
6283	GetNamedType returns the named type by name .
6284	CreateNamedType creates a new ObjectDataType .
6285	CreateInlineType creates a new inline type .
6286	FinalizeTypeNames is used to determine the type names .
6287	Merge merges the given APID .
6288	FinalizeTypeNames is used to determine the type names .
6289	uniqueTypeName returns the unique name of the given type .
6290	MandatoryParams returns a list of required parameters .
6291	HasOptionalParams returns true if the action is optional .
6292	MakeUniq creates a unique unique string from a list of strings .
6293	NewClientWriter creates a new client writer
6294	WriteHeader writes the header to the writer .
6295	WriteResourceHeader writes a resource header .
6296	WriteType writes an object to the writer .
6297	WriteResource writes a resource .
6298	WithTrail adds a trail to the eval context .
6299	AnalyzeEndpoint analyzes an endpoint .
6300	NetworkInterfaceLocator returns a NetworkInterface instance
6301	NetworkInterfaceAttachmentLocator returns a NetworkInterface instance
6302	UnmarshalJSON deserializes a RubyTime object
6303	ExecutionLocator returns a new ExecutionLocator instance
6304	NotifyLocator returns a NotificationLocator instance
6305	OperationLocator returns a new OperationLocator instance
6306	ScheduledActionLocator returns a new ScheduledActionLocator instance
6307	NewBasicAuthenticator creates a new Authenticator .
6308	NewSSAuthenticator returns a new Authenticator instance
6309	newCookieSigner creates a new cookie signer .
6310	Sign signs the request .
6311	CanAuthenticate checks if the given host is valid .
6312	refresh refreshes the cookies
6313	Sign authenticates the request .
6314	Sign signs the request .
6315	Sign signs the request .
6316	SetHost sets the Host field s value .
6317	CanAuthenticate can be used to authenticate a host
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL builds a URL for a host
6320	GetAction returns the action by name .
6321	HasLink returns true if the resource has a link
6322	findMatches returns a list of paths matching the given href .
6323	NewPB returns a new HTTP client .
6324	newVariableDumpClient creates a new HTTP client for the given client .
6325	newRawClient returns a new http client .
6326	DoHidden sends a request to the dump
6327	Do performs a HTTP request .
6328	doImp is a helper function that is used to inspect the HTTP request .
6329	getClientWithoutTimeout returns the HTTP client without timeout .
6330	dumpRequest dumps the given HTTP request .
6331	writeHeaders writes headers to the buffer .
6332	copy hidden headers
6333	validateCommandLine validates a command line .
6334	APIClient creates a new command client .
6335	RegisterClientCommands registers client commands .
6336	Interactive sets the logger
6337	toPattern converts a path to a path pattern .
6338	WithClientIP adds a client IP to the context .
6339	ClientIP returns the client IP address .
6340	NewProducer creates a new producer .
6341	StartProducer starts a producer .
6342	Start starts the producer .
6343	Stop stops the producer .
6344	Publish a message
6345	PublishTo sends a message to the producer
6346	NewLocalEngine creates a new local engine .
6347	validate validates the consumer config
6348	default defaults
6349	NewConsumer creates a new consumer .
6350	StartConsumer starts a consumer .
6351	Start starts the consumer .
6352	RateLimit returns a channel with the given limit .
6353	Write implements io . Writer interface .
6354	ReadResponse reads the response from the buffer .
6355	backoff returns a random backoff .
6356	String returns a string representation of the frame type .
6357	NewConsulEngine returns a new ConsulEngine instance
6358	ParseMessageID parses a message ID .
6359	WriteTo implements io . Writer interface .
6360	NewMessage creates a new Message .
6361	Finish finishes the message .
6362	Requeue sends a message to the queue .
6363	ReadCommand reads a command from the buffer .
6364	funcMapMaker creates a new FuncMapMap .
6365	Fcs sets the func map
6366	Execute executes a template
6367	RegisterPath registers a path .
6368	Asset returns the contents of a file .
6369	Glob returns a list of paths matching the given pattern .
6370	NameSpace returns a new AssetFile .
6371	New creates a new Render .
6372	RegisterViewPath registers a list of view paths .
6373	SetAssetFS sets the assetFS
6374	Layout returns a template with the given name .
6375	Funcs implements the Render interface .
6376	Execute implements the Render interface .
6377	RegisterFuncMap adds a function to the render .
6378	Asset returns the asset with the given name .
6379	NewPlainClient returns a new client .
6380	Create a new uploader
6381	Open reads a URL from the given URL .
6382	Sign signs the request .
6383	Sign signs the request .
6384	Readdir returns a list of files in the file .
6385	Find finds the node at the given path .
6386	Lex parses the given xpath .
6387	MustParseXML parses the given io . Reader .
6388	ParseXML parses XML into a tree .
6389	Call calls the wrapped function .
6390	Parse parses a XPath expression .
6391	MustParse parses a XPath expression .
6392	Exec implements the XPath interface .
6393	ExecBool returns the boolean value of the XPath expression .
6394	ExecNum returns the number of nodes in the given node .
6395	ExecNode implements the XPathExecutor interface .
6396	MustExec implements the XPathExec interface .
6397	ParseExec parses a string into a tree .
6398	CreateNode creates a new XML node
6399	GetChildren returns the children of this node .
6400	GetAttrs returns all the attributes of the XMLEle .
6401	ResValue returns the string representation of the node .
6402	Parse parses a string into a node .
6403	GetToken returns the token .
6404	ResValue returns the value of the node .
6405	Exec executes the given XPath .
6406	String returns a string representation of a Num .
6407	Num returns a Num .
6408	Builds a list of Nodes from an element
6409	GetAttribute returns the attribute of an element .
6410	GetAttributeVal returns the value of an attribute .
6411	GetAttrValOrEmpty returns the value of an attribute .
6412	FindNodeByPos finds a node by pos .
6413	Marshal marshals the given node .
6414	MarshalStr returns a string representation of a tree .
6415	NewLexer creates a new Lexer .
6416	NewLexerString creates a new Lexer .
6417	Split returns a slice of strings .
6418	Register registers an error .
6419	Get returns the error descriptor for the given code .
6420	GetAll returns all registered error descriptors .
6421	From converts an error into an error .
6422	Descriptor returns an instance of ErrDescriptor
6423	GetAttributes returns the attributes of an error .
6424	HTTPStatusCode returns the HTTP status code .
6425	HTTPStatusCode returns the HTTP status code for the given error .
6426	HTTPStatusToType converts HTTP status to Type .
6427	ToHTTP converts an error into an HTTP response .
6428	toImpl converts an error into an impl .
6429	MetadataFromIncomingContext returns metadata from incoming context .
6430	MetadataFromOutgoingContext returns metadata from outgoing context .
6431	TokenFromMetadata returns the token from the metadata .
6432	TokenFromIncomingContext returns the token from the context .
6433	OutgoingContextWithToken returns a context with the given token .
6434	KeyFromMetadata returns the key from the metadata .
6435	KeyFromIncomingContext returns the key from the context .
6436	OutgoingContextWithKey returns a new context with the given key .
6437	IDFromMetadata returns the ID from the metadata .
6438	IDFromIncomingContext returns the ID from the context .
6439	OutgoingContextWithID returns a context with the given ID .
6440	ServiceInfoFromMetadata returns a ServiceInfo from metadata .
6441	ServiceInfoFromIncomingContext returns ServiceInfo from incoming context .
6442	OutgoingContextWithServiceInfo returns a new outgoing context with the given service name .
6443	LimitFromMetadata returns the limit from the metadata .
6444	OffsetFromMetadata returns the offset from the metadata .
6445	LimitAndOffsetFromIncomingContext returns the limit and offset from the context .
6446	OutgoingContextWithLimitOffset returns an outgoing context with the given limit and offset .
6447	before returns true if the schedule item is before the given interval .
6448	New creates a new instance of ErrDescriptor
6449	WithNamespace adds a namespace to the context .
6450	Wrap creates a new namespace .
6451	WithField adds a field to the log .
6452	WithFields returns a new logger with the given fields .
6453	Format formats a message format .
6454	Fix returns the value of an interface .
6455	GRPCCode returns the status code for the given type .
6456	GRPCCodeToType converts the given code to type .
6457	GRPCCode returns the error code for the given error .
6458	FromGRPC converts an error into an error .
6459	ToGRPC converts an error into grpc .
6460	IsEnabled returns true if the namespace is enabled .
6461	Set sets the namespaces
6462	Cause returns the cause of the error .
6463	parseCode parses a string from a string .
6464	UnaryServerInterceptor creates a new unary server interceptor .
6465	StreamServerInterceptor creates a new StreamServerInterceptor .
6466	UnaryClientInterceptor creates a new unary client interceptor .
6467	StreamClientInterceptor creates a new stream client interceptor .
6468	Interceptor returns a new StreamClientInterceptor .
6469	Wrap wraps a logrus logger .
6470	NewCounter returns a new counter .
6471	NewRedisCounter returns a new RedisCounter .
6472	NewLimiter returns a new Limiter .
6473	WithInsecure returns a new TokenCredentials instance
6474	WithTokenFunc returns a new TokenCredentials instance
6475	GetRequestMetadata returns the request metadata for the request .
6476	FieldFromIncomingContext returns the fields from the given context .
6477	String returns the string representation of the Type .
6478	UnmarshalText unmarshals a Type .
6479	fromString converts a string to a Type
6480	Start starts the goroutine .
6481	NewSimple returns a new empty queue .
6482	Wrap returns a new Filter .
6483	WithFilters adds filters to the filter .
6484	WithField adds a field to the log .
6485	WithFields adds fields to the log .
6486	FilterSensitive returns a filter that can be used to filter sensitive values .
6487	SliceFilter returns a slice of slice elements .
6488	MapFilter returns a map with the given filter .
6489	 RestrictFilter adds a filter to the filter .
6490	LowerCaseFilter returns a filter that matches the given filter .
6491	newBatchPoints returns a new BatchPoints .
6492	NewSinglePointWriter creates a new SinglePointWriter .
6493	Write writes a single point to the writer .
6494	WithScalingInterval sets the scaling interval .
6495	NewBatchingWriter creates a new BatchWriter .
6496	Write writes a point to the writer .
6497	MustParseLevel parses a string from a string .
6498	New creates a new Stream
6499	SetLogger sets the logger .
6500	CloseRecv closes the stream .
6501	Stats returns the stats of the stream .
6502	Run starts the stream .
6503	ServerOptions returns a list of grpc options .
6504	ClientOptions returns a list of grpc client options .
6505	UnaryServerInterceptor returns a new UnaryServerInterceptor
6506	StreamServerInterceptor returns a StreamServerInterceptor .
6507	UnaryClientInterceptor returns a new unary client interceptor .
6508	StreamClientInterceptor returns a StreamClientInterceptor .
6509	default defaults
6510	Flush implements the Handler interface .
6511	New returns a new Handler .
6512	HandleLog implements the Handler interface .
6513	New creates a new TTRandom .
6514	Names returns the names of the URI .
6515	String returns a string representation of the PerfDatum .
6516	RenderPerfdata renders a list of perfdata
6517	Exit prints the given status and message .
6518	NewCheckWithOptions returns a new Check instance
6519	AddResult adds a result to the check .
6520	AddResultf adds a result to the check .
6521	String returns a string representation of the status code .
6522	Exitf is a helper function for Exit
6523	Criticalf logs an error with the given format .
6524	Unknownf prints an unknown message .
6525	NewDefaultStatusPolicy returns a new default status policy .
6526	NewStatusPolicy creates a new status policy .
6527	ParseRange parses a range string .
6528	Check checks if the given value is within the range .
6529	CheckInt checks if the given value is an int .
6530	CheckUint64 checks if the given value is a uint64 .
6531	NewClient creates a new client .
6532	GetKeyMeta returns the KeyMeta for the given path .
6533	GetKeysInDirMeta returns a list of keys in dir
6534	GetKeyContent returns the content of a key .
6535	GetJobSummariesForProject returns all jobs for a project .
6536	GetJobsForProject returns a list of jobs for a project .
6537	GetJob returns a job by id .
6538	CreateJob creates a job .
6539	Create or update a job .
6540	DeleteJob deletes a job .
6541	JobSummary returns job summary .
6542	Get system info
6543	DateTime returns the date time .
6544	GetAllProjects returns all projects .
6545	GetProject returns a project .
6546	CreateProject creates a new project .
6547	DeleteProject deletes a project .
6548	SetProjectConfig sets a project config .
6549	NewClient returns a new client .
6550	NewClientbyToken returns a new client with the given token .
6551	SetDepth sets the depth of the client .
6552	List datacenters
6553	Create a datacenter
6554	GetDatacenter returns a datacenter
6555	UpdateDataCenter updates a datacenter .
6556	Delete datacenter
6557	WaitTilled waits for a provisioned resource for a given path .
6558	List firewall rules
6559	GetFirewall rule
6560	Create a firewall rule
6561	UpdateFirewallRule updates a firewall rule .
6562	DeleteFirewallRule deletes a firewall rule
6563	List loadbalancers
6564	Get loadbalancer
6565	Update load balancer
6566	Delete load balancer
6567	ListBalancedNics returns a list of NICs for a given DC .
6568	Associate a nic
6569	GetBalanced NIC
6570	DeleteBalancedNic deletes a balancer
6571	ListLans returns a list of LANs
6572	GetLan retrieves a LAN .
6573	DeleteLan deletes a LAN .
6574	ListNics returns a list of NICs .
6575	Create a NIC
6576	Get a nic
6577	Update a nic
6578	Delete a nic
6579	List snapshots .
6580	Get snapshot
6581	DeleteSnapshot deletes a snapshot
6582	UpdateSnapshot updates a snapshot .
6583	ListIPBlocks returns a list of IP blocks .
6584	ReserveIPBlock reserves a new IP block .
6585	GetIPBlock returns the IP block for the given IP .
6586	UpdateIPBlock updates an IP block .
6587	ReleaseIPBlock releases an IP block
6588	List volumes
6589	GetVolume returns a volume
6590	UpdateVolume updates a volume .
6591	Create a volume
6592	DeleteVolume deletes a volume
6593	Create a snapshot
6594	RestoreSnapshot attempts to restore a snapshot
6595	List servers
6596	Get a server
6597	DeleteServer deletes a server
6598	ListAttachedCds returns a list of images attached to the server .
6599	AttachCdrom attaches a cdrom to the server
6600	GetAttachedCdrom returns the image attached to the server .
6601	DetachCdrom detaches a DCrom device .
6602	List attached volumes
6603	AttachVolume attaches a volume
6604	Get attached volume
6605	DetachVolume deletes a server
6606	StartServer starts a server
6607	ListLocations returns a list of locations
6608	GetRegionalLocations returns a list of locations for a specific region
6609	GetLocation returns the location of a location .
6610	Get contract resources
6611	List images
6612	GetImage retrieves an image by ID .
6613	Print headers
6614	ListGroups returns a list of groups .
6615	Get a group
6616	Create a group
6617	UpdateGroup updates a group .
6618	Delete a group
6619	ListShares returns a list of shares .
6620	GetShare returns a share .
6621	AddShare adds a share to a group .
6622	UpdateShare updates a share .
6623	DeleteShare deletes a group
6624	List all users in a group .
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group .
6627	List users .
6628	GetUser retrieves a user by id .
6629	CreateUser creates a new user .
6630	UpdateUser updates a user .
6631	DeleteUser deletes a user
6632	List resources .
6633	GetResourceByType returns a resource by type id
6634	List resources by type
6635	ListRequests returns a list of Requests .
6636	Get a request
6637	Get request status
6638	Close closes the file .
6639	GetSerializableArgument returns the value of the serializable argument .
6640	BoolVar adds a boolean flag to the environment .
6641	Bool returns a pointer to the environment variable .
6642	IntVar adds a variable to the environment variable .
6643	Int returns a new int .
6644	Int64Var adds a variable to the environment variable .
6645	Int64 returns a new int64 .
6646	UintVar registers a new environment variable .
6647	Uint returns a pointer to the environment variable .
6648	Uint64Var adds a uint64 to the environment variable .
6649	Uint64 returns a new uint64 .
6650	StringVar adds a string to the environment variable .
6651	String returns an environment variable .
6652	Float64Var registers a float64 variable .
6653	Float64 returns a new float64 .
6654	DurationVar adds a variable to the environment variable .
6655	Duration returns a new Duration
6656	Parse parses the environment variables .
6657	WriteStringToFile writes text to file .
6658	ReadFileToString converts a file to a string .
6659	LineReader implements io . Reader . Reader .
6660	LineReaderFrom reads a line from a file .
6661	FileExists checks if a file exists .
6662	FileExistsInPath returns true if the given file exists .
6663	GetPathParts returns the full path of the given path .
6664	GetPathPartsParts returns the path parts of the current executable .
6665	RandomString returns a random string with the given length .
6666	ParseAddress parses an address string .
6667	HomeDir returns the home directory
6668	IsTCPPortAvailable returns true if port is available .
6669	RandomTCPPort returns the number of available TCP port
6670	HashString returns the hash of the given key .
6671	Context implements the SessionManager interface .
6672	Token returns the OAuth2 Token .
6673	NewDaemon returns a new Daemon instance
6674	Close closes the daemon .
6675	NewAccessTokenContext creates a new access token context .
6676	AccessTokenFromContext returns the access token from the context .
6677	RandomAccessToken generates a random access token
6678	Init initializes the logger
6679	Load loads a DIC file .
6680	Start creates a new session .
6681	Get returns the session .
6682	List returns a list of sessions .
6683	Exists checks if the access token exists .
6684	 Abandon attempts to abandon the session .
6685	SetValue sets the value for the given key .
6686	Delete deletes a record .
6687	Setup initializes storage .
6688	Tears down the database .
6689	initJaeger creates a new jaeger .
6690	Usage prints the error message .
6691	Build a DoubleArray from a list of keywords .
6692	Read reads a DoubleArray from an io . Reader .
6693	Get returns the node at the given index .
6694	ExternalNodes returns the list of nodes in the cluster .
6695	GetOther returns the node with the given access token
6696	GoString returns a string representation of the cluster
6697	Scan scans the Bag into Bag .
6698	Value returns the Bag .
6699	Has returns true if the given key exists .
6700	WriteTo implements io . Writer interface .
6701	ReadIndexTable reads an IndexTable from an io . Reader .
6702	New creates a new action bar
6703	RegisterAction registers a new action .
6704	Action adds actions to the action bar .
6705	Render renders the action bar
6706	FuncMap returns a function that renders the edit button .
6707	EditMode returns true if the user is edit mode .
6708	SwitchMode redirects to the current page .
6709	InlineEdit renders the edit page
6710	Error returns the error message .
6711	ParseFile parses a file .
6712	FindMachine finds a machine by name .
6713	New creates a Kace .
6714	Camel converts a string to camelCase
6715	Pascal converts a string to PascalCase
6716	Snake converts string to snake case
6717	SnakeUpperUpper converts a string to snake case
6718	Kebab converts a string to keb
6719	KebabUpper converts a string to kebab
6720	isPathSafe checks if the given string is valid .
6721	Start implements the WriterTracer interface .
6722	ParseAuthHeaders parses the auth headers from the request .
6723	Tracer returns a new client .
6724	HTTPClient adds an HTTP client to the client .
6725	BasicAuth sets the basic auth credentials
6726	BearerAuth sets the authorization token
6727	cookieJar sets the cookie jar
6728	SanitizerEnabled sets the sanitizerEnabled field s value .
6729	OpenFile reads a file from a URL .
6730	RoundTrip returns a response from the client .
6731	SetAuthHeader sets the auth header
6732	FileName returns the file name .
6733	newBuffersFromFiles returns a slice of file buffers .
6734	newFileBuffer creates a new file buffer .
6735	rewind rewind the file .
6736	ConvertResponse converts an error into a Response .
6737	Set sets the value of the BoolOption field s value .
6738	WriteAnswer writes the answer to the given value .
6739	String returns the string representation of the BoolOption .
6740	TriggerIncidentKey triggers an incident key .
6741	TriggerWithDetails triggers an incident with the given details .
6742	TriggerIncidentKeyWithDetails triggers an incident key with details .
6743	Merge merges src into dst .
6744	setSource sets the source field s value .
6745	convertString converts src to dst
6746	Do executes the given function .
6747	NewFile creates a new file .
6748	internal run method
6749	String returns a string representation of the row
6750	Tabulate converts a list of results into a row
6751	AmazonRequest mocks base method
6752	WriteTabularData writes the results to w .
6753	Reduce returns a slice of the result set .
6754	NewSemaphore creates a new semaphore .
6755	Release releases the semaphore .
6756	Resize resizes the semaphore .
6757	AddOutput adds an output to the benchmark .
6758	RunBenchmarks runs the benchmark .
6759	parseBool parses the given byte slice .
6760	checkInteger checks if the given bytes is an integer .
6761	parseInt64 parses an int64 .
6762	parseInt32 parses an int32 from bytes .
6763	parseBigInt parses a big integer into a big integer .
6764	parseBitString parses a bit string .
6765	parseObjectIdentifier parses an object identifier .
6766	parseBase128Int parses a base64 integer .
6767	parseGeneralizedTime parses the given bytes .
6768	parsePrintableString parses the given bytes .
6769	isPrintable returns true if the given byte is a printable .
6770	parseSequenceOf parses a sequence of bytes .
6771	validateLength returns true if offset is invalid .
6772	setDefaultValue sets the default value for a field .
6773	UnmarshalWithParams unmarshals a byte slice into a byte slice .
6774	Parse field parameters .
6775	getUniversalType returns the tag for the given type .
6776	DecodeString decodes a string .
6777	MailNotifier retrieves a MailNotifier from the database .
6778	SaveMailNotifier saves a mail notification .
6779	RegisterProvider registers a provider .
6780	InitDb initializes MongoDB
6781	Until waits until the given period is stopped .
6782	logPanic logs an error to the stack
6783	User returns a user by username .
6784	Users returns all users in the database
6785	SaveUser saves a user to the database .
6786	DeleteUser deletes a user .
6787	LoadCACertFile loads a certificate from a file .
6788	NewAuth returns a new Auth
6789	ValidateRequest validates the request .
6790	Process processes the request .
6791	ValidateCN checks if the given certificate is valid .
6792	ValidateOUs checks if the certificate is valid .
6793	KeyLen returns the number of bytes .
6794	DefaultConfig returns a new Config instance
6795	New creates a new CertSigner
6796	New creates a new VaultFactory
6797	DefaultServiceConfig returns a new ServiceConfig instance
6798	NewService creates a new service .
6799	Delete deletes a cluster
6800	IsNoVaultHandlerDefined returns true if the error occurred .
6801	New creates a new service .
6802	Create creates a new vault .
6803	CreateJob creates a new Job .
6804	Run starts the worker .
6805	newWatcher creates a new watcher .
6806	Start starts the watcher .
6807	Stop stops the watcher .
6808	Active returns true if the watcher is active .
6809	Add adds paths to the watcher .
6810	watch starts watching the watcher .
6811	Watch returns a list of paths that are watching .
6812	State returns the state of the watcher .
6813	Store stores an error in the request .
6814	Get returns the error from the request .
6815	Catch adds an error to the middleware .
6816	Try panics if the handler fails .
6817	Recover returns a middleware that panics if the request fails .
6818	Main entry point .
6819	SyncHandler creates a new sync handler for a gostruct .
6820	connect connects to the server .
6821	send sends an update to the transport .
6822	NumConnections returns the number of connections .
6823	Push pushes the state to the queue .
6824	gopush updates the state of the state .
6825	NewOutForward creates a new OutForward
6826	Run starts the monitor .
6827	New creates a Fluent instance
6828	Close closes the Fluent connection .
6829	IsReconnecting returns true if the connection is reconnecting .
6830	connect connects to the server
6831	Create a new notification
6832	NullNotification creates a new notification .
6833	New returns a new Identity
6834	Issue creates a new identity
6835	Subject sets the Subject field s value .
6836	PrivateKey sets the private key
6837	NotBefore sets the NotBefore field s value .
6838	NotAfter sets the NotAfter field s value .
6839	IssuingCertificateURL sets the IssuingCertificateURL field s value .
6840	OCSPServer sets the ocsp server
6841	New creates a new TelegramBot API .
6842	NewWithWebhook creates a new Telegram BotBot API .
6843	Close closes the TelegramBot API .
6844	GetMe returns the current user .
6845	RunBot runs a new bot .
6846	RunBotOnWebhook runs a webhook on webhook
6847	NewOutgoingMessage creates a new OutgoingMessage instance
6848	NewOutgoingLocation returns a new OutgoingLocation instance
6849	NewOutgoingVenue creates a new OutgoingVenue instance
6850	NewOutgoingVideo creates a new OutgoingVideo instance
6851	NewOutgoingVideoResend returns a new OutgoingVideoResend .
6852	NewOutgoingPhoto creates a new OutgoingPhoto instance
6853	NewOutgoingPhotoResend returns a new OutgoingPhotoResend .
6854	NewOutgoingSticker creates a new OutgoingSticker instance
6855	NewOutgoingStickerResend returns a new OutgoingStickerResend .
6856	NewOutgoingVoice creates a new OutgoingVoice instance
6857	NewOutgoingVoiceResend returns a new OutgoingVoiceResend .
6858	NewOutgoingAudio creates a new OutgoingAudio instance
6859	NewOutgoingAudioResend returns a new OutgoingAudioResend .
6860	NewOutgoingDocument creates a new OutgoingDocument instance
6861	NewOutgoingDocumentResend returns a new OutgoingDocumentResend .
6862	NewOutgoingForward creates a new OutgoingForward .
6863	NewOutgoingChatAction creates a new OutgoingChatAction .
6864	NewOutgoingUserProfilePhotosRequest returns a new OutgoingUserProfilePhotosRequest instance
6865	NewOutgoingKickChatMember returns a new OutgoingKickChatMember instance
6866	NewOutgoingUnbanChatMember returns a new OutgoingUnbanChatMember instance
6867	NewOutgoingCallbackQueryResponse returns a new OutgoingCallbackResponse instance
6868	NewInlineQueryAnswer creates a new inline query answer
6869	Type returns the type of message .
6870	Type returns the type of the update .
6871	MarshalJSON serializes the recipient to a JSON string .
6872	queryWebhook returns the query string for outgoing WebSetWebhook
6873	getBaseQueryString returns the query string .
6874	getBaseQueryString returns the query string .
6875	queryString returns the query string as a query string .
6876	queryString returns the query string .
6877	queryUserProfile returns the query string as a query string .
6878	queryString returns the query string as a query string .
6879	queryString returns the query string as a query string .
6880	NewInlineQueryResult returns a new InlineQueryResult instance
6881	NewInlineQueryResult returns a new InlineQueryResult instance
6882	NewInlineQueryResult returns a new InlineQueryResult instance
6883	NewInlineQueryResultCreate a new InlineQueryResult instance
6884	NewInlineQueryResult returns a new InlineQueryResult instance
6885	Send sends a request to the outgoing user profile .
6886	Send sends an outgoing chat action .
6887	Send sends an inline query .
6888	Send sends a kick to the kick chat .
6889	Send a unbanChatMember
6890	Send sends the response to the outgoing callback .
6891	NewAPIClient creates a new API client
6892	BeforeInsert sets the Timestamp field s value .
6893	ColumnName returns a column name .
6894	New creates a new DB .
6895	From creates a From from the database .
6896	Where adds a condition to the database .
6897	OrderBy adds a condition to the query .
6898	Limit sets limit limit
6899	Offset adds the offset to the database .
6900	Join creates a join condition
6901	Count returns the number of columns in the database .
6902	Update updates the given object .
6903	Delete deletes an object
6904	Begin creates a transaction .
6905	Commit commits the transaction .
6906	Quote quotes a string .
6907	SetLogOutput sets the logger for the database .
6908	selectToSlice converts rows into a slice .
6909	selectToValue converts a row to a struct
6910	fieldIndexByName returns the index of the index by name .
6911	columns returns a string representation of a table .
6912	TagsFromField returns a slice of tags from a field .
6913	hasSkipTag returns true if the field is skipped .
6914	hasPKTag returns true if the field is a PK tag .
6915	isAutoIncrementable returns true if the field is autoIncrementable .
6916	collectFieldIndexes recursively collects all fields of the given type .
6917	findPKIndex finds the index for the given type .
6918	sizeFromTag returns the size of the given field .
6919	columnFromTag returns the column name from the field .
6920	defaultFromTag returns the default value for the given field .
6921	Where adds a condition to the condition .
6922	And adds a condition to the condition .
6923	Or adds a condition to the condition .
6924	Like adds a condition to the condition .
6925	Between sets the Between field
6926	OrderBy sets the ORDER BY clause .
6927	Limit sets limit limit
6928	Offset sets the offset of the condition .
6929	SetFormat sets the format for a template .
6930	Print logs the given query .
6931	Print logs a query .
6932	Quote returns a quoted string .
6933	SQLType returns the SQL type for the given type .
6934	New creates a new archive .
6935	Disconnect closes the host .
6936	nextNetworkAdapterID returns the next network adapter id
6937	totalNetworkAdapter returns total number of network adapters .
6938	Remove all network adapters
6939	Remove network adapter
6940	Network adapters
6941	newArchive creates a new archive
6942	GetFileReader returns an io . Reader for a given name .
6943	ExtractToWriter extracts a file from an archive .
6944	ExtractToFile writes a file to a file .
6945	SharedFoldersParentDir returns the path of the shared folder .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot removes the snapshot from the snapshot .
6949	BusTypeFromID returns the bus type .
6950	Read reads the virtual machine .
6951	Write writes the VMX file to disk .
6952	NewVirtualMachine creates a new VM .
6953	Vcpus returns the number of vcpus
6954	VmxPath returns the path of the VM .
6955	MemorySize returns the size of the VM .
6956	ReadOnly returns true if the VM is enabled .
6957	InVMTeam returns true if the VM is in the VM .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the guest tools state .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS .
6962	cleanupVM cleans up the VM .
6963	updateVMX updates the virtual machine
6964	SetMemorySize sets the memory size of the VM .
6965	SetNumberVCPU sets the number of vCPUs
6966	SetDisplayName sets the DisplayName field s value .
6967	SetAnnotation sets the Annotation field s value .
6968	SetVirtualHwVersion sets the VirtualHw field s value .
6969	Error returns the error message .
6970	Errorf returns an error with the given message .
6971	Error implements the TraceableError interface .
6972	String returns a string representation of the stack frame .
6973	newStackFrame returns a new stack frame .
6974	captureStack returns a slice of stack frames .
6975	parseFuncName parses a function name and returns the signature path .
6976	Stack prints a stack trace
6977	StackWithCaller prints a stack with the given error .
6978	Write writes p to w .
6979	ResponseStatus returns the status of the HTTP response .
6980	httpResponseStruct returns the http response struct .
6981	SetDetectedContent sets the content type of the response .
6982	New creates a new ServerError
6983	New creates a new DBError
6984	New creates a new validation error
6985	New creates a new instance of NotFoundError
6986	StrLength sets the length of a field
6987	StrLenIn returns a string representation of a string
6988	StrIn returns a string representation of the given field
6989	GetEmail checks if field is valid
6990	MostSpecificType returns the most recent type of the given types .
6991	FullTypeHierarchy returns the full hierarchy of the given type .
6992	SortTypes sorts a list of types .
6993	Delete deletes a key .
6994	Set sets a redis store
6995	refresh refreshes the session
6996	Get returns a redis store
6997	Destroy removes a session
6998	Updates the session with the given sid .
6999	Use adds a handler to the stack .
7000	ServeHTTP implements the http . Handler interface .
7001	Use adds middleware to the router group .
7002	Group returns a new router group .
7003	Run starts the server .
7004	create creates a new router
7005	Redirect redirects to the given URL .
7006	Ok writes data to JSON .
7007	Fail writes an error to the server .
7008	ResStatus implements the http . ResponseWriter interface .
7009	Next implements the Handler interface .
7010	GetSession returns the session
7011	GetBodyJSON gets the body of the request body
7012	SetSession sets the session with the given key .
7013	FreshSession creates a new session for the given key .
7014	DeleteSession deletes the session
7015	Write writes data to the response .
7016	WriteHeader writes the response code to the response .
7017	New creates a new client .
7018	setAllowLargeResults sets the limit for the query .
7019	connect returns a new BigQuery instance
7020	InsertRow inserts a row into a table .
7021	AsyncQuery sends a query to the server .
7022	Query returns a list of data from a dataset .
7023	stdPagedQuery is used to process a single query .
7024	LargeDataPagedQuery executes a large query .
7025	pagedQuery executes a paged query and returns a list of results .
7026	pageOverJob runs the query over the results of a job .
7027	Count returns the number of rows in the database .
7028	work is a helper function that returns the crawl result .
7029	subworker runs subprocess
7030	worker starts a worker
7031	supervisor loop .
7032	Run starts the pool .
7033	Add a new job
7034	Wait waits until the pool is ready .
7035	Results returns a slice of jobs .
7036	WaitForJob waits for a job to wait for a job to wait for the result .
7037	Status returns the status of the supervisor .
7038	WrapHTTPHandlerFunc wraps http . HandlerFunc .
7039	WebSocketHandlerFunc returns a HandlerFunc that wraps the given function .
7040	StaticFile creates a static static file .
7041	PreloadFile loads a preload file .
7042	InitHtmlTemplates initializes html templates .
7043	InitTextTemplates initializes text templates .
7044	Html creates a new html template
7045	Text renders a text template
7046	InitWatcher initializes a watcher
7047	CloseWatcher closes the watcher .
7048	Find finds a route by path .
7049	Add registers a new router .
7050	NewRouters returns a new Router .
7051	NewServerMux returns a new ServerMux
7052	error handles the error handler
7053	HandleFunc adds a handler to the router .
7054	handleError is used to handle errors .
7055	Redirect redirects to the response .
7056	InitPProf initializes pprof
7057	StartSession starts the session .
7058	combine returns a list of combinations of the given list .
7059	repeated_combinations is a convenience function that takes a list of elements and returns a channel .
7060	permutes the permutations of a list .
7061	repeated permutations .
7062	convert a string to a string
7063	Erorm returns an error with the given format .
7064	Fprintm implements io . Writer
7065	Printm prints a message with the given arguments .
7066	Stringm returns a string representation of the given format .
7067	Validate validates the password strength .
7068	MakeRequirements returns a new password strength based on the given password .
7069	Checks that the password strength is valid .
7070	Password returns the password for the given password .
7071	NewPassword creates a new password
7072	NewPasswords creates a new list of passwords .
7073	addNums adds numDigits to a string
7074	Parses a string into a random string .
7075	deprecated_init is used to initialize stdin .
7076	Param adds a parameter to the set .
7077	Parse parses the parameters from the given reader .
7078	Unmarshal unmarshals the ParamSet into a ParamSet .
7079	GetDefaultHTTPClient returns the default http client
7080	DeviceInfo returns device info
7081	DevicePresence returns DevicePresence response .
7082	Get Notification Status
7083	DeleteNotification deletes a notification
7084	NotifyDevice sends a device .
7085	Assert asserts whether the given Tester is true .
7086	CreateFile creates a new file .
7087	AddError adds an error to the form .
7088	AddFieldError adds an error to the form .
7089	HasErrors returns true if the FormErrors has errors .
7090	NewError creates a new FormErrors
7091	NewFieldError creates a new form error .
7092	ChainHandlers invokes the given handlers .
7093	FinalHandler returns a function that wraps the http . Handler .
7094	Hash implements the MD5 interface .
7095	IsHash checks if the given string is a valid hash .
7096	WithBaseDir sets the base directory for the given directory .
7097	WithFileFindFunc sets the filefindFunc for the given filename
7098	WithTemplateFromFiles sets the template from the given files .
7099	WithTemplatesFromFiles sets the templates from files .
7100	WithTemplateFromStrings sets the template from the given string .
7101	WithTemplatesFromStrings sets the templates from strings .
7102	WithFunction adds a function to the options map
7103	WithFunctions adds functions to the options map
7104	WithDelims adds the delimiter to the options .
7105	New returns a new Template
7106	RespondWithStatus renders a response with status code .
7107	RespondTemplate renders a template with the given name .
7108	Respond responds with the given name .
7109	RenderTemplate renders a template
7110	New creates a new server
7111	ServeUDP implements the Server interface .
7112	Shutdown shuts down the server .
7113	QuicHeadersHandler sets the QuicHeaders handler .
7114	GetRequestIPs returns the IP address of the request .
7115	DomainRedirectHandler adds a domain redirect handler to the given domain .
7116	New returns a new Servers .
7117	Add adds a new server
7118	TCPAddr returns the TCP address for the given name .
7119	UDPADr returns the UDP address for the given name .
7120	Close closes all servers .
7121	Shutdown shuts down all servers .
7122	Accept accepts a TLS connection and returns it .
7123	NewStaticFilesHandler creates a new http handler for static files .
7124	ServeHTTP implements the http . Handler interface .
7125	MarshalJSON marshals options to JSON .
7126	UnmarshalJSON deserializes the options from JSON .
7127	MarshalYAML marshals options to JSON .
7128	UnmarshalYAML unmarshals the options .
7129	NewHandler creates a new http . Handler .
7130	WithPanicResponse sets the panic response body
7131	WithPanicResponseHandler sets the panic response handler
7132	New creates a new Handler
7133	ServeHTTP implements the http . Handler interface .
7134	NewContextFunc returns a new context for the given map .
7135	NewMapErrorRegistry creates a new MapErrorRegistry
7136	AddError adds an error to the map
7137	AddMessageError adds an error to the map
7138	MustAddError registers an error with the given code .
7139	MustAddMessageError adds a message error to the map
7140	AddHandler adds a handler to the map
7141	MustAddHandler adds a handler to the map
7142	Handler returns the handler for the given code .
7143	New creates a new client .
7144	Request sends a request to the client .
7145	JSONContext sends a JSON request to the server .
7146	StreamContext sends a request to the client .
7147	Stream sends a request to the client .
7148	JSONUnmarshal unmarshals the given data into an object .
7149	ServeTCP implements the Server interface .
7150	ServeTCP implements the Server interface .
7151	Shutdown shuts down the server .
7152	HandleMethods implements the http . Handler interface .
7153	NewSetHeadersHandler creates a new http . Handler .
7154	New creates a new server .
7155	HashedPath returns the path for a file .
7156	New creates a new service .
7157	HTMLHandler returns the HTTP handler for the service .
7158	Status returns the status of the service .
7159	StatusHandler implements the Service interface .
7160	OnHandler implements the Service interface .
7161	OffHandler implements the Service interface .
7162	MarshalJSON implements the PostIRCMessage interface .
7163	MarshalJSON implements the PostArtifact interface .
7164	MarshalJSON implements the PostArtifactResponse interface for PostArtifactResponse .
7165	MarshalJSON marshals the HookChangedMessage to JSON .
7166	MarshalJSON marshals the TriggerHookRequest .
7167	MarshalJSON marshals the TriggerHookResponse to JSON .
7168	UnmarshalJSON deserializes a TriggerHookResponse from a JSON object .
7169	MarshalJSON marshals the LaunchInfo to JSON .
7170	MarshalJSON returns the JSON representation of the Var .
7171	MarshalJSON marshals the Var1 to JSON .
7172	MarshalJSON marshals the Var3 object to JSON .
7173	MarshalJSON marshals a Time into a byte slice .
7174	UnmarshalJSON unmarshals a Time . Time .
7175	Write implements io . Reader .
7176	Seek implements io . Reader .
7177	Read implements io . Reader .
7178	MarshalJSON marshals the LaunchSpecsResponse to JSON .
7179	MarshalJSON serializes this RegionLaunchSpec .
7180	GenerateCode generates the code for the API .
7181	postPopulate is used to populate the schema
7182	CreateTemporaryCredentials creates a temporary Credentials .
7183	setURL sets the URL for a route
7184	SignRequest is used to sign the request
7185	APICall calls the API method .
7186	SignedURL returns a signed URL for a given route .
7187	MarshalJSON marshals the HawkSignatureResponse to JSON .
7188	bmw256 encodes the input into a byte slice .
7189	NewCubeHash creates a new CubeHash
7190	CubeHash256 computes the cube hash .
7191	Sum returns the sum of data .
7192	merge the state of the given state .
7193	reduceSqueezeRow0 computes the row of the given row .
7194	reduceDuplexlexRow1 removes all rows from the given row .
7195	NewReaderByteCodeLoader returns a new Reader instance
7196	LoadReader loads the given reader from the given reader .
7197	NewV3 creates a new UUID .
7198	transitLiteral initializes the current state .
7199	txFetchSymbol fetches the symbol from the state .
7200	txMarkRaw marks the state of the current state .
7201	TransactionUnmarkRaw removes the raw value from the state .
7202	TxPrint prints the output of the current state .
7203	TxPrintRaw prints the raw output as a string .
7204	NewLoopVar creates a new loop variable .
7205	TxMakeArray creates a new array of elements .
7206	translCallOmni invokes the given function .
7207	DumpAST sets the flags of the flags .
7208	DumpByteCode sets the flags of the flags flag .
7209	Optimize optimizes the given bytecode .
7210	NewFuncDepot creates a new FuncDep .
7211	Get returns the value of the depot
7212	Set sets the value of a function .
7213	NewFileTemplateFetcher returns a new FileTemplateFetcher instance
7214	LastModified returns the last modified time .
7215	Reader returns an io . Reader
7216	Bytes returns the contents of the file .
7217	NewState creates a new state .
7218	PushFrame creates a new frame .
7219	PopFrame returns the frame .
7220	CurrentFrame returns the current frame .
7221	Warnf writes a warning message .
7222	AppendOutputString appends a string to the output .
7223	Popmark removes the current mark .
7224	CurrentMark returns the current mark .
7225	LoadByteCode loads a byte code from the database .
7226	Reset initializes the state .
7227	DeclareVar adds a variable to the stack .
7228	GetLVar returns the value at the given index .
7229	SetLvar sets the value to the stack .
7230	NewByteCode returns a new ByteCode instance
7231	Append appends an opcode to the buffer .
7232	AppendOp implements the ByteCode interface .
7233	String returns a string representation of the ByteCode .
7234	NewCachedByteCodeLoader returns a new CachedByteCodeLoader .
7235	Load loads a template from the cache .
7236	NewFileCache returns a new FileCache instance
7237	GetCachePath returns the path for the given key .
7238	Get retrieves the cache entity from the cache .
7239	Set implements the Cache interface .
7240	Delete removes a key from the cache
7241	Get returns the cache entity .
7242	Set a cache entity
7243	Delete removes a key from the cache .
7244	NewStringLexer creates a new Lexer .
7245	NewReaderLexer creates a new parser .
7246	NewV4 creates a new UUID .
7247	Parse parses a template
7248	ParseReader parses the given reader .
7249	Visit returns a channel .
7250	String returns a string representation of the AST .
7251	Run implements the VM .
7252	DefaultParser is the default parser .
7253	DefaultLoader initializes the default loader .
7254	DefaultVM creates a new VM .
7255	Get returns the value of the given key .
7256	NewHTTPSource creates a new HTTPSource
7257	NewStringByteCodeLoader returns a new StringByteCodeLoader instance
7258	LoadString loads a string from a string .
7259	Get returns the value of the given key .
7260	NewOp creates a new op
7261	MarshalBinary encodes the operation into a byte array .
7262	UnmarshalBinary unmarshals an op .
7263	ArgInt returns the value of the argument .
7264	ArgString returns the string representation of the operation .
7265	AppendOp adds an op to the buffer .
7266	Compile compiles the given AST .
7267	NewV5 creates a new UUID .
7268	Sort returns a list of LexSymbolList .
7269	Less returns true if the given index is less than j .
7270	Swap swaps the elements in the lexical order .
7271	Copy returns a copy of LexSymbolSet .
7272	Set sets a new symbol .
7273	GetSortedList returns the list of lexical symbols .
7274	Top returns the top of the stack .
7275	Resize resizes the stack
7276	Extend implements the Stack interface .
7277	Increases the size of the stack .
7278	Get returns the value at the given index .
7279	Set implements Stack interface .
7280	Push adds an element to the stack .
7281	Pop removes the stack from the stack .
7282	String returns a string representation of Stack .
7283	GetHostIPs returns the list of IP addresses .
7284	GetPrivateHostIPs returns a list of private IP addresses .
7285	IsPrivate returns true if the given IP is private .
7286	Environ returns a list of environment variables .
7287	getenv returns the value of the environment variable
7288	FlagAsEnv returns the name of a flag .
7289	NewPolicy returns a new Policy instance
7290	CreateRandom returns a random slice of random bytes .
7291	Shuffle takes a slice of bytes .
7292	Generate generates the password for a policy .
7293	ExecutableFolder returns the path of the executable .
7294	Ignore adds an error to the Sentinel .
7295	Sigs sets the signal s signals .
7296	Logf sets the logf function
7297	Errorf sets the errorf function
7298	New returns a new Sentinel instance
7299	Run starts the server .
7300	Shutdown shuts down the daemon .
7301	ShutdownIgnore returns true if the given error occurs .
7302	Register registers a server .
7303	Mux creates a new netmux .
7304	HTTP registers an HTTP server .
7305	IgnoreError returns true if the given error is ignored .
7306	IgnoreNetOpError returns true if the error occurs .
7307	convertAndAppendContextFuncs converts a slice of Contexts to an array of functions .
7308	Router returns a router for the given service .
7309	buildInfoHandler implements the http . Handler interface .
7310	Encode encodes v into JSON .
7311	Json parses a JSON - RPC request .
7312	validateAndMap maps the given object to the given object .
7313	Count returns the number of errors .
7314	Header returns the headers for the given origin .
7315	PreflightHeader returns the headers for the given request .
7316	IsOriginAllowed returns true if the origin is allowed .
7317	Allow returns an http . Handler that can be used to allow the HTTP request to allow the request headers .
7318	Render renderer .
7319	String returns a string representation of AcceptLanguages .
7320	Language returns a new AcceptLanguages .
7321	Prefix adds a prefix to the middleware
7322	Basic authenticates the given username and password .
7323	UpdateUser updates a user .
7324	GetById gets a user by id
7325	AddressToAccountId converts an address to an account id .
7326	MutateChangeTrust mocks base method
7327	MutateChangeTrust mocks base method
7328	Trust returns a ChangeTrustBuilder .
7329	RemoveTrust returns a ChangeTrustBuilder .
7330	MutatePayment modifies the payment amount
7331	MutatePayment mocks base method
7332	MutatePayment modifies the amount of payment operations
7333	MutatePayment implements PayloadOp .
7334	MutateAccountMerge mocks base method
7335	MustParse parses a string .
7336	Parse parses a string .
7337	String returns a string representation of x .
7338	CreateOffer creates a new offer .
7339	CreatePassiveOffer creates a new ManageOffer .
7340	UpdateOffer updates an offer .
7341	DeleteOffer deletes an offer
7342	ManageOffer returns a ManageBuilder instance
7343	Mutate mocks base method
7344	MutateManageOffer parses a ManageOffer .
7345	MutateManageOffer mocks base method
7346	MutateManageOffer converts an object to a ManageOffer
7347	MutateOperation mocks base method
7348	String returns a string representation of Price
7349	Transaction creates a new transaction builder .
7350	Mutate mocks base method
7351	Hash returns the hash of the transaction builder .
7352	HashHex returns the transaction hash .
7353	Sign signs the transaction .
7354	MutateTransaction mocks base method
7355	MutateTransaction mocks base method
7356	MutateTransaction mocks base method
7357	MutateTransaction modifies the transaction builder .
7358	MutateTransaction mocks base method
7359	MutateTransaction mocks base method
7360	MutateTransaction mocks base method
7361	MutateTransaction mocks base method
7362	MutateTransaction mocks base method
7363	MutateTransaction mocks base method
7364	MutateTransaction mocks base method
7365	MutateTransaction mocks base method
7366	MutateTransaction mocks base method
7367	MutateTransaction mocks base method
7368	MutateTransaction mocks base method
7369	MutateTransaction mocks base method
7370	Scan sets the Int64 field s value .
7371	InitialState returns the initial state of the ledger .
7372	Changes returns the changes for the given target key .
7373	StateAfter returns the state of the ledger .
7374	changes returns a list of all of the transactions in the bundle .
7375	MustDecode decodes a string into a byte slice .
7376	Encode encodes a byte slice into a string .
7377	MustEncode encodes a byte slice into a string .
7378	checkValidVersionByte checks if the given version is valid .
7379	Checksum checksum of data
7380	Validate validates the given data .
7381	LedgerKey returns the LedgerKey .
7382	checkPlausible checks if the prefix is present .
7383	Address returns the address of the account .
7384	Equals returns true if the accountId is equal .
7385	SetAddress sets the AddressId field s value .
7386	ToXdrObject converts an asset to an XDR object .
7387	Through adds an asset to the path .
7388	PayWith returns a PayWithPath with the given amount .
7389	Returns the fraction of the given price .
7390	Mutate mocks base method
7391	MutateTx mocks base method
7392	Bytes returns the bytes of the transaction envelope .
7393	Base64 returns the base64 encoded string .
7394	MutateTransactionEnvelope mocks base method
7395	MutateSetOptions mocks base method
7396	MutateSetOptions mocks base method
7397	MutateSetOptions mocks base method
7398	MutateSetOptions mocks base method
7399	SetThresholds returns a new Thresholds .
7400	MutateSetOptions mocks base method
7401	MutateSetOptions mocks base method
7402	MutateSetOptions mocks base method
7403	MutateCreateAccount mocks base method
7404	MutateCreateAccount mocks base method
7405	Random returns a random seed .
7406	Master returns a master key from the network .
7407	Parse parses an address from the given address .
7408	MustParse parses the given address and returns it .
7409	MutateAllowTrust mocks base method
7410	MutateAllowTrust mocks base method
7411	MutateAllowTrust mocks base method
7412	ToAssetOp converts an asset to an asset .
7413	SetNative sets the asset type .
7414	String returns a string representation of the asset .
7415	Equals returns true if the asset is equal .
7416	MustExtract attempts to extract an asset from an asset .
7417	Unmarshal implements io . Unmarshaler interface .
7418	Marshal implements io . Writer .
7419	ValidEnum returns true if the given value is valid .
7420	NewPublicKey creates a new public key .
7421	MustEd25519 returns the UUID of the public key .
7422	NewNodeId creates a new node id
7423	NewAccountId creates a new account id
7424	ValidEnum returns true if the given value is valid .
7425	ArmForSwitch returns the arm for the switch type .
7426	NewAsset creates a new Asset .
7427	MustAlphaNum4 returns the asset alpha for the asset .
7428	GetAlphaNum4 returns the AlphaNum of the asset .
7429	MustAlphaNum returns the asset alpha .
7430	GetAlphaNum returns the AlphaNum for the asset .
7431	ValidEnum returns true if the given value is valid .
7432	ValidEnum returns true if the given value is valid .
7433	ValidEnum returns true if the given value is valid .
7434	NewAccountEntryExt returns a new account entry .
7435	ValidEnum returns true if the given value is valid .
7436	NewTrustLineEntryExt returns a new TrustLineEntryExt instance
7437	ValidEnum returns true if the given value is valid .
7438	NewOfferEntryExt returns a new OfferEntryExt instance
7439	NewDataEntryExt returns a new DataEntry .
7440	NewLedgerEntryData creates a new LedgerEntry .
7441	NewLedgerEntryExt returns a new LedgerEntryExt .
7442	ValidEnum returns true if the given value is valid .
7443	ValidEnum returns true if the given value is valid .
7444	ArmForSwitch returns the ArmOp for the switch .
7445	NewAllowTrustOpAsset returns a new AllowTrustOp instance
7446	MustAssetCode4 returns the asset code for the asset .
7447	GetAssetCode4 returns the asset code for an asset .
7448	MustAssetCode12 returns the asset code for the asset .
7449	GetAssetCode12 returns the asset code for an asset .
7450	NewOperationBody creates a new OperationBody
7451	MustCreateAccountOp returns the CreateAccountOp if it exists .
7452	GetCreateAccountOp returns the CreateAccountOp for the operation .
7453	MustPaymentOp returns the payment op .
7454	GetPaymentOp returns the payment operation for the operation .
7455	MustPathPaymentOp returns the PathPaymentOp .
7456	GetPathPaymentOp returns the PathPaymentOp
7457	MustManageOfferOp returns a ManageOp .
7458	GetManageOfferOp returns the ManageOp for the operation .
7459	MustCreatePassiveOfferOp returns a CreatePassiveOfferOp .
7460	GetPassiveOfferOp returns true if the operation is active .
7461	MustSetOptionsOp returns a SetOptionsOp .
7462	GetSetOptionsOp returns the set options for the operation .
7463	MustChangeTrustOp returns the ChangeTrustOp if it is not present .
7464	GetChangeTrustOp returns the ChangeTrustOp for the operation .
7465	MustAllowTrustOp returns the AllowTrustOp field if not found .
7466	GetAllowTrustOp returns true if the operation is allowed .
7467	MustDestination returns the accountId of the operation .
7468	GetDestination returns the address of the operation .
7469	MustManageDataOp returns a ManageDataOp .
7470	GetManageData returns the ManageDataOp .
7471	ValidEnum returns true if the given value is valid .
7472	ArmForSwitch returns the arm for the switch .
7473	NewMemo creates a new Memo .
7474	MustText returns the value of the Memo .
7475	GetText returns the text of the memo .
7476	MustId returns the id of the Memo .
7477	GetId returns the id of the Memo
7478	MustHash returns the hash of the Memo .
7479	GetHash returns the hash of the memo .
7480	MustRetHash returns the hash of the Memo .
7481	NewTransactionExt returns a new TransactionExt .
7482	ValidEnum returns true if the given value is valid .
7483	ArmForSwitch returns the arm for switch
7484	NewCreateAccountResult returns a new CreateAccountResult instance
7485	ValidEnum returns true if the given value is valid .
7486	ArmForSwitch returns the arm for switch .
7487	NewPaymentResult creates a payment result .
7488	ValidEnum returns true if the given value is valid .
7489	ArmForSwitch returns the arm for the switch .
7490	NewPathPaymentResult creates a new PathPaymentResult
7491	MustNoIssuer returns the AssetPayment field if not present .
7492	GetNoIssuer returns the NoIssuer associated with the switch .
7493	ValidEnum returns true if the given value is valid .
7494	ValidEnum returns true if the given value is valid .
7495	ArmForSwitch returns the arm for the switch .
7496	NewManageOfferSuccessResult returns a new ManagerSuccessResult instance
7497	ArmForSwitch returns the arm for the switch .
7498	NewManageOfferResult returns a new ManageOfferResult instance
7499	ValidEnum returns true if the given value is valid .
7500	ArmForSwitch returns the arm for the switch .
7501	NewSetOptionsResult returns a new SetOptionsResult
7502	ValidEnum returns true if the given value is valid .
7503	ArmForSwitch returns the arm for the switch .
7504	NewChangeTrustResult returns a new ChangeTrustResult instance
7505	ValidEnum returns true if the given value is valid .
7506	ArmForSwitch returns the arm for the switch .
7507	NewAllowTrustResult creates a new instance of AllowTrustResult
7508	ValidEnum returns true if the given value is valid .
7509	ArmForSwitch returns the arm for switch .
7510	NewAccountMergeResult returns a new AccountMergeResult instance
7511	MustSourceAccountBalance returns the source account balance .
7512	GetSourceAccountBalance returns the source account balance
7513	ValidEnum returns true if the given value is valid .
7514	ArmForSwitch returns the arm for switch .
7515	NewInflationResult creates a new InflationResult
7516	MustPayouts returns a slice of InflationPayouts .
7517	GetPayouts returns the list of Payouts for the switch .
7518	ValidEnum returns true if the given value is valid .
7519	ArmForSwitch returns the arm for the switch .
7520	NewManageDataResult returns a new ManageDataResult instance
7521	ValidEnum returns true if the given value is valid .
7522	ArmForSwitch returns the arm for the switch .
7523	NewOperationResultTr creates a new OperationResult from an OperationType
7524	MustCreateAccountResult returns the CreateAccountResult instance
7525	GetCreateAccountResult returns the result of the operation result .
7526	MustPaymentResult returns the payment result .
7527	GetPaymentResult returns the payment result .
7528	MustPathPaymentResult returns the PathPaymentResult .
7529	GetPathPaymentResult returns the PathPaymentResult
7530	MustManageOfferResult returns the result of the OperationResult .
7531	GetManageOfferResult returns the ManageOfferResult for the operation .
7532	MustCreatePassiveOfferResult returns a ManageOfferResult instance
7533	MustSetOptionsResult returns the result of the operation result .
7534	GetSetOptionsResult returns the set options for the operation .
7535	MustChangeTrustResult returns the change trust result .
7536	GetChangeTrustResult returns the change trust result .
7537	MustAllowTrustResult returns the AllowTrustResult .
7538	GetAllowTrustResult returns the AllowTrustResult for the operation .
7539	MustAccountMergeResult returns the account merge result .
7540	GetAccountMergeResult returns the account merges result .
7541	MustInflationResult returns the value of the OperationResult .
7542	GetInflationResult returns the result of the operation .
7543	MustManageDataResult returns the result of the operation result .
7544	GetManageDataResult returns the ManageDataResult result .
7545	ArmForSwitch returns the arm for switch .
7546	NewOperationResult creates an OperationResult from the given value .
7547	MustTr returns the result of the operation result .
7548	GetTr implements OperationResult .
7549	ValidEnum returns true if the given value is valid .
7550	ArmForSwitch returns the arm for switch .
7551	NewTransactionResultResultResult returns a TransactionResultResult instance
7552	MustResults returns the result of the operation result .
7553	GetResults returns the result of the operation result .
7554	NewTransactionResultExt returns a transaction result .
7555	NewStellarValueExt returns a new StellarValueExt instance
7556	NewLedgerHeaderExt returns a new LedgerHeaderExt .
7557	ValidEnum returns true if the given value is valid .
7558	ArmForSwitch returns the arm for the switch switch .
7559	NewLedgerUpgrade creates a new ledger upgrade .
7560	MustNewLedgerVersion returns the latest version of the LedgerUpgrade upgrade .
7561	GetNewLedgerVersion returns the new LedgerVersion for the switch upgrade .
7562	MustNewBaseFee returns the new base baseFee .
7563	GetNewBaseFee returns a new instance of the current upgrade .
7564	MustNewMaxTxSetSize returns the maxTxSet size of the ledger upgrade .
7565	GetNewTxSetSize returns the current state of the ledger upgrade .
7566	ArmForSwitch returns the arm for the switch .
7567	NewLedgerKey creates a new LedgerKey
7568	ValidEnum returns true if the given value is valid .
7569	ArmForSwitch returns the arm for the switch entry .
7570	NewBucketEntry creates a new bucket entry .
7571	MustLiveEntry returns the LedgerEntry .
7572	GetLiveEntry retrieves the LedgerEntry from the bucket .
7573	MustDeadEntry returns the LedgerKey for the bucket .
7574	GetDeadEntry returns the state of the LedgerEntry .
7575	NewTransactionHistoryEntryExt returns a new transaction history entry .
7576	ArmForSwitch returns the arm for switch .
7577	NewTransactionHistoryResultEntryExt returns a new transaction history entry .
7578	NewLedgerHeaderHistoryEntryExt returns a new LedgerHeaderEntryExtensionEntry instance
7579	NewScpHistoryEntry creates a new ScpHistoryEntry .
7580	ValidEnum returns true if the given value is valid .
7581	ArmForSwitch returns the arm for the given switch .
7582	NewLedgerEntryChange creates a new LedgerEntryChange .
7583	MustCreated returns the LedgerEntry if it exists .
7584	GetCreated returns the LedgerEntry of the LedgerEntry
7585	MustUpdated returns the updated LedgerEntry .
7586	GetUpdated returns the updated LedgerEntry
7587	MustRemoved returns the value of the LedgerEntry .
7588	GetRemoved returns the state of the LedgerEntry
7589	MustState returns the state of the LedgerEntry .
7590	GetState returns the state of the LedgerEntry
7591	NewTransactionMeta returns a TransactionMeta struct
7592	MustOperations returns all operations in the transaction meta .
7593	GetOperations returns the operation metadata for the switch .
7594	ValidEnum returns true if the given value is valid .
7595	ValidEnum returns true if the given value is valid .
7596	ArmForSwitch returns the arm for the given switch .
7597	NewPeerAddressIp creates a new peer address .
7598	MustIp4 returns the address of the peer address .
7599	GetIp4 returns the ipv4 address of the peer .
7600	MustIp6 returns the ipv6 address .
7601	GetIp6 returns the ipv6 address
7602	ValidEnum returns true if the given value is valid .
7603	ArmForSwitch returns the arm for the given swagger
7604	NewStellarMessage creates a new StellarMessage instance
7605	MustError returns the error if there is no error .
7606	GetError returns the error of the stellar message .
7607	MustHello returns the Hello message .
7608	GetHello implements the StellarMessage interface .
7609	MustAuth returns the auth message .
7610	GetAuth returns the Auth field of the stellar message .
7611	MustDontHave returns the value if it s not present .
7612	GetDontHave returns true if the message is not present .
7613	MustPeers returns a slice of peers .
7614	GetPeers returns a list of peer addresses .
7615	MustTxSetHash returns the value of the transaction set .
7616	GetTxSetHash returns the value of the transaction set .
7617	MustTxSet returns the transaction set .
7618	GetTxSet returns the transaction set .
7619	MustTransaction returns the current transaction .
7620	GetTransaction returns a TransactionEnvelope from the StellarMessage
7621	MustQSetHash returns the QSet hash .
7622	GetQSetHash returns the QSet hash for this message .
7623	MustQSet returns the QPQuorumSet field .
7624	GetQSet returns the QSet associated with this message .
7625	MustEnvelope returns the scpEnvelope if it s not present .
7626	GetEnvelope returns the scpEnvelope of the StellarMessage
7627	MustGetScpLedger returns the current scpLedgerSeq .
7628	GetScpLedger returns the current scpLedgerSeq .
7629	ArmForSwitch returns the arm for the switch
7630	NewAuthenticatedMessage creates a new AuthenticatedMessage
7631	ValidEnum returns true if the given value is valid .
7632	ArmForSwitch returns the switch for the switch .
7633	NewScpStatementPledges creates a new scp statement .
7634	MustPrepare returns the value of the PrepareStatement .
7635	GetPrepare returns the result of the switch .
7636	MustConfirm returns the current instance of the ScpStatement .
7637	GetConfirm returns the state of the switch .
7638	MustExternalize returns the value of this ScpStatement .
7639	GetExternalize returns the externalize value for the switch .
7640	MustNominate returns the value of the scp statement .
7641	GetNominate returns the Nominate field of the switch .
7642	SafeUnmarshalBase reads the given data from a string .
7643	SafeUnmarshal converts data to dest .
7644	SendAmount returns the amount of paid amount
7645	LoadAccount loads an account
7646	SequenceForAccount returns the sequence number for the given account ID .
7647	SubmitTransaction submit a transaction .
7648	Equals returns true if the given key is equal .
7649	SetAccount sets the account id .
7650	SetData implements the LedgerKey interface .
7651	SetOffer implements the LedgerKey interface .
7652	SetTrustline implements the LedgerKey interface .
7653	Add adds a key to the chain .
7654	tryHash computes the hash of the hash .
7655	HashIndexFromKey returns the index of the given key .
7656	ReadInt returns a uint64 .
7657	Read implements io . Reader .
7658	Get returns the value for the given key .
7659	Iterate returns a new Iterator .
7660	Write implements io . Writer interface .
7661	RegisterDatasources registers a map of maps .
7662	RegisterFonts registers a map of fonts .
7663	New creates a new map
7664	NewSized returns a new Map .
7665	Load loads a map from the map
7666	Resize the map .
7667	Free releases the map .
7668	SRS returns the location of the map .
7669	ZoomAll returns the zoom level of the map .
7670	ZoomTo zoom to the map
7671	Render renders the given map .
7672	RenderImage renders an image from the map
7673	RenderToFile renders the map to a file .
7674	SetBufferSize sets the size of the map .
7675	Search returns a list of search responses .
7676	Get returns a new connection .
7677	put adds a new connection to the pool .
7678	Convert stereoF32F32 converts a buffer to a stereo format .
7679	BitCrush computes the bits of the given buffer .
7680	NormalizeMax returns the max value of the audio buffer .
7681	 Gain Gain Gain
7682	FlinkDown mixes the audio buffer .
7683	Quantize computes the quantize of the audio buffer .
7684	PCMScale performs a PCM scale on the buffer .
7685	StereoPan panics
7686	Leader returns the leader .
7687	IsLeader returns true if the candidate is leader .
7688	NewResponse creates a new Response
7689	GetRequestID returns the request ID from the context .
7690	Log logs the monitor .
7691	SendMailSSL sends a mail to the given address .
7692	Send sends a message to the mail service .
7693	WaitForIt waits for a connection to the given host and returns an error .
7694	Get config from source
7695	initConfig initializes the Viper
7696	WritePluginResultsToDatabase writes the results to the database .
7697	NewAuthController returns a new AuthController instance
7698	Authenticate authenticates the user .
7699	NewOAuth2Controller creates a new OAuth2Controller
7700	Refresh refresh token
7701	Token handles OAuth2 requests .
7702	Logging creates a new http . Handler .
7703	SingleFile returns a http . Handler for a single file .
7704	Write writes data to the response .
7705	Hijack implements the http . Handler interface .
7706	NewMongo returns a new MongoDB instance
7707	Disconnect closes the MongoDB connection .
7708	New creates a new table .
7709	PrintTable prints a table of rows .
7710	PrintHorizontal prints the given map .
7711	PrintRow prints a row to a table
7712	AddRow adds a row to the table
7713	Print the table
7714	String returns a string representation of the table
7715	getHead returns the head of the table
7716	rowString returns a string representation of a row
7717	fieldString returns the string representation of a field .
7718	stringTableDash returns a string representation of the table .
7719	printMarkdownDash prints the markdown table .
7720	stringMarkdownMarkdown returns a string representation of the table .
7721	HashPassword returns the hash of the given password .
7722	EncodeOAuth2Code encodes the OAuth2 API response .
7723	DecodeOAuth2Code decodes an OAuth2 code .
7724	NewServer creates a new server
7725	Start starts the server .
7726	Stop stops the server .
7727	NewLoggingServeMux returns a new LoggingServeMux .
7728	Handler implements the Handler interface .
7729	Handle implements the Handler interface .
7730	HandleFunc registers a handler for the given pattern .
7731	Init initializes the database .
7732	WaitForConnection waits for a connection to the database .
7733	StoreFileInfo stores the file in the database .
7734	Store plugin results
7735	Convert camelCase to CamelCase
7736	GetOpt returns the value of the named option
7737	Get opts from user input
7738	GetSHA256 returns the SHA256 hash of a file .
7739	RunCommand runs a command .
7740	RemoveDuplicates removes duplicates .
7741	Unzip unzip a zip archive
7742	SliceContainsString returns true if a string contains a string .
7743	NewSMTP creates a SMTP instance
7744	SendMail sends a message to SMTP
7745	GetEnvironment returns the environment for the given environment .
7746	GetSMTP returns the SMTP configuration
7747	GetConfig returns the server configuration .
7748	GetEnvironment returns the environment for the given environment .
7749	GetMongo returns the mongo configuration
7750	TokenHandler creates a new token handler for the given request .
7751	Receive sends a message to the server .
7752	Send sends a message .
7753	allBoshReleaseNames returns a list of all BoshReleaseNames .
7754	AddedProperty adds a new property to the delta .
7755	RemovedProperty adds a property to the delta .
7756	AddDeltaJob adds a new delta job to the result .
7757	Concat adds the result to the result .
7758	Read reads a release from a release location
7759	Pull downloads a release
7760	BuildJob builds a job .
7761	LoadBoshRelease loads the given path from the repository .
7762	readBoshRelease reads a BoshRelease from an io . Reader .
7763	readBoshRelease reads from the given io . Reader .
7764	readBoshJob reads the job manifest from the given io . Reader .
7765	NewRequest creates a new http request .
7766	PushCloudConfig pushes a cloud config to the server
7767	Generate generates an object for the given package manifest .
7768	CreateNewRecord creates a new record .
7769	NewShowCmd returns a new ShowCmd instance
7770	All returns the full version of the command .
7771	GetDefaultTaskImageResource returns the default image resource resource .
7772	AddRawJob adds a job to the pipeline .
7773	AddGroup adds a new group to the pipeline .
7774	GetResourceByName returns the resource by name .
7775	AddRawResource adds a raw resource to the pipeline .
7776	AddResource adds a new resource to the pipeline .
7777	AddGithubResource adds a Github resource to the pipeline .
7778	AddBoshource adds a source to the pipeline .
7779	AddBoshDeploymentResource adds a new BoshDeploymentResource to the pipeline .
7780	AddGitResource adds a git resource to the pipeline .
7781	allJobNames returns a list of job names .
7782	NewDeploymentManifestFromFile returns a DeploymentManifest from a file .
7783	NewDeploymentManifest returns a new DeploymentManifest .
7784	AddRemoteRelease adds a new release
7785	AddRemoteStemcell adds a new Stemcell
7786	Tag returns the tag associated with the given key .
7787	RemoveTag removes a tag from the manifest .
7788	LoadPivnetRelease loads a PivnetRelease from the given path
7789	ToolsReleaseOrEmpty returns a new BoshRelease or nil if it is empty .
7790	readPivnetRelease reads a PIVnetRelease from the given path .
7791	decodeYaml decodes a YAML file .
7792	NewZipWalker creates a new ZipWalker .
7793	NewDiffCmd returns a new DiffCmd
7794	All returns the diff .
7795	Job implements the DiffCommand interface .
7796	New returns a new Differ differ .
7797	StructName returns the name of the struct .
7798	TypeName returns the type of the record .
7799	NewTgzWalker creates a new TgzWalker .
7800	NewBackoff returns a new Backoff .
7801	Reset resets the backoff .
7802	NewExponential returns a new Backoff .
7803	NewExponentialFullJitter returns a new Backoff .
7804	NewLinear returns a new Backoff .
7805	GetLineSize returns the size of a line .
7806	Get max size
7807	Compute the output .
7808	WithTimeout adds the timeout to the request params
7809	WithContext adds the context to the PostApps params
7810	WithHTTPClient adds the HTTPClient to the request params
7811	WithBody adds the body to the request params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient sets the HTTPClient field s value .
7815	WithApp adds the app to the get app params
7816	UnmarshalBinary unmarshals a RouteWrapper .
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient sets the HTTPClient field s value .
7823	WithApp adds the app to the delete apps params
7824	WithTimeout sets the timeout params
7825	WithContext adds the context to the patch apps route params
7826	WithHTTPClient adds the HTTPClient to the request params
7827	WithAppRoutesRoute adds the app to the request params
7828	WithBody adds the body to the request params
7829	WithRoute adds the route to the request params
7830	WithTimeout sets the timeout params
7831	WithContext adds the context to the request params params
7832	WithHTTPClient adds the HTTPClient to the request params
7833	WithAppRout adds the app to the request params
7834	WithBody adds the body to the request params
7835	WithTimeout sets the timeout params
7836	WithContext adds the context to the request params
7837	WithAppRoutesRoute adds the app to the request params
7838	WithBody adds the body to the request params
7839	WithRoute adds the route to the request params
7840	WithTimeout sets the timeout params
7841	WithContext adds the context to the get apps application params
7842	WithHTTPClient adds the HTTPClient to the get app .
7843	WithAppRoutes sets the AppRoutes field s value .
7844	WithTimeout adds the timeout to the request params
7845	WithContext adds the context to the patch app params
7846	WithHTTPClient sets the HTTPClient field s value .
7847	WithApp adds the app to the patch app params
7848	WithBody adds the body to the patch apps .
7849	WithTimeout adds the timeout to the request params
7850	WithContext adds the context to the request params
7851	WithApp adds the app to the request params
7852	WithBody adds the body to the request params
7853	UnmarshalJSON deserializes a new TaskAll
7854	MarshalJSON marshals a Task to JSON .
7855	Validate validates this Task .
7856	GetRanges returns a list of IP addresses .
7857	WithTimeout sets the timeout params
7858	WithContext adds the context to the get app .
7859	WithHTTPClient adds the HTTPClient to the get app .
7860	WithAppRoutesRoute sets the AppRoutesRoute field s value .
7861	WithRoute adds the route to the list of apps .
7862	New creates a new function .
7863	SetTransport sets the transport .
7864	WithTimeout sets the timeout params
7865	WithContext adds the context to the delete apps route params
7866	WithHTTPClient adds the HTTPClient to the request params
7867	WithAppRoutesRoute adds the app to the request params
7868	WithRoute adds the route to the request params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore creates a new value store .
7873	Close closes the store .
7874	SetBackend sets the backend
7875	Ring returns the ring .
7876	GetLocalID returns the local ID of the server .
7877	GetListenAddr returns the address of the server
7878	Start starts the replication server .
7879	shutdownFinished finishes the server shutdown .
7880	Stop stops the server .
7881	Exit stops the server .
7882	SelfUpgrade implements the Server interface .
7883	SoftwareVersion returns the current version of the server .
7884	Shutdown shuts down the group store .
7885	Rant returns Rant model
7886	Profile returns user profile information .
7887	Search returns a list of Rants
7888	Return a random Rant model
7889	WeekRants returns a list of Rants .
7890	getUserId returns the user id
7891	Shutdown shuts down the server .
7892	FExists returns true if the file exists .
7893	outbound processes outbound messages .
7894	parse parses the message stream .
7895	Group creates a new Group
7896	Groups returns a list of groups .
7897	GetGroup returns a group by name .
7898	Reticence returns a string with the given length .
7899	CheckPassword validates a password
7900	CleanUrl cleans up the url and returns a string
7901	NewParameter creates a new Parameter .
7902	MakeParams returns a new Params instance .
7903	Parse parses the parameters from the given value .
7904	Email returns the email address .
7905	Forwarder returns a new Forwarder .
7906	Forwarders returns a list of forwarders .
7907	GetForwarder returns a forwarder .
7908	New creates a new CGP instance
7909	EscapeCommitSeparated converts a string into a string .
7910	Alias returns a new Alias instance
7911	Email returns the email address .
7912	Aliases returns all aliases .
7913	RealName returns the name of the account .
7914	Email returns the email address .
7915	Account returns a new account .
7916	Account returns all accounts in the domain .
7917	Exists returns true if the domain exists .
7918	Aliases returns the aliases for the domain .
7919	Domain returns a new Domain
7920	Domains returns a list of domains .
7921	New creates a new error
7922	Wrap wraps the wrapped error and returns a new error .
7923	mergeIn merges the info into the error message .
7924	wrapErrStr returns the wrapped error string .
7925	concatArgs returns a string with the given arguments .
7926	MailingList returns a new MailingList instance
7927	Subscriber creates a new Subscriber
7928	Subscribers returns a list of Subscriber objects .
7929	MailingList lists all Mailing lists .
7930	NewByteKeyItem returns a pointer to a byte slice .
7931	CompareBytes compares two bytes .
7932	CompareInt returns the number of items in this object .
7933	Memoc returns a pointer to memory .
7934	Free free memory .
7935	Stats returns a string representation of the buffer .
7936	FreeOSMemoryMemory frees memory memory .
7937	Add implements the Segment interface .
7938	NewSegment returns a new Segment .
7939	Assemble creates a new Seiplistist .
7940	CompareNodeTable compares two nodes .
7941	New creates a new node table .
7942	Stats returns a string representation of the node table .
7943	MemoryInUse returns the number of memory in memory .
7944	Get implements NodeTable interface .
7945	Update implements the NodeTable interface .
7946	Remove removes a node from the cache .
7947	Close closes the node table .
7948	MemoryInUse returns the number of bytes in memory .
7949	debugMarkFree is a helper function for debugging .
7950	Seek implements Iterator interface .
7951	Next implements iterator .
7952	Refresh refreshes the iterator .
7953	Close closes the iterator .
7954	NewIterator returns a new Iterator .
7955	SeekFirst implements the MergeIterator interface .
7956	Next implements the iterator .
7957	Seek implements the iterator interface .
7958	Keys returns the list of keys .
7959	Remove removes a key from the list
7960	Add adds a new node to the list
7961	NewWithConfig creates a new Skiplist .
7962	FreeNode frees a node .
7963	MakeBuf creates a new ActionBuffer .
7964	Size returns the size of the given node .
7965	NewLevel returns the next level .
7966	Insert inserts an item at the given position .
7967	Insert2 inserts an item at the given position .
7968	Insert3 inserts a node at the given position .
7969	Delete removes a node from the list .
7970	DeleteNode deletes a node .
7971	GetRangeSplitItems returns a slice of items in range .
7972	Bytes returns the bytes of the item .
7973	ItemSize returns the size of the item .
7974	KVFromBytes returns the KV from bytes .
7975	CompareKV compares two bytes .
7976	Emit the event body .
7977	UnregisterHandler removes a handler from the event controller .
7978	IsHandlerRegistered returns true if the given handler is registered .
7979	CompareNitro returns a new instance of Nitro
7980	DefaultConfig returns the default config
7981	Delete deletes the given bytes .
7982	GetNode returns the next node in the store .
7983	SetKeyComparator sets the key comparator .
7984	UseMemoryMgmt sets the memory mgmt for memory .
7985	NewWithConfig returns a new instance of Nitro .
7986	MemoryInUse returns the memory in memory .
7987	Close closes the snapshot .
7988	NewWriter creates a new writer
7989	SnapshotSize returns the size of the snapshot .
7990	Encode encodes a snapshot into a Writer .
7991	Decode decodes the snapshot from the given buffer .
7992	Open opens the snapshot .
7993	CompareSnapshot compares two Snapshot objects .
7994	GC garbage collector
7995	GetSnapshots returns the snapshot of the snapshot
7996	MemoryInUse returns the number of bytes in memory .
7997	CompareBS returns the number of bytes in the same order .
7998	Acquire returns the barrier session .
7999	Release releases the barrier .
8000	FlushSession clears the session .
8001	Apply applies to the stats report .
8002	AddInt64 adds a value to the stats .
8003	AddUint64 adds a uint64 to the stats .
8004	Merge merges stats .
8005	GetStats returns the stats report .
8006	NewIterator returns a new Iterator .
8007	SeekFirst implements Iterator .
8008	SeekWithCmp implements iterator . SeekWithCmp .
8009	Seek implements Iterator .
8010	Valid returns true if the iterator is valid .
8011	Delete deletes the iterator .
8012	Next implements iterator .
8013	Init initializes the Skuator
8014	FromURL converts a URL to a string .
8015	ToURL converts a folder to a URL
8016	Size returns the size of the TupleHeaderHeader .
8017	WriteTo implements io . WriterTo interface .
8018	Static returns a handler for the given directory .
8019	Read reads the configuration from the file .
8020	Del removes a key from the config .
8021	WriteTo writes the configuration to a file .
8022	checkSection returns the section of a section .
8023	checkLine parses a line and returns the key .
8024	checkComment checks if a line is a comment
8025	NewResponseWrapper returns a new ResponseWrapper
8026	Hijack implements the http . Handler interface .
8027	CloseNotify closes the writer .
8028	DateFormat sets the date format
8029	Logger creates a new log logger .
8030	GetAvailableInventory returns a map of available SKU items .
8031	Expiration sets the expiration time
8032	Claimer sets the claimer
8033	Issuer sets the issuer
8034	User sets the user s user
8035	Password sets the password
8036	Extractor sets the Extractor for the request .
8037	TokenGenerator creates a new token generator .
8038	Token returns the token from the request .
8039	Claim returns the claims from the request .
8040	String returns the string representation of the Token .
8041	NewLexer creates a new Lexer .
8042	run runs lexer .
8043	emit emit a token
8044	skipWhitespace skip whitespace .
8045	next returns the next rune
8046	LineNum returns the number of lines .
8047	Offset returns the offset of the current line .
8048	errorf implements the lexer interface .
8049	lexText implements lexer . lexer .
8050	lexComment parses a comment .
8051	New creates a new TupleType
8052	AddVersion adds a field to the tuple .
8053	Contains returns true if the given field exists .
8054	Offset returns the offset of the field .
8055	Versions returns the versions of the tuple .
8056	SetPrivateMeta sets the PrivateMetaData field s value .
8057	SetPublicMeta sets the MetaData field s value .
8058	GetRedactedVersion returns a redacted version of the task .
8059	Equal returns true if two tasks are equal .
8060	HTTP adds a HTTP request to the given verb .
8061	PutUint8 adds a uint8 to the TupleBuilder .
8062	PutInt8 adds an int8 field to the TupleBuilder .
8063	PutUint16 adds a uint16 to the TupleBuilder .
8064	PutInt16 adds an int16 to the TupleBuilder .
8065	PutUint32 adds a uint32 to the TupleBuilder .
8066	PutInt32 adds an int32 to the TupleBuilder .
8067	PutUint64 adds a uint64 to the buffer .
8068	PutInt64 adds an int64 to the TupleBuilder .
8069	NewPackageList returns a new package list .
8070	PutFloat32 adds a float32 value to the TupleBuilder .
8071	Classic creates a new Classic Martini instance
8072	Language sets the languages .
8073	Session sets the session
8074	Data returns the context value .
8075	URL returns the URL for the current context .
8076	Size returns the size of the screen
8077	GetRequestIDFromTaskResponse gets the request ID from the task response
8078	PutString adds a string to the TupleBuilder .
8079	LoadDirectory parses a directory .
8080	LoadFile loads a package from a file .
8081	LoadPackage loads a package .
8082	NewDecoder returns a new decoder .
8083	NewDecoderSize creates a new decoder .
8084	Pan panics if the given HTTP Handler is a panic .
8085	DeployVApp creates a VApp with the specified template .
8086	UnDeployV removes a vapp
8087	Auth mocks base method
8088	QueryTemplate returns the vapp template for a given template name .
8089	NewEncoder creates a new encoder .
8090	Getter returns an option that sets the nonceter .
8091	Setter sets the Nonce field s value .
8092	Age sets the age of seconds .
8093	Nonce adds a nonce to the request .
8094	NonceValueFromRequest returns the nonceValue from the request .
8095	StoreNonce sets the nonce value for the request .
8096	PutFloat32Array adds a float32 array to the TupleBuilder .
8097	PutFloat64Array adds a float64 array to the buffer .
8098	Do sends a request to the client
8099	NewLease creates a new Lease
8100	Delete deletes a lease
8101	Post creates a new lease
8102	ReStock returns the current SKU task .
8103	procurement returns the task for the lease
8104	InitFromHTTPRequest initializes the Lease API request .
8105	Is returns true if the tuple matches the given tuple type .
8106	Offset returns the offset of the given field .
8107	WriteTo implements io . Writer interface .
8108	PutTuple writes a Tuple into a TupleBuilder .
8109	WriteString writes a string to the response
8110	NotFound is a convenience method that is used to respond with the given message .
8111	Run starts the agent .
8112	NewWaitGroup returns a new WaitGroup .
8113	Add adds an increment to the queue .
8114	Wait implements the WaitGroup interface .
8115	Gzip wraps the http . Handler interface .
8116	New creates a new InnkeeperClient
8117	Error sends an error message
8118	Render renderer .
8119	NewClient creates a new PDClient
8120	GetTask returns the task with the given ID .
8121	WriteImageToHTTP writes an image to http . ResponseWriter .
